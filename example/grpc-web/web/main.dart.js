// Generated by dart2js (full emitter, strong), the Dart to JavaScript compiler version: 2.1.0.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
//
// defaultPackagesBase:
//    Override the location where `package:` uris are resolved from. By default
//    they are resolved under "packages/" from the current window location.
(function() {
  // /* ::norenaming:: */
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function map(x) {
    x = Object.create(null);
    x.x = 0;
    delete x.x;
    return x;
  }
  // The global objects start as so-called "slow objects". For V8, this
  // means that it won't try to make map transitions as we add properties
  // to these objects. Later on, we attempt to turn these objects into
  // fast objects by calling "convertToFastObject" (see
  // [emitConvertToFastObjectFunction]).
  var A = map();
  var B = map();
  var C = map();
  var D = map();
  var E = map();
  var F = map();
  var G = map();
  var H = map();
  var J = map();
  var K = map();
  var L = map();
  var M = map();
  var N = map();
  var O = map();
  var P = map();
  var Q = map();
  var R = map();
  var S = map();
  var T = map();
  var U = map();
  var V = map();
  var W = map();
  var X = map();
  var Y = map();
  var Z = map();
  function Isolate() {
  }
  init();
  // Constructors are generated at runtime.
  function setupProgram(programData, metadataOffset, typesOffset) {
    "use strict";
    function generateAccessor(fieldDescriptor, accessors, cls) {
      var fieldInformation = fieldDescriptor.split("-");
      var field = fieldInformation[0];
      var len = field.length;
      var code = field.charCodeAt(len - 1);
      var reflectable;
      if (fieldInformation.length > 1)
        reflectable = true;
      else
        reflectable = false;
      code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
      if (code) {
        var getterCode = code & 3;
        var setterCode = code >> 2;
        var accessorName = field = field.substring(0, len - 1);
        var divider = field.indexOf(":");
        if (divider > 0) {
          accessorName = field.substring(0, divider);
          field = field.substring(divider + 1);
        }
        if (getterCode) {
          var args = getterCode & 2 ? "receiver" : "";
          var receiver = getterCode & 1 ? "this" : "receiver";
          var body = "return " + receiver + "." + field;
          var property = cls + ".prototype.get$" + accessorName + "=";
          var fn = "function(" + args + "){" + body + "}";
          if (reflectable)
            accessors.push(property + "$reflectable(" + fn + ");\n");
          else
            accessors.push(property + fn + ";\n");
        }
        if (setterCode) {
          var args = setterCode & 2 ? "receiver, value" : "value";
          var receiver = setterCode & 1 ? "this" : "receiver";
          var body = receiver + "." + field + " = value";
          var property = cls + ".prototype.set$" + accessorName + "=";
          var fn = "function(" + args + "){" + body + "}";
          if (reflectable)
            accessors.push(property + "$reflectable(" + fn + ");\n");
          else
            accessors.push(property + fn + ";\n");
        }
      }
      return field;
    }
    function defineClass(name, fields) {
      var accessors = [];
      var str = "function " + name + "(";
      var comma = "", body = "";
      for (var i = 0; i < fields.length; i++) {
        var fieldDescriptor = fields[i];
        if (fieldDescriptor.charCodeAt(0) == 48) {
          fieldDescriptor = fieldDescriptor.substring(1);
          var field = generateAccessor(fieldDescriptor, accessors, name);
          body += "this." + field + " = null;\n";
        } else {
          var field = generateAccessor(fieldDescriptor, accessors, name);
          var parameter = "p_" + field;
          str += comma;
          comma = ", ";
          str += parameter;
          body += "this." + field + " = " + parameter + ";\n";
        }
      }
      if (supportsDirectProtoAccess)
        body += "this." + "$deferredAction" + "();";
      str += ") {\n" + body + "}\n";
      str += name + ".builtin$cls=\"" + name + "\";\n";
      str += "$desc=$collectedClasses." + name + "[1];\n";
      str += name + ".prototype = $desc;\n";
      if (typeof defineClass.name != "string")
        str += name + ".name=\"" + name + "\";\n";
      str += accessors.join("");
      return str;
    }
    var inheritFrom = supportsDirectProtoAccess ? function(constructor, superConstructor) {
      var prototype = constructor.prototype;
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
      prototype["$is" + constructor.name] = constructor;
      return convertToFastObject(prototype);
    } : function() {
      function tmp() {
      }
      return function(constructor, superConstructor) {
        tmp.prototype = superConstructor.prototype;
        var object = new tmp();
        convertToSlowObject(object);
        var properties = constructor.prototype;
        var members = Object.keys(properties);
        for (var i = 0; i < members.length; i++) {
          var member = members[i];
          object[member] = properties[member];
        }
        object["$is" + constructor.name] = constructor;
        object.constructor = constructor;
        constructor.prototype = object;
        return object;
      };
    }();
    function finishClasses(processedClasses) {
      var allClasses = init.allClasses;
      processedClasses.combinedConstructorFunction += "return [\n" + processedClasses.constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", processedClasses.combinedConstructorFunction)(processedClasses.collected);
      processedClasses.combinedConstructorFunction = null;
      for (var i = 0; i < constructors.length; i++) {
        var constructor = constructors[i];
        var cls = constructor.name;
        var desc = processedClasses.collected[cls];
        var globalObject = desc[0];
        desc = desc[1];
        allClasses[cls] = constructor;
        globalObject[cls] = constructor;
      }
      constructors = null;
      var finishedClasses = init.finishedClasses;
      function finishClass(cls) {
        if (finishedClasses[cls])
          return;
        finishedClasses[cls] = true;
        var superclass = processedClasses.pending[cls];
        if (superclass && superclass.indexOf("+") > 0) {
          var s = superclass.split("+");
          superclass = s[0];
          var mixinClass = s[1];
          finishClass(mixinClass);
          var mixin = allClasses[mixinClass];
          var mixinPrototype = mixin.prototype;
          var clsPrototype = allClasses[cls].prototype;
          var properties = Object.keys(mixinPrototype);
          for (var i = 0; i < properties.length; i++) {
            var d = properties[i];
            if (!hasOwnProperty.call(clsPrototype, d))
              clsPrototype[d] = mixinPrototype[d];
          }
        }
        if (!superclass || typeof superclass != "string") {
          var constructor = allClasses[cls];
          var prototype = constructor.prototype;
          prototype.constructor = constructor;
          prototype.$isObject = constructor;
          prototype.$deferredAction = function() {
          };
          return;
        }
        finishClass(superclass);
        var superConstructor = allClasses[superclass];
        if (!superConstructor)
          superConstructor = existingIsolateProperties[superclass];
        var constructor = allClasses[cls];
        var prototype = inheritFrom(constructor, superConstructor);
        if (mixinPrototype)
          prototype.$deferredAction = mixinDeferredActionHelper(mixinPrototype, prototype);
        if (Object.prototype.hasOwnProperty.call(prototype, "%")) {
          var nativeSpec = prototype["%"].split(";");
          if (nativeSpec[0]) {
            var tags = nativeSpec[0].split("|");
            for (var i = 0; i < tags.length; i++) {
              init.interceptorsByTag[tags[i]] = constructor;
              init.leafTags[tags[i]] = true;
            }
          }
          if (nativeSpec[1]) {
            tags = nativeSpec[1].split("|");
            if (nativeSpec[2]) {
              var subclasses = nativeSpec[2].split("|");
              for (var i = 0; i < subclasses.length; i++) {
                var subclass = allClasses[subclasses[i]];
                subclass.$nativeSuperclassTag = tags[0];
              }
            }
            for (i = 0; i < tags.length; i++) {
              init.interceptorsByTag[tags[i]] = constructor;
              init.leafTags[tags[i]] = false;
            }
          }
          prototype.$deferredAction();
        }
        if (prototype.$isInterceptor)
          prototype.$deferredAction();
      }
      var properties = Object.keys(processedClasses.pending);
      for (var i = 0; i < properties.length; i++)
        finishClass(properties[i]);
    }
    function finishAddStubsHelper() {
      var prototype = this;
      while (!prototype.hasOwnProperty("$deferredAction"))
        prototype = prototype.__proto__;
      delete prototype.$deferredAction;
      var properties = Object.keys(prototype);
      for (var index = 0; index < properties.length; index++) {
        var property = properties[index];
        var firstChar = property.charCodeAt(0);
        var elem;
        if (property !== "^" && property !== "$reflectable" && firstChar !== 43 && firstChar !== 42 && (elem = prototype[property]) != null && elem.constructor === Array && property !== "<>")
          addStubs(prototype, elem, property, false, []);
      }
      convertToFastObject(prototype);
      prototype = prototype.__proto__;
      prototype.$deferredAction();
    }
    function mixinDeferredActionHelper(mixinPrototype, targetPrototype) {
      var chain;
      if (targetPrototype.hasOwnProperty("$deferredAction"))
        chain = targetPrototype.$deferredAction;
      return function foo() {
        if (!supportsDirectProtoAccess)
          return;
        var prototype = this;
        while (!prototype.hasOwnProperty("$deferredAction"))
          prototype = prototype.__proto__;
        if (chain)
          prototype.$deferredAction = chain;
        else {
          delete prototype.$deferredAction;
          convertToFastObject(prototype);
        }
        mixinPrototype.$deferredAction();
        prototype.$deferredAction();
      };
    }
    function processClassData(cls, descriptor, processedClasses) {
      descriptor = convertToSlowObject(descriptor);
      var previousProperty;
      var properties = Object.keys(descriptor);
      var hasDeferredWork = false;
      var shouldDeferWork = supportsDirectProtoAccess && cls != "Object";
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        var firstChar = property.charCodeAt(0);
        if (property === "static") {
          processStatics(init.statics[cls] = descriptor.static, processedClasses);
          delete descriptor.static;
        } else if (firstChar === 43) {
          mangledNames[previousProperty] = property.substring(1);
          var flag = descriptor[property];
          if (flag > 0)
            descriptor[previousProperty].$reflectable = flag;
        } else if (firstChar === 42) {
          descriptor[previousProperty].$defaultValues = descriptor[property];
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods)
            descriptor.$methodsWithOptionalArguments = optionalMethods = {};
          optionalMethods[property] = previousProperty;
        } else {
          var elem = descriptor[property];
          if (property !== "^" && elem != null && elem.constructor === Array && property !== "<>")
            if (shouldDeferWork)
              hasDeferredWork = true;
            else
              addStubs(descriptor, elem, property, false, []);
          else
            previousProperty = property;
        }
      }
      if (hasDeferredWork)
        descriptor.$deferredAction = finishAddStubsHelper;
      var classData = descriptor["^"],
        split, supr,
        fields = classData;
      var s = fields.split(";");
      fields = s[1] ? s[1].split(",") : [];
      supr = s[0];
      split = supr.split(":");
      if (split.length == 2) {
        supr = split[0];
        var functionSignature = split[1];
        if (functionSignature)
          descriptor.$signature = function(s) {
            return function() {
              return init.types[s];
            };
          }(functionSignature);
      }
      if (supr)
        processedClasses.pending[cls] = supr;
      processedClasses.combinedConstructorFunction += defineClass(cls, fields);
      processedClasses.constructorsList.push(cls);
      processedClasses.collected[cls] = [globalObject, descriptor];
      classes.push(cls);
    }
    function processStatics(descriptor, processedClasses) {
      var properties = Object.keys(descriptor);
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        if (property === "^")
          continue;
        var element = descriptor[property];
        var firstChar = property.charCodeAt(0);
        var previousProperty;
        if (firstChar === 43) {
          mangledGlobalNames[previousProperty] = property.substring(1);
          var flag = descriptor[property];
          if (flag > 0)
            descriptor[previousProperty].$reflectable = flag;
          if (element && element.length)
            init.typeInformation[previousProperty] = element;
        } else if (firstChar === 42) {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods)
            descriptor.$methodsWithOptionalArguments = optionalMethods = {};
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
        } else if (element.constructor === Array)
          addStubs(globalObject, element, property, true, functions);
        else {
          previousProperty = property;
          processClassData(property, element, processedClasses);
        }
      }
    }
    function addStubs(prototype, array, name, isStatic, functions) {
      var index = 0,
        applyTrampolineIndex = index,
        alias = array[index],
        f;
      if (typeof alias == "string")
        f = array[++index];
      else {
        f = alias;
        alias = name;
      }
      if (typeof f == "number") {
        applyTrampolineIndex = f;
        f = array[++index];
      }
      prototype[name] = prototype[alias] = f;
      var funcs = [f];
      f.$stubName = name;
      functions.push(name);
      for (index++; index < array.length; index++) {
        f = array[index];
        if (typeof f != "function")
          break;
        if (!isStatic)
          f.$stubName = array[++index];
        funcs.push(f);
        if (f.$stubName) {
          prototype[f.$stubName] = f;
          functions.push(f.$stubName);
        }
      }
      for (var i = 0; i < funcs.length; index++, i++)
        funcs[i].$callName = array[index];
      var getterStubName = array[index];
      array = array.slice(++index);
      var requiredParameterInfo = array[0];
      var isIntercepted = (requiredParameterInfo & 1) === 1;
      requiredParameterInfo = requiredParameterInfo >> 1;
      var requiredParameterCount = requiredParameterInfo >> 1;
      var isAccessor = (requiredParameterInfo & 1) === 1;
      var isSetter = requiredParameterInfo === 3;
      var isGetter = requiredParameterInfo === 1;
      var optionalParameterInfo = array[1];
      var optionalParameterCount = optionalParameterInfo >> 1;
      var optionalParametersAreNamed = (optionalParameterInfo & 1) === 1;
      var totalParameterCount = requiredParameterCount + optionalParameterCount;
      var functionTypeIndex = array[2];
      if (typeof functionTypeIndex == "number")
        array[2] = functionTypeIndex + typesOffset;
      if (metadataOffset > 0) {
        var position = 3;
        for (var i = 0; i < optionalParameterCount; i++) {
          if (typeof array[position] == "number")
            array[position] = array[position] + metadataOffset;
          position++;
        }
        for (var i = 0; i < totalParameterCount; i++) {
          array[position] = array[position] + metadataOffset;
          position++;
        }
      }
      var unmangledNameIndex = 2 * optionalParameterCount + requiredParameterCount + 3;
      if (getterStubName) {
        f = tearOff(funcs, applyTrampolineIndex, array, isStatic, name, isIntercepted);
        prototype[name].$getter = f;
        f.$getterStub = true;
        if (isStatic)
          functions.push(getterStubName);
        prototype[getterStubName] = f;
        funcs.push(f);
        f.$stubName = getterStubName;
        f.$callName = null;
      }
    }
    function tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted) {
      return isIntercepted ? new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(receiver) {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, true, name);" + "return new c(this, funcs[0], receiver, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null) : new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, false, name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null);
    }
    function tearOff(funcs, applyTrampolineIndex, reflectionInfo, isStatic, name, isIntercepted) {
      var cache = null;
      return isStatic ? function() {
        if (cache === null)
          cache = H.closureFromTearOff(this, funcs, applyTrampolineIndex, reflectionInfo, true, false, name).prototype;
        return cache;
      } : tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted);
    }
    var functionCounter = 0;
    if (!init.libraries)
      init.libraries = [];
    if (!init.mangledNames)
      init.mangledNames = map();
    if (!init.mangledGlobalNames)
      init.mangledGlobalNames = map();
    if (!init.statics)
      init.statics = map();
    if (!init.typeInformation)
      init.typeInformation = map();
    var libraries = init.libraries;
    var mangledNames = init.mangledNames;
    var mangledGlobalNames = init.mangledGlobalNames;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var length = programData.length;
    var processedClasses = map();
    processedClasses.collected = map();
    processedClasses.pending = map();
    processedClasses.constructorsList = [];
    processedClasses.combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
    for (var i = 0; i < length; i++) {
      var data = programData[i];
      var name = data[0];
      var uri = data[1];
      var metadata = data[2];
      var globalObject = data[3];
      var descriptor = data[4];
      var isRoot = !!data[5];
      var fields = descriptor && descriptor["^"];
      if (fields instanceof Array)
        fields = fields[0];
      var classes = [];
      var functions = [];
      processStatics(descriptor, processedClasses);
      libraries.push([name, uri, classes, functions, metadata, fields, isRoot, globalObject]);
    }
    finishClasses(processedClasses);
  }
  Isolate.functionThatReturnsNull = function() {
  };
  var dart = [["_foreign_helper", "dart:_foreign_helper",, H, {
    "^": "",
    JS_CONST: {
      "^": "Object;code"
    }
  }], ["_interceptors", "dart:_interceptors",, J, {
    "^": "",
    makeDispatchRecord: function(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor: function(object) {
      var record, proto, objectProto, $constructor, interceptor;
      record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          H.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
      }
      $constructor = object.constructor;
      interceptor = $constructor == null ? null : $constructor[$.$get$JS_INTEROP_INTERCEPTOR_TAG()];
      if (interceptor != null)
        return interceptor;
      interceptor = H.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return C.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return C.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        Object.defineProperty($constructor, $.$get$JS_INTEROP_INTERCEPTOR_TAG(), {value: C.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return C.UnknownJavaScriptObject_methods;
      }
      return C.UnknownJavaScriptObject_methods;
    },
    Interceptor: {
      "^": "Object;",
      $eq: function(receiver, other) {
        return receiver === other;
      },
      get$hashCode: function(receiver) {
        return H.Primitives_objectHashCode(receiver);
      },
      toString$0: ["super$Interceptor$toString", function(receiver) {
        return "Instance of '" + H.Primitives_objectTypeName(receiver) + "'";
      }],
      "%": "ANGLEInstancedArrays|ANGLE_instanced_arrays|AnimationEffectReadOnly|AnimationEffectTiming|AnimationEffectTimingReadOnly|AnimationTimeline|AnimationWorkletGlobalScope|AudioListener|AudioTrack|AudioWorkletGlobalScope|AudioWorkletProcessor|AuthenticatorAssertionResponse|AuthenticatorAttestationResponse|AuthenticatorResponse|BackgroundFetchFetch|BackgroundFetchManager|BackgroundFetchSettledFetch|BarProp|BarcodeDetector|Bluetooth|BluetoothCharacteristicProperties|BluetoothRemoteGATTServer|BluetoothRemoteGATTService|BluetoothUUID|Body|BudgetService|BudgetState|CSS|CSSVariableReferenceValue|Cache|CacheStorage|CanvasGradient|CanvasPattern|CanvasRenderingContext2D|Client|Clients|CookieStore|Coordinates|Credential|CredentialUserData|CredentialsContainer|Crypto|CryptoKey|CustomElementRegistry|DOMError|DOMFileSystem|DOMFileSystemSync|DOMImplementation|DOMMatrix|DOMMatrixReadOnly|DOMParser|DOMPoint|DOMPointReadOnly|DOMQuad|DOMStringMap|DataTransfer|DataTransferItem|Database|DeprecatedStorageInfo|DeprecatedStorageQuota|DeprecationReport|DetectedBarcode|DetectedFace|DetectedText|DeviceAcceleration|DeviceRotationRate|DirectoryEntrySync|DirectoryReader|DirectoryReaderSync|DocumentOrShadowRoot|DocumentTimeline|EXTBlendMinMax|EXTColorBufferFloat|EXTColorBufferHalfFloat|EXTDisjointTimerQuery|EXTDisjointTimerQueryWebGL2|EXTFragDepth|EXTShaderTextureLOD|EXTTextureFilterAnisotropic|EXT_blend_minmax|EXT_frag_depth|EXT_sRGB|EXT_shader_texture_lod|EXT_texture_filter_anisotropic|EXTsRGB|EntrySync|External|FaceDetector|FederatedCredential|FileEntrySync|FileReaderSync|FileWriterSync|FontFace|FontFaceSource|FormData|GamepadPose|Geolocation|HTMLAllCollection|HTMLHyperlinkElementUtils|Headers|IDBFactory|IDBIndex|IDBKeyRange|IDBObjectStore|IDBObserver|IDBObserverChanges|IdleDeadline|ImageBitmapRenderingContext|ImageCapture|InputDeviceCapabilities|IntersectionObserver|IntersectionObserverEntry|InterventionReport|Iterator|KeyframeEffect|KeyframeEffectReadOnly|MediaCapabilities|MediaCapabilitiesInfo|MediaDeviceInfo|MediaError|MediaKeyStatusMap|MediaKeySystemAccess|MediaKeys|MediaKeysPolicy|MediaMetadata|MediaSession|MediaSettingsRange|MemoryInfo|MessageChannel|Metadata|Mojo|MojoHandle|MojoWatcher|MutationObserver|MutationRecord|NFC|NavigationPreloadManager|Navigator|NavigatorAutomationInformation|NavigatorConcurrentHardware|NavigatorCookies|NavigatorUserMediaError|NodeFilter|NodeIterator|NonDocumentTypeChildNode|NonElementParentNode|NoncedElement|OESElementIndexUint|OESStandardDerivatives|OESTextureFloat|OESTextureFloatLinear|OESTextureHalfFloat|OESTextureHalfFloatLinear|OESVertexArrayObject|OES_element_index_uint|OES_standard_derivatives|OES_texture_float|OES_texture_float_linear|OES_texture_half_float|OES_texture_half_float_linear|OES_vertex_array_object|OffscreenCanvasRenderingContext2D|OverconstrainedError|PagePopupController|PaintRenderingContext2D|PaintWorkletGlobalScope|PasswordCredential|Path2D|PaymentAddress|PaymentInstruments|PaymentManager|PaymentResponse|PerformanceEntry|PerformanceLongTaskTiming|PerformanceMark|PerformanceMeasure|PerformanceNavigation|PerformanceNavigationTiming|PerformanceObserver|PerformanceObserverEntryList|PerformancePaintTiming|PerformanceResourceTiming|PerformanceServerTiming|PerformanceTiming|PeriodicWave|Permissions|PhotoCapabilities|Position|PositionError|Presentation|PresentationReceiver|PublicKeyCredential|PushManager|PushMessageData|PushSubscription|PushSubscriptionOptions|RTCCertificate|RTCIceCandidate|RTCLegacyStatsReport|RTCRtpContributingSource|RTCRtpReceiver|RTCRtpSender|RTCSessionDescription|RTCStatsResponse|Range|RelatedApplication|Report|ReportBody|ReportingObserver|Request|ResizeObserver|ResizeObserverEntry|Response|SQLError|SQLResultSet|SQLTransaction|SVGAnimatedAngle|SVGAnimatedBoolean|SVGAnimatedEnumeration|SVGAnimatedInteger|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedPreserveAspectRatio|SVGAnimatedRect|SVGAnimatedString|SVGAnimatedTransformList|SVGMatrix|SVGPoint|SVGPreserveAspectRatio|SVGUnitTypes|ScrollState|ScrollTimeline|Selection|SharedArrayBuffer|SpeechRecognitionAlternative|SpeechSynthesisVoice|StaticRange|StorageManager|StyleMedia|StylePropertyMap|StylePropertyMapReadonly|SubtleCrypto|SyncManager|TaskAttributionTiming|TextDetector|TrackDefault|TreeWalker|TrustedHTML|TrustedScriptURL|TrustedURL|URLSearchParams|USBAlternateInterface|USBConfiguration|USBDevice|USBEndpoint|USBInTransferResult|USBInterface|USBIsochronousInTransferPacket|USBIsochronousInTransferResult|USBIsochronousOutTransferPacket|USBIsochronousOutTransferResult|USBOutTransferResult|UnderlyingSourceBase|VRCoordinateSystem|VRDisplayCapabilities|VREyeParameters|VRFrameData|VRFrameOfReference|VRPose|VRStageBounds|VRStageBoundsPoint|VRStageParameters|ValidityState|VideoPlaybackQuality|VideoTrack|WEBGL_compressed_texture_atc|WEBGL_compressed_texture_etc1|WEBGL_compressed_texture_pvrtc|WEBGL_compressed_texture_s3tc|WEBGL_debug_renderer_info|WEBGL_debug_shaders|WEBGL_depth_texture|WEBGL_draw_buffers|WEBGL_lose_context|WebGL|WebGL2RenderingContext|WebGL2RenderingContextBase|WebGLActiveInfo|WebGLBuffer|WebGLCanvas|WebGLColorBufferFloat|WebGLCompressedTextureASTC|WebGLCompressedTextureATC|WebGLCompressedTextureETC|WebGLCompressedTextureETC1|WebGLCompressedTexturePVRTC|WebGLCompressedTextureS3TC|WebGLCompressedTextureS3TCsRGB|WebGLDebugRendererInfo|WebGLDebugShaders|WebGLDepthTexture|WebGLDrawBuffers|WebGLExtensionLoseContext|WebGLFramebuffer|WebGLGetBufferSubDataAsync|WebGLLoseContext|WebGLProgram|WebGLQuery|WebGLRenderbuffer|WebGLRenderingContext|WebGLSampler|WebGLShader|WebGLShaderPrecisionFormat|WebGLSync|WebGLTexture|WebGLTimerQueryEXT|WebGLTransformFeedback|WebGLUniformLocation|WebGLVertexArrayObject|WebGLVertexArrayObjectOES|WebKitMutationObserver|WindowClient|WorkerLocation|WorkerNavigator|Worklet|WorkletAnimation|WorkletGlobalScope|XMLSerializer|XPathEvaluator|XPathExpression|XPathNSResolver|XPathResult|XSLTProcessor|mozRTCIceCandidate|mozRTCSessionDescription"
    },
    JSBool: {
      "^": "Interceptor;",
      toString$0: function(receiver) {
        return String(receiver);
      },
      $and: function(receiver, other) {
        return H.checkBool(H.boolTypeCheck(other)) && receiver;
      },
      get$hashCode: function(receiver) {
        return receiver ? 519018 : 218159;
      },
      $isbool: 1
    },
    JSNull: {
      "^": "Interceptor;",
      $eq: function(receiver, other) {
        return null == other;
      },
      toString$0: function(receiver) {
        return "null";
      },
      get$hashCode: function(receiver) {
        return 0;
      },
      $isNull: 1
    },
    JavaScriptObject: {
      "^": "Interceptor;",
      get$hashCode: function(receiver) {
        return 0;
      },
      toString$0: ["super$JavaScriptObject$toString", function(receiver) {
        return String(receiver);
      }]
    },
    PlainJavaScriptObject: {
      "^": "JavaScriptObject;"
    },
    UnknownJavaScriptObject: {
      "^": "JavaScriptObject;"
    },
    JavaScriptFunction: {
      "^": "JavaScriptObject;",
      toString$0: function(receiver) {
        var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
        if (dartClosure == null)
          return this.super$JavaScriptObject$toString(receiver);
        return "JavaScript function for " + H.S(J.toString$0$(dartClosure));
      },
      $signature: function() {
        return {func: 1, opt: [,,,,,,,,,,,,,,,,]};
      },
      $isFunction: 1
    },
    JSArray: {
      "^": "Interceptor;$ti",
      add$1: function(receiver, value) {
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
        if (!!receiver.fixed$length)
          H.throwExpression(P.UnsupportedError$("add"));
        receiver.push(value);
      },
      _removeWhere$2: function(receiver, test, removeMatching) {
        var retained, end, i, element, t1;
        H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(receiver, 0)]});
        retained = [];
        end = receiver.length;
        for (i = 0; i < end; ++i) {
          element = receiver[i];
          if (!test.call$1(element))
            retained.push(element);
          if (receiver.length !== end)
            throw H.wrapException(P.ConcurrentModificationError$(receiver));
        }
        t1 = retained.length;
        if (t1 === end)
          return;
        this.set$length(receiver, t1);
        for (i = 0; i < retained.length; ++i)
          receiver[i] = retained[i];
      },
      addAll$1: function(receiver, collection) {
        var t1;
        H.assertSubtype(collection, "$isIterable", [H.getTypeArgumentByIndex(receiver, 0)], "$asIterable");
        if (!!receiver.fixed$length)
          H.throwExpression(P.UnsupportedError$("addAll"));
        for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
          receiver.push(t1._current);
      },
      forEach$1: function(receiver, f) {
        var end, i;
        H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(receiver, 0)]});
        end = receiver.length;
        for (i = 0; i < end; ++i) {
          f.call$1(receiver[i]);
          if (receiver.length !== end)
            throw H.wrapException(P.ConcurrentModificationError$(receiver));
        }
      },
      map$1$1: function(receiver, f, $T) {
        var t1 = H.getTypeArgumentByIndex(receiver, 0);
        return new H.MappedListIterable(receiver, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), [t1, $T]);
      },
      join$1: function(receiver, separator) {
        var list, i;
        list = new Array(receiver.length);
        list.fixed$length = Array;
        for (i = 0; i < receiver.length; ++i)
          this.$indexSet(list, i, H.S(receiver[i]));
        return list.join(separator);
      },
      skip$1: function(receiver, n) {
        return H.SubListIterable$(receiver, n, null, H.getTypeArgumentByIndex(receiver, 0));
      },
      elementAt$1: function(receiver, index) {
        if (index < 0 || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      sublist$2: function(receiver, start, end) {
        if (start < 0 || start > receiver.length)
          throw H.wrapException(P.RangeError$range(start, 0, receiver.length, "start", null));
        if (end < start || end > receiver.length)
          throw H.wrapException(P.RangeError$range(end, start, receiver.length, "end", null));
        if (start === end)
          return H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(receiver, 0)]);
        return H.setRuntimeTypeInfo(receiver.slice(start, end), [H.getTypeArgumentByIndex(receiver, 0)]);
      },
      every$1: function(receiver, test) {
        var end, i;
        H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(receiver, 0)]});
        end = receiver.length;
        for (i = 0; i < end; ++i) {
          if (!test.call$1(receiver[i]))
            return false;
          if (receiver.length !== end)
            throw H.wrapException(P.ConcurrentModificationError$(receiver));
        }
        return true;
      },
      sort$1: function(receiver, compare) {
        var t1 = H.getTypeArgumentByIndex(receiver, 0);
        H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [t1, t1]});
        if (!!receiver.immutable$list)
          H.throwExpression(P.UnsupportedError$("sort"));
        H.Sort_sort(receiver, compare == null ? J._interceptors_JSArray__compareAny$closure() : compare, t1);
      },
      sort$0: function($receiver) {
        return this.sort$1($receiver, null);
      },
      contains$1: function(receiver, other) {
        var i;
        for (i = 0; i < receiver.length; ++i)
          if (J.$eq$(receiver[i], other))
            return true;
        return false;
      },
      get$isEmpty: function(receiver) {
        return receiver.length === 0;
      },
      toString$0: function(receiver) {
        return P.IterableBase_iterableToFullString(receiver, "[", "]");
      },
      get$iterator: function(receiver) {
        return new J.ArrayIterator(receiver, receiver.length, 0, [H.getTypeArgumentByIndex(receiver, 0)]);
      },
      get$hashCode: function(receiver) {
        return H.Primitives_objectHashCode(receiver);
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      set$length: function(receiver, newLength) {
        if (!!receiver.fixed$length)
          H.throwExpression(P.UnsupportedError$("set length"));
        if (newLength < 0)
          throw H.wrapException(P.RangeError$range(newLength, 0, null, "newLength", null));
        receiver.length = newLength;
      },
      $index: function(receiver, index) {
        if (index >= receiver.length || index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
        if (!!receiver.immutable$list)
          H.throwExpression(P.UnsupportedError$("indexed set"));
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index >= receiver.length || index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        receiver[index] = value;
      },
      $isJSIndexable: 1,
      $asJSIndexable: Isolate.functionThatReturnsNull,
      $isEfficientLengthIterable: 1,
      $isIterable: 1,
      $isList: 1,
      static: {
        JSArray_JSArray$markFixed: function(allocation, $E) {
          return J.JSArray_markFixedList(H.setRuntimeTypeInfo(allocation, [$E]));
        },
        JSArray_markFixedList: function(list) {
          H.listTypeCheck(list);
          list.fixed$length = Array;
          return list;
        },
        JSArray__compareAny: [function(a, b) {
          return J.compareTo$1$ns(H.numberOrStringSuperNativeTypeCheck(a, "$isComparable"), H.numberOrStringSuperNativeTypeCheck(b, "$isComparable"));
        }, "call$2", "_interceptors_JSArray__compareAny$closure", 8, 0, 65]
      }
    },
    JSUnmodifiableArray: {
      "^": "JSArray;$ti"
    },
    ArrayIterator: {
      "^": "Object;_iterable,_length,_index,0_current,$ti",
      set$_current: function(_current) {
        this._current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
      },
      get$current: function(_) {
        return this._current;
      },
      moveNext$0: function() {
        var t1, $length, t2;
        t1 = this._iterable;
        $length = t1.length;
        if (this._length !== $length)
          throw H.wrapException(H.throwConcurrentModificationError(t1));
        t2 = this._index;
        if (t2 >= $length) {
          this.set$_current(null);
          return false;
        }
        this.set$_current(t1[t2]);
        ++this._index;
        return true;
      },
      $isIterator: 1
    },
    JSNumber: {
      "^": "Interceptor;",
      compareTo$1: function(receiver, b) {
        var bIsNegative;
        H.numTypeCheck(b);
        if (typeof b !== "number")
          throw H.wrapException(H.argumentErrorValue(b));
        if (receiver < b)
          return -1;
        else if (receiver > b)
          return 1;
        else if (receiver === b) {
          if (receiver === 0) {
            bIsNegative = this.get$isNegative(b);
            if (this.get$isNegative(receiver) === bIsNegative)
              return 0;
            if (this.get$isNegative(receiver))
              return -1;
            return 1;
          }
          return 0;
        } else if (isNaN(receiver)) {
          if (isNaN(b))
            return 0;
          return 1;
        } else
          return -1;
      },
      get$isNegative: function(receiver) {
        return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
      },
      round$0: function(receiver) {
        if (receiver > 0) {
          if (receiver !== 1 / 0)
            return Math.round(receiver);
        } else if (receiver > -1 / 0)
          return 0 - Math.round(0 - receiver);
        throw H.wrapException(P.UnsupportedError$("" + receiver + ".round()"));
      },
      toRadixString$1: function(receiver, radix) {
        var result, match, t1, exponent;
        if (radix < 2 || radix > 36)
          throw H.wrapException(P.RangeError$range(radix, 2, 36, "radix", null));
        result = receiver.toString(radix);
        if (C.JSString_methods.codeUnitAt$1(result, result.length - 1) !== 41)
          return result;
        match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
        if (match == null)
          H.throwExpression(P.UnsupportedError$("Unexpected toString result: " + result));
        t1 = match.length;
        if (1 >= t1)
          return H.ioore(match, 1);
        result = match[1];
        if (3 >= t1)
          return H.ioore(match, 3);
        exponent = +match[3];
        t1 = match[2];
        if (t1 != null) {
          result += t1;
          exponent -= t1.length;
        }
        return result + C.JSString_methods.$mul("0", exponent);
      },
      toString$0: function(receiver) {
        if (receiver === 0 && 1 / receiver < 0)
          return "-0.0";
        else
          return "" + receiver;
      },
      get$hashCode: function(receiver) {
        return receiver & 0x1FFFFFFF;
      },
      $add: function(receiver, other) {
        H.numTypeCheck(other);
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver + other;
      },
      $mul: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver * other;
      },
      $tdiv: function(receiver, other) {
        if ((receiver | 0) === receiver)
          if (other >= 1 || false)
            return receiver / other | 0;
        return this._tdivSlow$1(receiver, other);
      },
      _tdivFast$1: function(receiver, other) {
        return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
      },
      _tdivSlow$1: function(receiver, other) {
        var quotient = receiver / other;
        if (quotient >= -2147483648 && quotient <= 2147483647)
          return quotient | 0;
        if (quotient > 0) {
          if (quotient !== 1 / 0)
            return Math.floor(quotient);
        } else if (quotient > -1 / 0)
          return Math.ceil(quotient);
        throw H.wrapException(P.UnsupportedError$("Result of truncating division is " + H.S(quotient) + ": " + H.S(receiver) + " ~/ " + other));
      },
      $shl: function(receiver, other) {
        if (other < 0)
          throw H.wrapException(H.argumentErrorValue(other));
        return other > 31 ? 0 : receiver << other >>> 0;
      },
      _shlPositive$1: function(receiver, other) {
        return other > 31 ? 0 : receiver << other >>> 0;
      },
      $shr: function(receiver, other) {
        var t1;
        if (other < 0)
          throw H.wrapException(H.argumentErrorValue(other));
        if (receiver > 0)
          t1 = this._shrBothPositive$1(receiver, other);
        else {
          t1 = other > 31 ? 31 : other;
          t1 = receiver >> t1 >>> 0;
        }
        return t1;
      },
      _shrOtherPositive$1: function(receiver, other) {
        var t1;
        if (receiver > 0)
          t1 = this._shrBothPositive$1(receiver, other);
        else {
          t1 = other > 31 ? 31 : other;
          t1 = receiver >> t1 >>> 0;
        }
        return t1;
      },
      _shrReceiverPositive$1: function(receiver, other) {
        if (other < 0)
          throw H.wrapException(H.argumentErrorValue(other));
        return this._shrBothPositive$1(receiver, other);
      },
      _shrBothPositive$1: function(receiver, other) {
        return other > 31 ? 0 : receiver >>> other;
      },
      $and: function(receiver, other) {
        return (receiver & other) >>> 0;
      },
      $lt: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver < other;
      },
      $gt: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver > other;
      },
      $isComparable: 1,
      $asComparable: function() {
        return [P.num];
      },
      $isdouble: 1,
      $isnum: 1
    },
    JSInt: {
      "^": "JSNumber;",
      $isint: 1
    },
    JSDouble: {
      "^": "JSNumber;"
    },
    JSString: {
      "^": "Interceptor;",
      codeUnitAt$1: function(receiver, index) {
        if (index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver.charCodeAt(index);
      },
      _codeUnitAt$1: function(receiver, index) {
        if (index >= receiver.length)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        return receiver.charCodeAt(index);
      },
      $add: function(receiver, other) {
        H.stringTypeCheck(other);
        if (typeof other !== "string")
          throw H.wrapException(P.ArgumentError$value(other, null, null));
        return receiver + other;
      },
      startsWith$2: function(receiver, pattern, index) {
        var endIndex;
        if (index > receiver.length)
          throw H.wrapException(P.RangeError$range(index, 0, receiver.length, null, null));
        endIndex = index + pattern.length;
        if (endIndex > receiver.length)
          return false;
        return pattern === receiver.substring(index, endIndex);
      },
      startsWith$1: function($receiver, pattern) {
        return this.startsWith$2($receiver, pattern, 0);
      },
      substring$2: function(receiver, startIndex, endIndex) {
        if (endIndex == null)
          endIndex = receiver.length;
        if (startIndex < 0)
          throw H.wrapException(P.RangeError$value(startIndex, null, null));
        if (startIndex > endIndex)
          throw H.wrapException(P.RangeError$value(startIndex, null, null));
        if (endIndex > receiver.length)
          throw H.wrapException(P.RangeError$value(endIndex, null, null));
        return receiver.substring(startIndex, endIndex);
      },
      substring$1: function($receiver, startIndex) {
        return this.substring$2($receiver, startIndex, null);
      },
      trim$0: function(receiver) {
        var result, endIndex, startIndex, t1, endIndex0;
        result = receiver.trim();
        endIndex = result.length;
        if (endIndex === 0)
          return result;
        if (this._codeUnitAt$1(result, 0) === 133) {
          startIndex = J.JSString__skipLeadingWhitespace(result, 1);
          if (startIndex === endIndex)
            return "";
        } else
          startIndex = 0;
        t1 = endIndex - 1;
        endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
        if (startIndex === 0 && endIndex0 === endIndex)
          return result;
        return result.substring(startIndex, endIndex0);
      },
      $mul: function(receiver, times) {
        var s, result;
        if (0 >= times)
          return "";
        if (times === 1 || receiver.length === 0)
          return receiver;
        if (times !== times >>> 0)
          throw H.wrapException(C.C_OutOfMemoryError);
        for (s = receiver, result = ""; true;) {
          if ((times & 1) === 1)
            result = s + result;
          times = times >>> 1;
          if (times === 0)
            break;
          s += s;
        }
        return result;
      },
      indexOf$2: function(receiver, pattern, start) {
        var t1;
        if (start > receiver.length)
          throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
        t1 = receiver.indexOf(pattern, start);
        return t1;
      },
      indexOf$1: function($receiver, pattern) {
        return this.indexOf$2($receiver, pattern, 0);
      },
      contains$2: function(receiver, other, startIndex) {
        if (startIndex > receiver.length)
          throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length, null, null));
        return H.stringContainsUnchecked(receiver, other, startIndex);
      },
      get$isEmpty: function(receiver) {
        return receiver.length === 0;
      },
      compareTo$1: function(receiver, other) {
        var t1;
        H.stringTypeCheck(other);
        if (typeof other !== "string")
          throw H.wrapException(H.argumentErrorValue(other));
        if (receiver === other)
          t1 = 0;
        else
          t1 = receiver < other ? -1 : 1;
        return t1;
      },
      toString$0: function(receiver) {
        return receiver;
      },
      get$hashCode: function(receiver) {
        var t1, hash, i;
        for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
          hash = 536870911 & hash + receiver.charCodeAt(i);
          hash = 536870911 & hash + ((524287 & hash) << 10);
          hash ^= hash >> 6;
        }
        hash = 536870911 & hash + ((67108863 & hash) << 3);
        hash ^= hash >> 11;
        return 536870911 & hash + ((16383 & hash) << 15);
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >= receiver.length || false)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isJSIndexable: 1,
      $asJSIndexable: Isolate.functionThatReturnsNull,
      $isComparable: 1,
      $asComparable: function() {
        return [P.String];
      },
      $isPattern: 1,
      $isString: 1,
      static: {
        JSString__isWhitespace: function(codeUnit) {
          if (codeUnit < 256)
            switch (codeUnit) {
              case 9:
              case 10:
              case 11:
              case 12:
              case 13:
              case 32:
              case 133:
              case 160:
                return true;
              default:
                return false;
            }
          switch (codeUnit) {
            case 5760:
            case 8192:
            case 8193:
            case 8194:
            case 8195:
            case 8196:
            case 8197:
            case 8198:
            case 8199:
            case 8200:
            case 8201:
            case 8202:
            case 8232:
            case 8233:
            case 8239:
            case 8287:
            case 12288:
            case 65279:
              return true;
            default:
              return false;
          }
        },
        JSString__skipLeadingWhitespace: function(string, index) {
          var t1, codeUnit;
          for (t1 = string.length; index < t1;) {
            codeUnit = C.JSString_methods._codeUnitAt$1(string, index);
            if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
              break;
            ++index;
          }
          return index;
        },
        JSString__skipTrailingWhitespace: function(string, index) {
          var index0, codeUnit;
          for (; index > 0; index = index0) {
            index0 = index - 1;
            codeUnit = C.JSString_methods.codeUnitAt$1(string, index0);
            if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
              break;
          }
          return index;
        }
      }
    }
  }], ["dart._internal", "dart:_internal",, H, {
    "^": "",
    IterableElementError_tooFew: function() {
      return new P.StateError("Too few elements");
    },
    Sort_sort: function(a, compare, $E) {
      H.assertSubtype(a, "$isList", [$E], "$asList");
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
      H.Sort__doSort(a, 0, J.get$length$asx(a) - 1, compare, $E);
    },
    Sort__doSort: function(a, left, right, compare, $E) {
      H.assertSubtype(a, "$isList", [$E], "$asList");
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
      if (right - left <= 32)
        H.Sort__insertionSort(a, left, right, compare, $E);
      else
        H.Sort__dualPivotQuicksort(a, left, right, compare, $E);
    },
    Sort__insertionSort: function(a, left, right, compare, $E) {
      var i, t1, el, j, j0;
      H.assertSubtype(a, "$isList", [$E], "$asList");
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
      for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
        el = t1.$index(a, i);
        j = i;
        while (true) {
          if (!(j > left && J.$gt$n(compare.call$2(t1.$index(a, j - 1), el), 0)))
            break;
          j0 = j - 1;
          t1.$indexSet(a, j, t1.$index(a, j0));
          j = j0;
        }
        t1.$indexSet(a, j, el);
      }
    },
    Sort__dualPivotQuicksort: function(a, left, right, compare, $E) {
      var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, great0, less0, pivots_are_equal, comp_pivot1, comp_pivot2, t2;
      H.assertSubtype(a, "$isList", [$E], "$asList");
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
      sixth = C.JSInt_methods._tdivFast$1(right - left + 1, 6);
      index1 = left + sixth;
      index5 = right - sixth;
      index3 = C.JSInt_methods._tdivFast$1(left + right, 2);
      index2 = index3 - sixth;
      index4 = index3 + sixth;
      t1 = J.getInterceptor$asx(a);
      el1 = t1.$index(a, index1);
      el2 = t1.$index(a, index2);
      el3 = t1.$index(a, index3);
      el4 = t1.$index(a, index4);
      el5 = t1.$index(a, index5);
      if (J.$gt$n(compare.call$2(el1, el2), 0)) {
        t0 = el2;
        el2 = el1;
        el1 = t0;
      }
      if (J.$gt$n(compare.call$2(el4, el5), 0)) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      if (J.$gt$n(compare.call$2(el1, el3), 0)) {
        t0 = el3;
        el3 = el1;
        el1 = t0;
      }
      if (J.$gt$n(compare.call$2(el2, el3), 0)) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if (J.$gt$n(compare.call$2(el1, el4), 0)) {
        t0 = el4;
        el4 = el1;
        el1 = t0;
      }
      if (J.$gt$n(compare.call$2(el3, el4), 0)) {
        t0 = el4;
        el4 = el3;
        el3 = t0;
      }
      if (J.$gt$n(compare.call$2(el2, el5), 0)) {
        t0 = el5;
        el5 = el2;
        el2 = t0;
      }
      if (J.$gt$n(compare.call$2(el2, el3), 0)) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if (J.$gt$n(compare.call$2(el4, el5), 0)) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t1.$indexSet(a, index1, el1);
      t1.$indexSet(a, index3, el3);
      t1.$indexSet(a, index5, el5);
      t1.$indexSet(a, index2, t1.$index(a, left));
      t1.$indexSet(a, index4, t1.$index(a, right));
      less = left + 1;
      great = right - 1;
      if (J.$eq$(compare.call$2(el2, el4), 0)) {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp = compare.call$2(ak, el2);
          if (comp === 0)
            continue;
          if (typeof comp !== "number")
            return comp.$lt();
          if (comp < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else
            for (; true;) {
              comp = compare.call$2(t1.$index(a, great), el2);
              if (typeof comp !== "number")
                return comp.$gt();
              if (comp > 0) {
                --great;
                continue;
              } else {
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                  break;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  break;
                }
              }
            }
        }
        pivots_are_equal = true;
      } else {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp_pivot1 = compare.call$2(ak, el2);
          if (typeof comp_pivot1 !== "number")
            return comp_pivot1.$lt();
          if (comp_pivot1 < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else {
            comp_pivot2 = compare.call$2(ak, el4);
            if (typeof comp_pivot2 !== "number")
              return comp_pivot2.$gt();
            if (comp_pivot2 > 0)
              for (; true;) {
                comp = compare.call$2(t1.$index(a, great), el4);
                if (typeof comp !== "number")
                  return comp.$gt();
                if (comp > 0) {
                  --great;
                  if (great < k)
                    break;
                  continue;
                } else {
                  comp = compare.call$2(t1.$index(a, great), el2);
                  if (typeof comp !== "number")
                    return comp.$lt();
                  great0 = great - 1;
                  if (comp < 0) {
                    t1.$indexSet(a, k, t1.$index(a, less));
                    less0 = less + 1;
                    t1.$indexSet(a, less, t1.$index(a, great));
                    t1.$indexSet(a, great, ak);
                    less = less0;
                  } else {
                    t1.$indexSet(a, k, t1.$index(a, great));
                    t1.$indexSet(a, great, ak);
                  }
                  great = great0;
                  break;
                }
              }
          }
        }
        pivots_are_equal = false;
      }
      t2 = less - 1;
      t1.$indexSet(a, left, t1.$index(a, t2));
      t1.$indexSet(a, t2, el2);
      t2 = great + 1;
      t1.$indexSet(a, right, t1.$index(a, t2));
      t1.$indexSet(a, t2, el4);
      H.Sort__doSort(a, left, less - 2, compare, $E);
      H.Sort__doSort(a, great + 2, right, compare, $E);
      if (pivots_are_equal)
        return;
      if (less < index1 && great > index5) {
        for (; J.$eq$(compare.call$2(t1.$index(a, less), el2), 0);)
          ++less;
        for (; J.$eq$(compare.call$2(t1.$index(a, great), el4), 0);)
          --great;
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) === 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) === 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) === 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                comp = compare.call$2(t1.$index(a, great), el2);
                if (typeof comp !== "number")
                  return comp.$lt();
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
        H.Sort__doSort(a, less, great, compare, $E);
      } else
        H.Sort__doSort(a, less, great, compare, $E);
    },
    CodeUnits: {
      "^": "UnmodifiableListBase;_string",
      get$length: function(_) {
        return this._string.length;
      },
      $index: function(_, i) {
        return C.JSString_methods.codeUnitAt$1(this._string, i);
      },
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $asUnmodifiableListMixin: function() {
        return [P.int];
      },
      $asListMixin: function() {
        return [P.int];
      },
      $asIterable: function() {
        return [P.int];
      },
      $asList: function() {
        return [P.int];
      }
    },
    EfficientLengthIterable: {
      "^": "Iterable;"
    },
    ListIterable: {
      "^": "EfficientLengthIterable;$ti",
      get$iterator: function(_) {
        return new H.ListIterator(this, this.get$length(this), 0, [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
      },
      get$isEmpty: function(_) {
        return this.get$length(this) === 0;
      }
    },
    SubListIterable: {
      "^": "ListIterable;__internal$_iterable,_start,_endOrLength,$ti",
      get$_endIndex: function() {
        var $length, t1;
        $length = J.get$length$asx(this.__internal$_iterable);
        t1 = this._endOrLength;
        if (t1 == null || t1 > $length)
          return $length;
        return t1;
      },
      get$_startIndex: function() {
        var $length, t1;
        $length = J.get$length$asx(this.__internal$_iterable);
        t1 = this._start;
        if (typeof t1 !== "number")
          return t1.$gt();
        if (t1 > $length)
          return $length;
        return t1;
      },
      get$length: function(_) {
        var $length, t1, t2;
        $length = J.get$length$asx(this.__internal$_iterable);
        t1 = this._start;
        if (typeof t1 !== "number")
          return t1.$ge();
        if (t1 >= $length)
          return 0;
        t2 = this._endOrLength;
        if (t2 == null || t2 >= $length)
          return $length - t1;
        if (typeof t2 !== "number")
          return t2.$sub();
        return t2 - t1;
      },
      elementAt$1: function(_, index) {
        var t1, realIndex;
        t1 = this.get$_startIndex();
        if (typeof t1 !== "number")
          return t1.$add();
        realIndex = t1 + index;
        if (index >= 0) {
          t1 = this.get$_endIndex();
          if (typeof t1 !== "number")
            return H.iae(t1);
          t1 = realIndex >= t1;
        } else
          t1 = true;
        if (t1)
          throw H.wrapException(P.IndexError$(index, this, "index", null, null));
        return J.elementAt$1$ax(this.__internal$_iterable, realIndex);
      },
      toList$1$growable: function(_, growable) {
        var start, t1, t2, end, end0, $length, t3, result, i;
        start = this._start;
        t1 = this.__internal$_iterable;
        t2 = J.getInterceptor$asx(t1);
        end = t2.get$length(t1);
        end0 = this._endOrLength;
        if (end0 != null && end0 < end)
          end = end0;
        if (typeof end !== "number")
          return end.$sub();
        if (typeof start !== "number")
          return H.iae(start);
        $length = end - start;
        if ($length < 0)
          $length = 0;
        t3 = new Array($length);
        t3.fixed$length = Array;
        result = H.setRuntimeTypeInfo(t3, this.$ti);
        for (i = 0; i < $length; ++i) {
          C.JSArray_methods.$indexSet(result, i, t2.elementAt$1(t1, start + i));
          if (t2.get$length(t1) < end)
            throw H.wrapException(P.ConcurrentModificationError$(this));
        }
        return result;
      },
      static: {
        SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
          if (typeof _start !== "number")
            return _start.$lt();
          if (_start < 0)
            H.throwExpression(P.RangeError$range(_start, 0, null, "start", null));
          if (_endOrLength != null) {
            if (_endOrLength < 0)
              H.throwExpression(P.RangeError$range(_endOrLength, 0, null, "end", null));
            if (_start > _endOrLength)
              H.throwExpression(P.RangeError$range(_start, 0, _endOrLength, "start", null));
          }
          return new H.SubListIterable(_iterable, _start, _endOrLength, [$E]);
        }
      }
    },
    ListIterator: {
      "^": "Object;__internal$_iterable,__internal$_length,__internal$_index,0__internal$_current,$ti",
      set$__internal$_current: function(_current) {
        this.__internal$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
      },
      get$current: function(_) {
        return this.__internal$_current;
      },
      moveNext$0: function() {
        var t1, t2, $length, t3;
        t1 = this.__internal$_iterable;
        t2 = J.getInterceptor$asx(t1);
        $length = t2.get$length(t1);
        if (this.__internal$_length !== $length)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        t3 = this.__internal$_index;
        if (t3 >= $length) {
          this.set$__internal$_current(null);
          return false;
        }
        this.set$__internal$_current(t2.elementAt$1(t1, t3));
        ++this.__internal$_index;
        return true;
      },
      $isIterator: 1
    },
    MappedIterable: {
      "^": "Iterable;__internal$_iterable,_f,$ti",
      get$iterator: function(_) {
        return new H.MappedIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti);
      },
      get$length: function(_) {
        return J.get$length$asx(this.__internal$_iterable);
      },
      get$isEmpty: function(_) {
        return J.get$isEmpty$asx(this.__internal$_iterable);
      },
      $asIterable: function($S, $T) {
        return [$T];
      },
      static: {
        MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
          H.assertSubtype(iterable, "$isIterable", [$S], "$asIterable");
          H.functionTypeCheck($function, {func: 1, ret: $T, args: [$S]});
          if (!!J.getInterceptor$(iterable).$isEfficientLengthIterable)
            return new H.EfficientLengthMappedIterable(iterable, $function, [$S, $T]);
          return new H.MappedIterable(iterable, $function, [$S, $T]);
        }
      }
    },
    EfficientLengthMappedIterable: {
      "^": "MappedIterable;__internal$_iterable,_f,$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function($S, $T) {
        return [$T];
      }
    },
    MappedIterator: {
      "^": "Iterator;0__internal$_current,_iterator,_f,$ti",
      set$__internal$_current: function(_current) {
        this.__internal$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 1));
      },
      moveNext$0: function() {
        var t1 = this._iterator;
        if (t1.moveNext$0()) {
          this.set$__internal$_current(this._f.call$1(t1.get$current(t1)));
          return true;
        }
        this.set$__internal$_current(null);
        return false;
      },
      get$current: function(_) {
        return this.__internal$_current;
      },
      $asIterator: function($S, $T) {
        return [$T];
      }
    },
    MappedListIterable: {
      "^": "ListIterable;_source,_f,$ti",
      get$length: function(_) {
        return J.get$length$asx(this._source);
      },
      elementAt$1: function(_, index) {
        return this._f.call$1(J.elementAt$1$ax(this._source, index));
      },
      $asEfficientLengthIterable: function($S, $T) {
        return [$T];
      },
      $asListIterable: function($S, $T) {
        return [$T];
      },
      $asIterable: function($S, $T) {
        return [$T];
      }
    },
    EmptyIterator: {
      "^": "Object;$ti",
      moveNext$0: function() {
        return false;
      },
      get$current: function(_) {
        return;
      },
      $isIterator: 1
    },
    FixedLengthListMixin: {
      "^": "Object;$ti",
      set$length: function(receiver, newLength) {
        throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
      },
      add$1: function(receiver, value) {
        H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgumentIntercepted(this, receiver, "FixedLengthListMixin", 0));
        throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
      },
      addAll$1: function(receiver, iterable) {
        H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgumentIntercepted(this, receiver, "FixedLengthListMixin", 0)], "$asIterable");
        throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
      }
    },
    UnmodifiableListMixin: {
      "^": "Object;$ti",
      $indexSet: function(_, index, value) {
        H.intTypeCheck(index);
        H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0));
        throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
      },
      set$length: function(_, newLength) {
        throw H.wrapException(P.UnsupportedError$("Cannot change the length of an unmodifiable list"));
      },
      add$1: function(_, value) {
        H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0));
        throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
      },
      addAll$1: function(_, iterable) {
        H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0)], "$asIterable");
        throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
      }
    },
    UnmodifiableListBase: {
      "^": "ListBase+UnmodifiableListMixin;"
    }
  }], ["_js_helper", "dart:_js_helper",, H, {
    "^": "",
    ConstantMap_ConstantMap$from: function(other, $K, $V) {
      var keys, allStrings, t1, _i, k, object, containsProto, protoValue, $length, v;
      keys = P.List_List$from(other.get$keys(other), true, $K);
      t1 = keys.length;
      _i = 0;
      while (true) {
        if (!(_i < t1)) {
          allStrings = true;
          break;
        }
        k = keys[_i];
        if (typeof k !== "string") {
          allStrings = false;
          break;
        }
        ++_i;
      }
      if (allStrings) {
        object = {};
        for (containsProto = false, protoValue = null, $length = 0, _i = 0; _i < keys.length; keys.length === t1 || (0, H.throwConcurrentModificationError)(keys), ++_i) {
          k = keys[_i];
          v = H.assertSubtypeOfRuntimeType(other.$index(0, k), $V);
          if (!J.$eq$(k, "__proto__")) {
            H.stringTypeCheck(k);
            if (!object.hasOwnProperty(k))
              ++$length;
            object[k] = v;
          } else {
            protoValue = v;
            containsProto = true;
          }
        }
        if (containsProto)
          return new H.ConstantProtoMap(H.assertSubtypeOfRuntimeType(protoValue, $V), $length + 1, object, H.assertSubtype(keys, "$isList", [$K], "$asList"), [$K, $V]);
        return new H.ConstantStringMap($length, object, H.assertSubtype(keys, "$isList", [$K], "$asList"), [$K, $V]);
      }
      return new H.ConstantMapView(P.LinkedHashMap_LinkedHashMap$from(other, $K, $V), [$K, $V]);
    },
    unminifyOrTag: function(rawClassName) {
      var preserved = H.stringTypeCheck(init.mangledGlobalNames[rawClassName]);
      if (typeof preserved === "string")
        return preserved;
      return rawClassName;
    },
    getType: function(index) {
      return init.types[H.intTypeCheck(index)];
    },
    isJsIndexable: function(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return !!J.getInterceptor$(object).$isJavaScriptIndexingBehavior;
    },
    S: function(value) {
      var res;
      if (typeof value === "string")
        return value;
      if (typeof value === "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      res = J.toString$0$(value);
      if (typeof res !== "string")
        throw H.wrapException(H.argumentErrorValue(value));
      return res;
    },
    Primitives_objectHashCode: function(object) {
      var hash = object.$identityHash;
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object.$identityHash = hash;
      }
      return hash;
    },
    Primitives_parseInt: function(source, radix) {
      var match, decimalMatch;
      if (typeof source !== "string")
        H.throwExpression(H.argumentErrorValue(source));
      match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return;
      if (3 >= match.length)
        return H.ioore(match, 3);
      decimalMatch = H.stringTypeCheck(match[3]);
      if (decimalMatch != null)
        return parseInt(source, 10);
      if (match[2] != null)
        return parseInt(source, 16);
      return;
    },
    Primitives_objectTypeName: function(object) {
      return H.Primitives__objectClassName(object) + H._joinArguments(H.getRuntimeTypeInfo(object), 0, null);
    },
    Primitives__objectClassName: function(object) {
      var interceptor, interceptorConstructor, interceptorConstructorName, $name, t1, dispatchName, objectConstructor, match, decompiledName;
      interceptor = J.getInterceptor$(object);
      interceptorConstructor = interceptor.constructor;
      if (typeof interceptorConstructor == "function") {
        interceptorConstructorName = interceptorConstructor.name;
        $name = typeof interceptorConstructorName === "string" ? interceptorConstructorName : null;
      } else
        $name = null;
      t1 = $name == null;
      if (t1 || interceptor === C.Interceptor_methods || !!interceptor.$isUnknownJavaScriptObject) {
        dispatchName = C.JS_CONST_u2C(object);
        if (t1)
          $name = dispatchName;
        if (dispatchName === "Object") {
          objectConstructor = object.constructor;
          if (typeof objectConstructor == "function") {
            match = String(objectConstructor).match(/^\s*function\s*([\w$]*)\s*\(/);
            decompiledName = match == null ? null : match[1];
            if (typeof decompiledName === "string" && /^\w+$/.test(decompiledName))
              $name = decompiledName;
          }
        }
        return $name;
      }
      $name = $name;
      return H.unminifyOrTag($name.length > 1 && C.JSString_methods._codeUnitAt$1($name, 0) === 36 ? C.JSString_methods.substring$1($name, 1) : $name);
    },
    Primitives__fromCharCodeApply: function(array) {
      var end, result, i, i0, chunkEnd;
      end = array.length;
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints: function(codePoints) {
      var a, t1, _i, i;
      a = H.setRuntimeTypeInfo([], [P.int]);
      for (t1 = codePoints.length, _i = 0; _i < codePoints.length; codePoints.length === t1 || (0, H.throwConcurrentModificationError)(codePoints), ++_i) {
        i = codePoints[_i];
        if (typeof i !== "number" || Math.floor(i) !== i)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i <= 65535)
          C.JSArray_methods.add$1(a, i);
        else if (i <= 1114111) {
          C.JSArray_methods.add$1(a, 55296 + (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          C.JSArray_methods.add$1(a, 56320 + (i & 1023));
        } else
          throw H.wrapException(H.argumentErrorValue(i));
      }
      return H.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes: function(charCodes) {
      var t1, _i, i;
      for (t1 = charCodes.length, _i = 0; _i < t1; ++_i) {
        i = charCodes[_i];
        if (typeof i !== "number" || Math.floor(i) !== i)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i < 0)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i > 65535)
          return H.Primitives_stringFromCodePoints(charCodes);
      }
      return H.Primitives__fromCharCodeApply(charCodes);
    },
    Primitives_stringFromNativeUint8List: function(charCodes, start, end) {
      var i, result, i0, chunkEnd;
      if (end <= 500 && start === 0 && end === charCodes.length)
        return String.fromCharCode.apply(null, charCodes);
      for (i = start, result = ""; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCharCode: function(charCode) {
      var bits;
      if (charCode <= 65535)
        return String.fromCharCode(charCode);
      if (charCode <= 1114111) {
        bits = charCode - 65536;
        return String.fromCharCode((55296 | C.JSInt_methods._shrOtherPositive$1(bits, 10)) >>> 0, 56320 | bits & 1023);
      }
      throw H.wrapException(P.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_lazyAsJsDate: function(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver._value);
      return receiver.date;
    },
    Primitives_getYear: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0;
      return t1;
    },
    Primitives_getMonth: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1;
      return t1;
    },
    Primitives_getDay: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0;
      return t1;
    },
    Primitives_getHours: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0;
      return t1;
    },
    Primitives_getMinutes: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0;
      return t1;
    },
    Primitives_getSeconds: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0;
      return t1;
    },
    Primitives_getMilliseconds: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0;
      return t1;
    },
    iae: function(argument) {
      throw H.wrapException(H.argumentErrorValue(argument));
    },
    ioore: function(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw H.wrapException(H.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError: function(indexable, index) {
      var $length, t1;
      if (typeof index !== "number" || Math.floor(index) !== index)
        return new P.ArgumentError(true, index, "index", null);
      $length = H.intTypeCheck(J.get$length$asx(indexable));
      if (!(index < 0)) {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = index >= $length;
      } else
        t1 = true;
      if (t1)
        return P.IndexError$(index, indexable, "index", null, $length);
      return P.RangeError$value(index, "index", null);
    },
    diagnoseRangeError: function(start, end, $length) {
      if (start > $length)
        return new P.RangeError(0, $length, true, start, "start", "Invalid value");
      if (end != null)
        if (end < start || end > $length)
          return new P.RangeError(start, $length, true, end, "end", "Invalid value");
      return new P.ArgumentError(true, end, "end", null);
    },
    argumentErrorValue: function(object) {
      return new P.ArgumentError(true, object, null, null);
    },
    checkBool: function(value) {
      return value;
    },
    wrapException: function(ex) {
      var wrapper;
      if (ex == null)
        ex = new P.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
        wrapper.name = "";
      } else
        wrapper.toString = H.toStringWrapper;
      return wrapper;
    },
    toStringWrapper: function() {
      return J.toString$0$(this.dartException);
    },
    throwExpression: function(ex) {
      throw H.wrapException(ex);
    },
    throwConcurrentModificationError: function(collection) {
      throw H.wrapException(P.ConcurrentModificationError$(collection));
    },
    unwrapException: function(ex) {
      var t1, message, number, ieErrorCode, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match, t2;
      t1 = new H.unwrapException_saveStackTrace(ex);
      if (ex == null)
        return;
      if (ex instanceof H.ExceptionAndStackTrace)
        return t1.call$1(ex.dartException);
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return t1.call$1(ex.dartException);
      else if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
            case 445:
            case 5007:
              return t1.call$1(H.NullError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return t1.call$1(H.JsNoSuchMethodError$(H.stringTypeCheck(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return t1.call$1(H.JsNoSuchMethodError$(H.stringTypeCheck(message), match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t2 = match != null;
                        } else
                          t2 = true;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
            if (t2)
              return t1.call$1(H.NullError$(H.stringTypeCheck(message), match));
          }
        }
        return t1.call$1(new H.UnknownJsTypeError(typeof message === "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message === "string" && message.indexOf("call stack") !== -1)
          return new P.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return t1.call$1(new P.ArgumentError(false, null, null, typeof message === "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message === "string" && message === "too much recursion")
          return new P.StackOverflowError();
      return ex;
    },
    getTraceFromException: function(exception) {
      var trace;
      if (exception instanceof H.ExceptionAndStackTrace)
        return exception.stackTrace;
      if (exception == null)
        return new H._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = new H._StackTrace(exception);
    },
    invokeClosure: function(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      H.interceptedTypeCheck(closure, "$isFunction");
      switch (H.intTypeCheck(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw H.wrapException(new P._Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS: function(closure, arity) {
      var $function;
      H.intTypeCheck(arity);
      if (closure == null)
        return;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, H.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, propertyName) {
      var $function, callName, functionType, $prototype, $constructor, t1, trampoline, signatureFunction, getReceiver, applyTrampoline, i, stub, stubCallName;
      $function = functions[0];
      callName = $function.$callName;
      if (!!J.getInterceptor$(reflectionInfo).$isList) {
        $function.$reflectionInfo = reflectionInfo;
        functionType = H.ReflectionInfo_ReflectionInfo($function).functionType;
      } else
        functionType = reflectionInfo;
      $prototype = isStatic ? Object.create(new H.StaticClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function static_tear_off() {
          this.$initialize();
        };
      else {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        t1 = new Function("a,b,c,d" + t1, "this.$initialize(a,b,c,d" + t1 + ")");
        $constructor = t1;
      }
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      if (!isStatic) {
        trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
        trampoline.$reflectionInfo = reflectionInfo;
      } else {
        $prototype.$static_name = propertyName;
        trampoline = $function;
      }
      if (typeof functionType == "number")
        signatureFunction = function(getType, t) {
          return function() {
            return getType(t);
          };
        }(H.getType, functionType);
      else if (typeof functionType == "function")
        if (isStatic)
          signatureFunction = functionType;
        else {
          getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
          signatureFunction = function(f, r) {
            return function() {
              return f.apply({$receiver: r(this)}, arguments);
            };
          }(functionType, getReceiver);
        }
      else
        throw H.wrapException("Error in reflectionInfo.");
      $prototype.$signature = signatureFunction;
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < functions.length; ++i) {
        stub = functions[i];
        stubCallName = stub.$callName;
        if (stubCallName != null) {
          stub = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex) {
          stub.$reflectionInfo = reflectionInfo;
          applyTrampoline = stub;
        }
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = $function.$requiredArgCount;
      $prototype.$defaultValues = $function.$defaultValues;
      return $constructor;
    },
    Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
      var getSelf = H.BoundClosure_selfOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          return function(n, S) {
            return function() {
              return S(this)[n]();
            };
          }(stubName, getSelf);
        case 1:
          return function(n, S) {
            return function(a) {
              return S(this)[n](a);
            };
          }(stubName, getSelf);
        case 2:
          return function(n, S) {
            return function(a, b) {
              return S(this)[n](a, b);
            };
          }(stubName, getSelf);
        case 3:
          return function(n, S) {
            return function(a, b, c) {
              return S(this)[n](a, b, c);
            };
          }(stubName, getSelf);
        case 4:
          return function(n, S) {
            return function(a, b, c, d) {
              return S(this)[n](a, b, c, d);
            };
          }(stubName, getSelf);
        case 5:
          return function(n, S) {
            return function(a, b, c, d, e) {
              return S(this)[n](a, b, c, d, e);
            };
          }(stubName, getSelf);
        default:
          return function(f, s) {
            return function() {
              return f.apply(s(this), arguments);
            };
          }($function, getSelf);
      }
    },
    Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
      var stubName, arity, lookedUpFunction, t1, t2, selfName, $arguments;
      if (isIntercepted)
        return H.Closure_forwardInterceptedCallTo(receiver, $function);
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t2 = !t1 || arity >= 27;
      if (t2)
        return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
      if (arity === 0) {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        selfName = "self" + t1;
        t1 = "return function(){var " + selfName + " = this.";
        t2 = $.BoundClosure_selfFieldNameCache;
        if (t2 == null) {
          t2 = H.BoundClosure_computeFieldNamed("self");
          $.BoundClosure_selfFieldNameCache = t2;
        }
        return new Function(t1 + H.S(t2) + ";return " + selfName + "." + H.S(stubName) + "();}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = $.Closure_functionCounter;
      if (typeof t1 !== "number")
        return t1.$add();
      $.Closure_functionCounter = t1 + 1;
      $arguments += t1;
      t1 = "return function(" + $arguments + "){return this.";
      t2 = $.BoundClosure_selfFieldNameCache;
      if (t2 == null) {
        t2 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t2;
      }
      return new Function(t1 + H.S(t2) + "." + H.S(stubName) + "(" + $arguments + ");}")();
    },
    Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
      var getSelf, getReceiver;
      getSelf = H.BoundClosure_selfOf;
      getReceiver = H.BoundClosure_receiverOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
        case 1:
          return function(n, s, r) {
            return function() {
              return s(this)[n](r(this));
            };
          }($name, getSelf, getReceiver);
        case 2:
          return function(n, s, r) {
            return function(a) {
              return s(this)[n](r(this), a);
            };
          }($name, getSelf, getReceiver);
        case 3:
          return function(n, s, r) {
            return function(a, b) {
              return s(this)[n](r(this), a, b);
            };
          }($name, getSelf, getReceiver);
        case 4:
          return function(n, s, r) {
            return function(a, b, c) {
              return s(this)[n](r(this), a, b, c);
            };
          }($name, getSelf, getReceiver);
        case 5:
          return function(n, s, r) {
            return function(a, b, c, d) {
              return s(this)[n](r(this), a, b, c, d);
            };
          }($name, getSelf, getReceiver);
        case 6:
          return function(n, s, r) {
            return function(a, b, c, d, e) {
              return s(this)[n](r(this), a, b, c, d, e);
            };
          }($name, getSelf, getReceiver);
        default:
          return function(f, s, r, a) {
            return function() {
              a = [r(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(s(this), a);
            };
          }($function, getSelf, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo: function(receiver, $function) {
      var t1, t2, stubName, arity, lookedUpFunction, t3, t4, $arguments;
      t1 = $.BoundClosure_selfFieldNameCache;
      if (t1 == null) {
        t1 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t1;
      }
      t2 = $.BoundClosure_receiverFieldNameCache;
      if (t2 == null) {
        t2 = H.BoundClosure_computeFieldNamed("receiver");
        $.BoundClosure_receiverFieldNameCache = t2;
      }
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t3 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t4 = !t3 || arity >= 28;
      if (t4)
        return H.Closure_cspForwardInterceptedCall(arity, !t3, stubName, $function);
      if (arity === 1) {
        t1 = "return function(){return this." + H.S(t1) + "." + H.S(stubName) + "(this." + H.S(t2) + ");";
        t2 = $.Closure_functionCounter;
        if (typeof t2 !== "number")
          return t2.$add();
        $.Closure_functionCounter = t2 + 1;
        return new Function(t1 + t2 + "}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + H.S(t1) + "." + H.S(stubName) + "(this." + H.S(t2) + ", " + $arguments + ");";
      t2 = $.Closure_functionCounter;
      if (typeof t2 !== "number")
        return t2.$add();
      $.Closure_functionCounter = t2 + 1;
      return new Function(t1 + t2 + "}")();
    },
    closureFromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, $name) {
      return H.Closure_fromTearOff(receiver, functions, H.intTypeCheck(applyTrampolineIndex), reflectionInfo, !!isStatic, !!isIntercepted, $name);
    },
    instantiate1: function(f, T1) {
      var t1;
      H.interceptedTypeCheck(f, "$isClosure");
      t1 = new H.Instantiation1(f, [T1]);
      t1.Instantiation$1(f);
      return t1;
    },
    stringTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "String"));
    },
    stringTypeCast: function(value) {
      if (typeof value === "string" || value == null)
        return value;
      throw H.wrapException(H.CastErrorImplementation$(value, "String"));
    },
    doubleTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "double"));
    },
    numTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "num"));
    },
    boolTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "boolean")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "bool"));
    },
    intTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number" && Math.floor(value) === value)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "int"));
    },
    propertyTypeError: function(value, property) {
      throw H.wrapException(H.TypeErrorImplementation$(value, H.unminifyOrTag(H.stringTypeCheck(property).substring(3))));
    },
    propertyTypeCastError: function(value, property) {
      throw H.wrapException(H.CastErrorImplementation$(value, H.unminifyOrTag(H.stringTypeCheck(property).substring(3))));
    },
    interceptedTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if ((typeof value === "object" || typeof value === "function") && J.getInterceptor$(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    interceptedTypeCast: function(value, property) {
      var t1;
      if (value != null)
        t1 = (typeof value === "object" || typeof value === "function") && J.getInterceptor$(value)[property];
      else
        t1 = true;
      if (t1)
        return value;
      H.propertyTypeCastError(value, property);
    },
    numberOrStringSuperNativeTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      if (typeof value === "number")
        return value;
      if (J.getInterceptor$(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    listTypeCheck: function(value) {
      if (value == null)
        return value;
      if (!!J.getInterceptor$(value).$isList)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "List<dynamic>"));
    },
    listSuperNativeTypeCheck: function(value, property) {
      var t1;
      if (value == null)
        return value;
      t1 = J.getInterceptor$(value);
      if (!!t1.$isList)
        return value;
      if (t1[property])
        return value;
      H.propertyTypeError(value, property);
    },
    extractFunctionTypeObjectFromInternal: function(o) {
      var signature;
      if ("$signature" in o) {
        signature = o.$signature;
        if (typeof signature == "number")
          return init.types[H.intTypeCheck(signature)];
        else
          return o.$signature();
      }
      return;
    },
    functionTypeTest: function(value, functionTypeRti) {
      var functionTypeObject;
      if (value == null)
        return false;
      if (typeof value == "function")
        return true;
      functionTypeObject = H.extractFunctionTypeObjectFromInternal(J.getInterceptor$(value));
      if (functionTypeObject == null)
        return false;
      return H._isFunctionSubtype(functionTypeObject, null, functionTypeRti, null);
    },
    functionTypeCheck: function(value, functionTypeRti) {
      var $self, t1;
      if (value == null)
        return value;
      if ($._inTypeAssertion)
        return value;
      $._inTypeAssertion = true;
      try {
        if (H.functionTypeTest(value, functionTypeRti))
          return value;
        $self = H.runtimeTypeToString(functionTypeRti);
        t1 = H.TypeErrorImplementation$(value, $self);
        throw H.wrapException(t1);
      } finally {
        $._inTypeAssertion = false;
      }
    },
    futureOrCheck: function(o, futureOrRti) {
      if (o != null && !H.checkSubtypeOfRuntimeType(o, futureOrRti))
        H.throwExpression(H.TypeErrorImplementation$(o, H.runtimeTypeToString(futureOrRti)));
      return o;
    },
    _typeDescription: function(value) {
      var t1, functionTypeObject;
      t1 = J.getInterceptor$(value);
      if (!!t1.$isClosure) {
        functionTypeObject = H.extractFunctionTypeObjectFromInternal(t1);
        if (functionTypeObject != null)
          return H.runtimeTypeToString(functionTypeObject);
        return "Closure";
      }
      return H.Primitives_objectTypeName(value);
    },
    throwCyclicInit: function(staticName) {
      throw H.wrapException(new P.CyclicInitializationError(H.stringTypeCheck(staticName)));
    },
    getIsolateAffinityTag: function($name) {
      return init.getIsolateTag($name);
    },
    setRuntimeTypeInfo: function(target, rti) {
      target.$ti = rti;
      return target;
    },
    getRuntimeTypeInfo: function(target) {
      if (target == null)
        return;
      return target.$ti;
    },
    getRuntimeTypeArguments: function(interceptor, object, substitutionName) {
      return H.substitute(interceptor["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(object));
    },
    getRuntimeTypeArgumentIntercepted: function(interceptor, target, substitutionName, index) {
      var $arguments;
      H.stringTypeCheck(substitutionName);
      H.intTypeCheck(index);
      $arguments = H.substitute(interceptor["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
      return $arguments == null ? null : $arguments[index];
    },
    getRuntimeTypeArgument: function(target, substitutionName, index) {
      var $arguments;
      H.stringTypeCheck(substitutionName);
      H.intTypeCheck(index);
      $arguments = H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
      return $arguments == null ? null : $arguments[index];
    },
    getTypeArgumentByIndex: function(target, index) {
      var rti;
      H.intTypeCheck(index);
      rti = H.getRuntimeTypeInfo(target);
      return rti == null ? null : rti[index];
    },
    runtimeTypeToString: function(rti) {
      return H._runtimeTypeToString(rti, null);
    },
    _runtimeTypeToString: function(rti, genericContext) {
      var t1, t2;
      H.assertSubtype(genericContext, "$isList", [P.String], "$asList");
      if (rti == null)
        return "dynamic";
      if (rti === -1)
        return "void";
      if (typeof rti === "object" && rti !== null && rti.constructor === Array)
        return H.unminifyOrTag(rti[0].builtin$cls) + H._joinArguments(rti, 1, genericContext);
      if (typeof rti == "function")
        return H.unminifyOrTag(rti.builtin$cls);
      if (rti === -2)
        return "dynamic";
      if (typeof rti === "number") {
        H.intTypeCheck(rti);
        if (genericContext == null || rti < 0 || rti >= genericContext.length)
          return "unexpected-generic-index:" + rti;
        t1 = genericContext.length;
        t2 = t1 - rti - 1;
        if (t2 < 0 || t2 >= t1)
          return H.ioore(genericContext, t2);
        return H.S(genericContext[t2]);
      }
      if ('func' in rti)
        return H._functionRtiToString(rti, genericContext);
      if ('futureOr' in rti)
        return "FutureOr<" + H._runtimeTypeToString("type" in rti ? rti.type : null, genericContext) + ">";
      return "unknown-reified-type";
    },
    _functionRtiToString: function(rti, genericContext) {
      var t1, boundsRti, outerContextLength, offset, i, i0, typeParameters, typeSep, t2, boundRti, returnTypeText, $arguments, argumentsText, sep, _i, argument, optionalArguments, namedArguments, t3;
      t1 = [P.String];
      H.assertSubtype(genericContext, "$isList", t1, "$asList");
      if ("bounds" in rti) {
        boundsRti = rti.bounds;
        if (genericContext == null) {
          genericContext = H.setRuntimeTypeInfo([], t1);
          outerContextLength = null;
        } else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsRti.length, i0 = i; i0 > 0; --i0)
          C.JSArray_methods.add$1(genericContext, "T" + (offset + i0));
        for (typeParameters = "<", typeSep = "", i0 = 0; i0 < i; ++i0, typeSep = ", ") {
          typeParameters += typeSep;
          t1 = genericContext.length;
          t2 = t1 - i0 - 1;
          if (t2 < 0)
            return H.ioore(genericContext, t2);
          typeParameters = C.JSString_methods.$add(typeParameters, genericContext[t2]);
          boundRti = boundsRti[i0];
          if (boundRti != null && boundRti !== P.Object)
            typeParameters += " extends " + H._runtimeTypeToString(boundRti, genericContext);
        }
        typeParameters += ">";
      } else {
        typeParameters = "";
        outerContextLength = null;
      }
      returnTypeText = !!rti.v ? "void" : H._runtimeTypeToString(rti.ret, genericContext);
      if ("args" in rti) {
        $arguments = rti.args;
        for (t1 = $arguments.length, argumentsText = "", sep = "", _i = 0; _i < t1; ++_i, sep = ", ") {
          argument = $arguments[_i];
          argumentsText = argumentsText + sep + H._runtimeTypeToString(argument, genericContext);
        }
      } else {
        argumentsText = "";
        sep = "";
      }
      if ("opt" in rti) {
        optionalArguments = rti.opt;
        argumentsText += sep + "[";
        for (t1 = optionalArguments.length, sep = "", _i = 0; _i < t1; ++_i, sep = ", ") {
          argument = optionalArguments[_i];
          argumentsText = argumentsText + sep + H._runtimeTypeToString(argument, genericContext);
        }
        argumentsText += "]";
      }
      if ("named" in rti) {
        namedArguments = rti.named;
        argumentsText += sep + "{";
        for (t1 = H.extractKeys(namedArguments), t2 = t1.length, sep = "", _i = 0; _i < t2; ++_i, sep = ", ") {
          t3 = H.stringTypeCheck(t1[_i]);
          argumentsText = argumentsText + sep + H._runtimeTypeToString(namedArguments[t3], genericContext) + (" " + H.S(t3));
        }
        argumentsText += "}";
      }
      if (outerContextLength != null)
        genericContext.length = outerContextLength;
      return typeParameters + "(" + argumentsText + ") => " + returnTypeText;
    },
    _joinArguments: function(types, startIndex, genericContext) {
      var buffer, index, separator, allDynamic, t1, argument;
      H.assertSubtype(genericContext, "$isList", [P.String], "$asList");
      if (types == null)
        return "";
      buffer = new P.StringBuffer("");
      for (index = startIndex, separator = "", allDynamic = true, t1 = ""; index < types.length; ++index, separator = ", ") {
        buffer._contents = t1 + separator;
        argument = types[index];
        if (argument != null)
          allDynamic = false;
        t1 = buffer._contents += H._runtimeTypeToString(argument, genericContext);
      }
      return "<" + buffer.toString$0(0) + ">";
    },
    substitute: function(substitution, $arguments) {
      if (substitution == null)
        return $arguments;
      substitution = substitution.apply(null, $arguments);
      if (substitution == null)
        return;
      if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
        return substitution;
      if (typeof substitution == "function")
        return substitution.apply(null, $arguments);
      return $arguments;
    },
    checkSubtype: function(object, isField, checks, asField) {
      var $arguments, interceptor;
      H.stringTypeCheck(isField);
      H.listTypeCheck(checks);
      H.stringTypeCheck(asField);
      if (object == null)
        return false;
      $arguments = H.getRuntimeTypeInfo(object);
      interceptor = J.getInterceptor$(object);
      if (interceptor[isField] == null)
        return false;
      return H.areSubtypes(H.substitute(interceptor[asField], $arguments), null, checks, null);
    },
    subtypeCast: function(object, isField, checks, asField) {
      H.stringTypeCheck(isField);
      H.listTypeCheck(checks);
      H.stringTypeCheck(asField);
      if (object == null)
        return object;
      if (H.checkSubtype(object, isField, checks, asField))
        return object;
      throw H.wrapException(H.CastErrorImplementation$(object, function(str, names) {
        return str.replace(/[^<,> ]+/g, function(m) {
          return names[m] || m;
        });
      }(H.unminifyOrTag(isField.substring(3)) + H._joinArguments(checks, 0, null), init.mangledGlobalNames)));
    },
    assertSubtype: function(object, isField, checks, asField) {
      H.stringTypeCheck(isField);
      H.listTypeCheck(checks);
      H.stringTypeCheck(asField);
      if (object == null)
        return object;
      if (H.checkSubtype(object, isField, checks, asField))
        return object;
      throw H.wrapException(H.TypeErrorImplementation$(object, function(str, names) {
        return str.replace(/[^<,> ]+/g, function(m) {
          return names[m] || m;
        });
      }(H.unminifyOrTag(isField.substring(3)) + H._joinArguments(checks, 0, null), init.mangledGlobalNames)));
    },
    areSubtypes: function(s, sEnv, t, tEnv) {
      var len, i;
      if (t == null)
        return true;
      if (s == null) {
        len = t.length;
        for (i = 0; i < len; ++i)
          if (!H._isSubtype(null, null, t[i], tEnv))
            return false;
        return true;
      }
      len = s.length;
      for (i = 0; i < len; ++i)
        if (!H._isSubtype(s[i], sEnv, t[i], tEnv))
          return false;
      return true;
    },
    computeSignature: function(signature, context, contextName) {
      return signature.apply(context, H.substitute(J.getInterceptor$(context)["$as" + H.S(contextName)], H.getRuntimeTypeInfo(context)));
    },
    isSupertypeOfNullRecursive: function(type) {
      var typeArgument;
      if (typeof type === "number")
        return false;
      if ('futureOr' in type) {
        typeArgument = "type" in type ? type.type : null;
        return type == null || type.builtin$cls === "Object" || type.builtin$cls === "Null" || type === -1 || type === -2 || H.isSupertypeOfNullRecursive(typeArgument);
      }
      return false;
    },
    checkSubtypeOfRuntimeType: function(o, t) {
      var type, rti;
      if (o == null)
        return t == null || t.builtin$cls === "Object" || t.builtin$cls === "Null" || t === -1 || t === -2 || H.isSupertypeOfNullRecursive(t);
      if (t == null || t === -1 || t.builtin$cls === "Object" || t === -2)
        return true;
      if (typeof t == "object") {
        if ('futureOr' in t)
          if (H.checkSubtypeOfRuntimeType(o, "type" in t ? t.type : null))
            return true;
        if ('func' in t)
          return H.functionTypeTest(o, t);
      }
      type = J.getInterceptor$(o).constructor;
      rti = H.getRuntimeTypeInfo(o);
      if (rti != null) {
        rti = rti.slice();
        rti.splice(0, 0, type);
        type = rti;
      }
      return H._isSubtype(type, null, t, null);
    },
    assertSubtypeOfRuntimeType: function(object, type) {
      if (object != null && !H.checkSubtypeOfRuntimeType(object, type))
        throw H.wrapException(H.TypeErrorImplementation$(object, H.runtimeTypeToString(type)));
      return object;
    },
    _isSubtype: function(s, sEnv, t, tEnv) {
      var t1, typeOfS, tTypeArgument, futureSubstitution, futureArguments, t2, typeOfT, typeOfTString, substitution;
      if (s === t)
        return true;
      if (t == null || t === -1 || t.builtin$cls === "Object" || t === -2)
        return true;
      if (s === -2)
        return true;
      if (s == null || s === -1 || s.builtin$cls === "Object" || s === -2) {
        if (typeof t === "number")
          return false;
        if ('futureOr' in t)
          return H._isSubtype(s, sEnv, "type" in t ? t.type : null, tEnv);
        return false;
      }
      if (typeof s === "number")
        return false;
      if (typeof t === "number")
        return false;
      if (s.builtin$cls === "Null")
        return true;
      if ('func' in t)
        return H._isFunctionSubtype(s, sEnv, t, tEnv);
      if ('func' in s)
        return t.builtin$cls === "Function";
      t1 = typeof s === "object" && s !== null && s.constructor === Array;
      typeOfS = t1 ? s[0] : s;
      if ('futureOr' in t) {
        tTypeArgument = "type" in t ? t.type : null;
        if ('futureOr' in s)
          return H._isSubtype("type" in s ? s.type : null, sEnv, tTypeArgument, tEnv);
        else if (H._isSubtype(s, sEnv, tTypeArgument, tEnv))
          return true;
        else {
          if (!('$is' + "Future" in typeOfS.prototype))
            return false;
          futureSubstitution = typeOfS.prototype["$as" + "Future"];
          futureArguments = H.substitute(futureSubstitution, t1 ? s.slice(1) : null);
          return H._isSubtype(typeof futureArguments === "object" && futureArguments !== null && futureArguments.constructor === Array ? futureArguments[0] : null, sEnv, tTypeArgument, tEnv);
        }
      }
      t2 = typeof t === "object" && t !== null && t.constructor === Array;
      typeOfT = t2 ? t[0] : t;
      if (typeOfT !== typeOfS) {
        typeOfTString = typeOfT.builtin$cls;
        if (!('$is' + typeOfTString in typeOfS.prototype))
          return false;
        substitution = typeOfS.prototype["$as" + typeOfTString];
      } else
        substitution = null;
      if (!t2)
        return true;
      t1 = t1 ? s.slice(1) : null;
      t2 = t.slice(1);
      return H.areSubtypes(H.substitute(substitution, t1), sEnv, t2, tEnv);
    },
    _isFunctionSubtype: function(s, sEnv, t, tEnv) {
      var sBounds, tBounds, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, tPos, sPos, sNamedParameters, tNamedParameters;
      if (!('func' in s))
        return false;
      if ("bounds" in s) {
        if (!("bounds" in t))
          return false;
        sBounds = s.bounds;
        tBounds = t.bounds;
        if (sBounds.length !== tBounds.length)
          return false;
      } else if ("bounds" in t)
        return false;
      if (!H._isSubtype(s.ret, sEnv, t.ret, tEnv))
        return false;
      sParameterTypes = s.args;
      tParameterTypes = t.args;
      sOptionalParameterTypes = s.opt;
      tOptionalParameterTypes = t.opt;
      sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
      tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
      sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
      tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
      if (sParametersLen > tParametersLen)
        return false;
      if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
        return false;
      for (pos = 0; pos < sParametersLen; ++pos)
        if (!H._isSubtype(tParameterTypes[pos], tEnv, sParameterTypes[pos], sEnv))
          return false;
      for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos)
        if (!H._isSubtype(tParameterTypes[tPos], tEnv, sOptionalParameterTypes[sPos], sEnv))
          return false;
      for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos)
        if (!H._isSubtype(tOptionalParameterTypes[tPos], tEnv, sOptionalParameterTypes[sPos], sEnv))
          return false;
      sNamedParameters = s.named;
      tNamedParameters = t.named;
      if (tNamedParameters == null)
        return true;
      if (sNamedParameters == null)
        return false;
      return H.namedParametersSubtypeCheck(sNamedParameters, sEnv, tNamedParameters, tEnv);
    },
    namedParametersSubtypeCheck: function(s, sEnv, t, tEnv) {
      var names, t1, i, $name;
      names = Object.getOwnPropertyNames(t);
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (!Object.hasOwnProperty.call(s, $name))
          return false;
        if (!H._isSubtype(t[$name], tEnv, s[$name], sEnv))
          return false;
      }
      return true;
    },
    instantiatedGenericFunctionType: function(genericFunctionRti, parameters) {
      if (genericFunctionRti == null)
        return;
      return H.finishBindInstantiatedFunctionType(genericFunctionRti, {func: 1}, parameters, 0);
    },
    finishBindInstantiatedFunctionType: function(rti, result, parameters, depth) {
      var namedParameters, boundNamed, names, t1, _i, $name;
      if ("v" in rti)
        result.v = rti.v;
      else if ("ret" in rti)
        result.ret = H.bindInstantiatedType(rti.ret, parameters, depth);
      if ("args" in rti)
        result.args = H.bindInstantiatedTypes(rti.args, parameters, depth);
      if ("opt" in rti)
        result.opt = H.bindInstantiatedTypes(rti.opt, parameters, depth);
      if ("named" in rti) {
        namedParameters = rti.named;
        boundNamed = {};
        names = Object.keys(namedParameters);
        for (t1 = names.length, _i = 0; _i < t1; ++_i) {
          $name = H.stringTypeCheck(names[_i]);
          boundNamed[$name] = H.bindInstantiatedType(namedParameters[$name], parameters, depth);
        }
        result.named = boundNamed;
      }
      return result;
    },
    bindInstantiatedType: function(rti, parameters, depth) {
      var result, bounds;
      if (rti == null)
        return rti;
      if (rti === -1)
        return rti;
      if (typeof rti == "function")
        return rti;
      if (typeof rti === "number") {
        if (rti < depth)
          return rti;
        return parameters[rti - depth];
      }
      if (typeof rti === "object" && rti !== null && rti.constructor === Array)
        return H.bindInstantiatedTypes(rti, parameters, depth);
      if ('func' in rti) {
        result = {func: 1};
        if ("bounds" in rti) {
          bounds = rti.bounds;
          depth += bounds.length;
          result.bounds = H.bindInstantiatedTypes(bounds, parameters, depth);
        }
        return H.finishBindInstantiatedFunctionType(rti, result, parameters, depth);
      }
      throw H.wrapException(P.ArgumentError$("Unknown RTI format in bindInstantiatedType."));
    },
    bindInstantiatedTypes: function(rti, parameters, depth) {
      var array, t1, i;
      array = rti.slice();
      for (t1 = array.length, i = 0; i < t1; ++i)
        C.JSArray_methods.$indexSet(array, i, H.bindInstantiatedType(array[i], parameters, depth));
      return array;
    },
    defineProperty: function(obj, property, value) {
      Object.defineProperty(obj, H.stringTypeCheck(property), {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor: function(obj) {
      var tag, record, interceptor, interceptorClass, mark, t1;
      tag = H.stringTypeCheck($.getTagFunction.call$1(obj));
      record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        tag = H.stringTypeCheck($.alternateTagFunction.call$2(obj, tag));
        if (tag != null) {
          record = $.dispatchRecordsForInstanceTags[tag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[tag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[tag];
        }
      }
      if (interceptorClass == null)
        return;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = H.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return H.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw H.wrapException(P.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return H.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto: function(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord: function(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return H.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch: function() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      H.initNativeDispatchContinue();
    },
    initNativeDispatchContinue: function() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      H.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks: function() {
      var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
      hooks = C.JS_CONST_bDt();
      hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_rr7, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_gkc, H.applyHooksTransformer(C.JS_CONST_4hp, H.applyHooksTransformer(C.JS_CONST_QJm(C.JS_CONST_u2C), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new H.initHooks_closure(getTag);
      $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer: function(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    stringContainsUnchecked: function(receiver, other, startIndex) {
      var t1 = receiver.indexOf(other, startIndex);
      return t1 >= 0;
    },
    ConstantMapView: {
      "^": "UnmodifiableMapView;_collection$_map,$ti"
    },
    ConstantMap: {
      "^": "Object;$ti",
      get$isEmpty: function(_) {
        return this.__js_helper$_length === 0;
      },
      toString$0: function(_) {
        return P.MapBase_mapToString(this);
      },
      get$entries: function(_) {
        return this.entries$body$ConstantMap(_, [P.MapEntry, H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)]);
      },
      entries$body$ConstantMap: function($async$_, $async$type) {
        var $async$self = this;
        return P._makeSyncStarIterable(function() {
          var _ = $async$_;
          var $async$goto = 0, $async$handler = 1, $async$currentError, t1, t2, key;
          return function $async$get$entries($async$errorCode, $async$result) {
            if ($async$errorCode === 1) {
              $async$currentError = $async$result;
              $async$goto = $async$handler;
            }
            while (true)
              switch ($async$goto) {
                case 0:
                  // Function start
                  t1 = $async$self._keys, t1 = new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]), t2 = $async$self.$ti;
                case 2:
                  // for condition
                  if (!t1.moveNext$0()) {
                    // goto after for
                    $async$goto = 3;
                    break;
                  }
                  key = t1._current;
                  $async$goto = 4;
                  return new P.MapEntry(key, $async$self.$index(0, key), t2);
                case 4:
                  // after yield
                  // goto for condition
                  $async$goto = 2;
                  break;
                case 3:
                  // after for
                  // implicit return
                  return P._IterationMarker_endOfIteration();
                case 1:
                  // rethrow
                  return P._IterationMarker_uncaughtError($async$currentError);
              }
          };
        }, $async$type);
      },
      $isMap: 1
    },
    ConstantStringMap: {
      "^": "ConstantMap;__js_helper$_length,_jsObject,_keys,$ti",
      get$length: function(_) {
        return this.__js_helper$_length;
      },
      containsKey$1: function(_, key) {
        if (typeof key !== "string")
          return false;
        if ("__proto__" === key)
          return false;
        return this._jsObject.hasOwnProperty(key);
      },
      $index: function(_, key) {
        if (!this.containsKey$1(0, key))
          return;
        return this._fetch$1(key);
      },
      _fetch$1: function(key) {
        return this._jsObject[H.stringTypeCheck(key)];
      },
      forEach$1: function(_, f) {
        var t1, keys, t2, i, key;
        t1 = H.getTypeArgumentByIndex(this, 1);
        H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0), t1]});
        keys = this._keys;
        for (t2 = keys.length, i = 0; i < t2; ++i) {
          key = keys[i];
          f.call$2(key, H.assertSubtypeOfRuntimeType(this._fetch$1(key), t1));
        }
      },
      get$keys: function(_) {
        return new H._ConstantMapKeyIterable(this, [H.getTypeArgumentByIndex(this, 0)]);
      }
    },
    ConstantProtoMap: {
      "^": "ConstantStringMap;_protoValue,__js_helper$_length,_jsObject,_keys,$ti",
      containsKey$1: function(_, key) {
        if (typeof key !== "string")
          return false;
        if ("__proto__" === key)
          return true;
        return this._jsObject.hasOwnProperty(key);
      },
      _fetch$1: function(key) {
        return "__proto__" === key ? this._protoValue : this._jsObject[H.stringTypeCheck(key)];
      }
    },
    _ConstantMapKeyIterable: {
      "^": "Iterable;_map,$ti",
      get$iterator: function(_) {
        var t1 = this._map._keys;
        return new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$length: function(_) {
        return this._map._keys.length;
      }
    },
    ReflectionInfo: {
      "^": "Object;jsFunction,data,isAccessor,requiredParameterCount,optionalParameterCount,areOptionalParametersNamed,functionType,0cachedSortedIndices",
      static: {
        ReflectionInfo_ReflectionInfo: function(jsFunction) {
          var data, requiredParametersInfo, optionalParametersInfo;
          data = jsFunction.$reflectionInfo;
          if (data == null)
            return;
          data = J.JSArray_markFixedList(data);
          requiredParametersInfo = data[0];
          optionalParametersInfo = data[1];
          return new H.ReflectionInfo(jsFunction, data, (requiredParametersInfo & 2) === 2, requiredParametersInfo >> 2, optionalParametersInfo >> 1, (optionalParametersInfo & 1) === 1, data[2]);
        }
      }
    },
    TypeErrorDecoder: {
      "^": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
      matchTypeError$1: function(message) {
        var match, result, t1;
        match = new RegExp(this._pattern).exec(message);
        if (match == null)
          return;
        result = Object.create(null);
        t1 = this._arguments;
        if (t1 !== -1)
          result.arguments = match[t1 + 1];
        t1 = this._argumentsExpr;
        if (t1 !== -1)
          result.argumentsExpr = match[t1 + 1];
        t1 = this._expr;
        if (t1 !== -1)
          result.expr = match[t1 + 1];
        t1 = this._method;
        if (t1 !== -1)
          result.method = match[t1 + 1];
        t1 = this._receiver;
        if (t1 !== -1)
          result.receiver = match[t1 + 1];
        return result;
      },
      static: {
        TypeErrorDecoder_extractPattern: function(message) {
          var match, $arguments, argumentsExpr, expr, method, receiver;
          message = message.replace(String({}), '$receiver$').replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
          match = message.match(/\\\$[a-zA-Z]+\\\$/g);
          if (match == null)
            match = H.setRuntimeTypeInfo([], [P.String]);
          $arguments = match.indexOf("\\$arguments\\$");
          argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
          expr = match.indexOf("\\$expr\\$");
          method = match.indexOf("\\$method\\$");
          receiver = match.indexOf("\\$receiver\\$");
          return new H.TypeErrorDecoder(message.replace(new RegExp('\\\\\\$arguments\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$argumentsExpr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$expr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$method\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$receiver\\\\\\$', 'g'), '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
        },
        TypeErrorDecoder_provokeCallErrorOn: function(expression) {
          return function($expr$) {
            var $argumentsExpr$ = '$arguments$';
            try {
              $expr$.$method$($argumentsExpr$);
            } catch (e) {
              return e.message;
            }
          }(expression);
        },
        TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
          return function($expr$) {
            try {
              $expr$.$method$;
            } catch (e) {
              return e.message;
            }
          }(expression);
        }
      }
    },
    NullError: {
      "^": "Error;_message,_method",
      toString$0: function(_) {
        var t1 = this._method;
        if (t1 == null)
          return "NoSuchMethodError: " + H.S(this._message);
        return "NoSuchMethodError: method not found: '" + t1 + "' on null";
      },
      static: {
        NullError$: function(_message, match) {
          return new H.NullError(_message, match == null ? null : match.method);
        }
      }
    },
    JsNoSuchMethodError: {
      "^": "Error;_message,_method,_receiver",
      toString$0: function(_) {
        var t1, t2;
        t1 = this._method;
        if (t1 == null)
          return "NoSuchMethodError: " + H.S(this._message);
        t2 = this._receiver;
        if (t2 == null)
          return "NoSuchMethodError: method not found: '" + t1 + "' (" + H.S(this._message) + ")";
        return "NoSuchMethodError: method not found: '" + t1 + "' on '" + t2 + "' (" + H.S(this._message) + ")";
      },
      static: {
        JsNoSuchMethodError$: function(_message, match) {
          var t1, t2;
          t1 = match == null;
          t2 = t1 ? null : match.method;
          return new H.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
        }
      }
    },
    UnknownJsTypeError: {
      "^": "Error;_message",
      toString$0: function(_) {
        var t1 = this._message;
        return t1.length === 0 ? "Error" : "Error: " + t1;
      }
    },
    ExceptionAndStackTrace: {
      "^": "Object;dartException,stackTrace<"
    },
    unwrapException_saveStackTrace: {
      "^": "Closure:12;ex",
      call$1: function(error) {
        if (!!J.getInterceptor$(error).$isError)
          if (error.$thrownJsError == null)
            error.$thrownJsError = this.ex;
        return error;
      }
    },
    _StackTrace: {
      "^": "Object;_exception,0_trace",
      toString$0: function(_) {
        var t1, trace;
        t1 = this._trace;
        if (t1 != null)
          return t1;
        t1 = this._exception;
        trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
        t1 = trace == null ? "" : trace;
        this._trace = t1;
        return t1;
      },
      $isStackTrace: 1
    },
    Closure: {
      "^": "Object;",
      toString$0: function(_) {
        return "Closure '" + H.Primitives_objectTypeName(this).trim() + "'";
      },
      get$$call: function() {
        return this;
      },
      $isFunction: 1,
      get$$call: function() {
        return this;
      }
    },
    TearOffClosure: {
      "^": "Closure;"
    },
    StaticClosure: {
      "^": "TearOffClosure;",
      toString$0: function(_) {
        var $name = this.$static_name;
        if ($name == null)
          return "Closure of unknown static method";
        return "Closure '" + H.unminifyOrTag($name) + "'";
      }
    },
    BoundClosure: {
      "^": "TearOffClosure;_self,_target,_receiver,_name",
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (this === other)
          return true;
        if (!(other instanceof H.BoundClosure))
          return false;
        return this._self === other._self && this._target === other._target && this._receiver === other._receiver;
      },
      get$hashCode: function(_) {
        var t1, receiverHashCode;
        t1 = this._receiver;
        if (t1 == null)
          receiverHashCode = H.Primitives_objectHashCode(this._self);
        else
          receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
        t1 = H.Primitives_objectHashCode(this._target);
        if (typeof receiverHashCode !== "number")
          return receiverHashCode.$xor();
        return (receiverHashCode ^ t1) >>> 0;
      },
      toString$0: function(_) {
        var receiver = this._receiver;
        if (receiver == null)
          receiver = this._self;
        return "Closure '" + H.S(this._name) + "' of " + ("Instance of '" + H.Primitives_objectTypeName(receiver) + "'");
      },
      static: {
        BoundClosure_selfOf: function(closure) {
          return closure._self;
        },
        BoundClosure_receiverOf: function(closure) {
          return closure._receiver;
        },
        BoundClosure_computeFieldNamed: function(fieldName) {
          var template, names, t1, i, $name;
          template = new H.BoundClosure("self", "target", "receiver", "name");
          names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template));
          for (t1 = names.length, i = 0; i < t1; ++i) {
            $name = names[i];
            if (template[$name] === fieldName)
              return $name;
          }
        }
      }
    },
    Instantiation: {
      "^": "Closure;",
      Instantiation$1: function(_genericClosure) {
        if (false)
          H.instantiatedGenericFunctionType(0, 0);
      },
      toString$0: function(_) {
        var types = "<" + C.JSArray_methods.join$1([new H.TypeImpl(H.getTypeArgumentByIndex(this, 0))], ", ") + ">";
        return H.S(this._genericClosure) + " with " + types;
      }
    },
    Instantiation1: {
      "^": "Instantiation;_genericClosure,$ti",
      call$1: function(a0) {
        return this._genericClosure.call$1$1(a0, this.$ti[0]);
      },
      call$2: function(a0, a1) {
        return this._genericClosure.call$1$2(a0, a1, this.$ti[0]);
      },
      $signature: function() {
        return H.instantiatedGenericFunctionType(H.extractFunctionTypeObjectFromInternal(this._genericClosure), this.$ti);
      }
    },
    TypeErrorImplementation: {
      "^": "Error;message",
      toString$0: function(_) {
        return this.message;
      },
      static: {
        TypeErrorImplementation$: function(value, type) {
          return new H.TypeErrorImplementation("TypeError: " + H.S(P.Error_safeToString(value)) + ": type '" + H._typeDescription(value) + "' is not a subtype of type '" + type + "'");
        }
      }
    },
    CastErrorImplementation: {
      "^": "Error;message",
      toString$0: function(_) {
        return this.message;
      },
      static: {
        CastErrorImplementation$: function(value, type) {
          return new H.CastErrorImplementation("CastError: " + H.S(P.Error_safeToString(value)) + ": type '" + H._typeDescription(value) + "' is not a subtype of type '" + type + "'");
        }
      }
    },
    RuntimeError: {
      "^": "Error;message",
      toString$0: function(_) {
        return "RuntimeError: " + H.S(this.message);
      },
      static: {
        RuntimeError$: function(message) {
          return new H.RuntimeError(message);
        }
      }
    },
    TypeImpl: {
      "^": "Object;_rti,0__typeName,0_unmangledName,0__js_helper$_hashCode",
      get$_typeName: function() {
        var t1 = this.__typeName;
        if (t1 == null) {
          t1 = H.runtimeTypeToString(this._rti);
          this.__typeName = t1;
        }
        return t1;
      },
      toString$0: function(_) {
        return this.get$_typeName();
      },
      get$hashCode: function(_) {
        var t1 = this.__js_helper$_hashCode;
        if (t1 == null) {
          t1 = C.JSString_methods.get$hashCode(this.get$_typeName());
          this.__js_helper$_hashCode = t1;
        }
        return t1;
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof H.TypeImpl && this.get$_typeName() === other.get$_typeName();
      }
    },
    JsLinkedHashMap: {
      "^": "MapBase;__js_helper$_length,0_strings,0_nums,0_rest,0_first,0_last,_modifications,$ti",
      get$length: function(_) {
        return this.__js_helper$_length;
      },
      get$isEmpty: function(_) {
        return this.__js_helper$_length === 0;
      },
      get$isNotEmpty: function(_) {
        return !this.get$isEmpty(this);
      },
      get$keys: function(_) {
        return new H.LinkedHashMapKeyIterable(this, [H.getTypeArgumentByIndex(this, 0)]);
      },
      get$values: function(_) {
        return H.MappedIterable_MappedIterable(this.get$keys(this), new H.JsLinkedHashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
      },
      containsKey$1: function(_, key) {
        var strings, nums;
        if (typeof key === "string") {
          strings = this._strings;
          if (strings == null)
            return false;
          return this._containsTableEntry$2(strings, key);
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._nums;
          if (nums == null)
            return false;
          return this._containsTableEntry$2(nums, key);
        } else
          return this.internalContainsKey$1(key);
      },
      internalContainsKey$1: function(key) {
        var rest = this._rest;
        if (rest == null)
          return false;
        return this.internalFindBucketIndex$2(this._getTableBucket$2(rest, this.internalComputeHashCode$1(key)), key) >= 0;
      },
      $index: function(_, key) {
        var strings, cell, t1, nums;
        if (typeof key === "string") {
          strings = this._strings;
          if (strings == null)
            return;
          cell = this._getTableCell$2(strings, key);
          t1 = cell == null ? null : cell.hashMapCellValue;
          return t1;
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._nums;
          if (nums == null)
            return;
          cell = this._getTableCell$2(nums, key);
          t1 = cell == null ? null : cell.hashMapCellValue;
          return t1;
        } else
          return this.internalGet$1(key);
      },
      internalGet$1: function(key) {
        var rest, bucket, index;
        rest = this._rest;
        if (rest == null)
          return;
        bucket = this._getTableBucket$2(rest, this.internalComputeHashCode$1(key));
        index = this.internalFindBucketIndex$2(bucket, key);
        if (index < 0)
          return;
        return bucket[index].hashMapCellValue;
      },
      $indexSet: function(_, key, value) {
        var strings, nums;
        H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1));
        if (typeof key === "string") {
          strings = this._strings;
          if (strings == null) {
            strings = this._newHashTable$0();
            this._strings = strings;
          }
          this._addHashTableEntry$3(strings, key, value);
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._nums;
          if (nums == null) {
            nums = this._newHashTable$0();
            this._nums = nums;
          }
          this._addHashTableEntry$3(nums, key, value);
        } else
          this.internalSet$2(key, value);
      },
      internalSet$2: function(key, value) {
        var rest, hash, bucket, index;
        H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1));
        rest = this._rest;
        if (rest == null) {
          rest = this._newHashTable$0();
          this._rest = rest;
        }
        hash = this.internalComputeHashCode$1(key);
        bucket = this._getTableBucket$2(rest, hash);
        if (bucket == null)
          this._setTableEntry$3(rest, hash, [this._newLinkedCell$2(key, value)]);
        else {
          index = this.internalFindBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index].hashMapCellValue = value;
          else
            bucket.push(this._newLinkedCell$2(key, value));
        }
      },
      putIfAbsent$2: function(_, key, ifAbsent) {
        var value;
        H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
        H.functionTypeCheck(ifAbsent, {func: 1, ret: H.getTypeArgumentByIndex(this, 1)});
        if (this.containsKey$1(0, key))
          return this.$index(0, key);
        value = ifAbsent.call$0();
        this.$indexSet(0, key, value);
        return value;
      },
      forEach$1: function(_, action) {
        var cell, modifications;
        H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)]});
        cell = this._first;
        modifications = this._modifications;
        for (; cell != null;) {
          action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
          if (modifications !== this._modifications)
            throw H.wrapException(P.ConcurrentModificationError$(this));
          cell = cell._next;
        }
      },
      _addHashTableEntry$3: function(table, key, value) {
        var cell;
        H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1));
        cell = this._getTableCell$2(table, key);
        if (cell == null)
          this._setTableEntry$3(table, key, this._newLinkedCell$2(key, value));
        else
          cell.hashMapCellValue = value;
      },
      _modified$0: function() {
        this._modifications = this._modifications + 1 & 67108863;
      },
      _newLinkedCell$2: function(key, value) {
        var cell, last;
        cell = new H.LinkedHashMapCell(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1)));
        if (this._first == null) {
          this._last = cell;
          this._first = cell;
        } else {
          last = this._last;
          cell._previous = last;
          last._next = cell;
          this._last = cell;
        }
        ++this.__js_helper$_length;
        this._modified$0();
        return cell;
      },
      internalComputeHashCode$1: function(key) {
        return J.get$hashCode$(key) & 0x3ffffff;
      },
      internalFindBucketIndex$2: function(bucket, key) {
        var $length, i;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; ++i)
          if (J.$eq$(bucket[i].hashMapCellKey, key))
            return i;
        return -1;
      },
      toString$0: function(_) {
        return P.MapBase_mapToString(this);
      },
      _getTableCell$2: function(table, key) {
        return table[key];
      },
      _getTableBucket$2: function(table, key) {
        return table[key];
      },
      _setTableEntry$3: function(table, key, value) {
        table[key] = value;
      },
      _deleteTableEntry$2: function(table, key) {
        delete table[key];
      },
      _containsTableEntry$2: function(table, key) {
        return this._getTableCell$2(table, key) != null;
      },
      _newHashTable$0: function() {
        var table = Object.create(null);
        this._setTableEntry$3(table, "<non-identifier-key>", table);
        this._deleteTableEntry$2(table, "<non-identifier-key>");
        return table;
      }
    },
    JsLinkedHashMap_values_closure: {
      "^": "Closure;$this",
      call$1: function(each) {
        var t1 = this.$this;
        return t1.$index(0, H.assertSubtypeOfRuntimeType(each, H.getTypeArgumentByIndex(t1, 0)));
      },
      $signature: function() {
        var t1 = this.$this;
        return {func: 1, ret: H.getTypeArgumentByIndex(t1, 1), args: [H.getTypeArgumentByIndex(t1, 0)]};
      }
    },
    LinkedHashMapCell: {
      "^": "Object;hashMapCellKey,hashMapCellValue,0_next,0_previous"
    },
    LinkedHashMapKeyIterable: {
      "^": "EfficientLengthIterable;_map,$ti",
      get$length: function(_) {
        return this._map.__js_helper$_length;
      },
      get$isEmpty: function(_) {
        return this._map.__js_helper$_length === 0;
      },
      get$iterator: function(_) {
        var t1, t2;
        t1 = this._map;
        t2 = new H.LinkedHashMapKeyIterator(t1, t1._modifications, this.$ti);
        t2._cell = t1._first;
        return t2;
      }
    },
    LinkedHashMapKeyIterator: {
      "^": "Object;_map,_modifications,0_cell,0__js_helper$_current,$ti",
      set$__js_helper$_current: function(_current) {
        this.__js_helper$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
      },
      get$current: function(_) {
        return this.__js_helper$_current;
      },
      moveNext$0: function() {
        var t1 = this._map;
        if (this._modifications !== t1._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        else {
          t1 = this._cell;
          if (t1 == null) {
            this.set$__js_helper$_current(null);
            return false;
          } else {
            this.set$__js_helper$_current(t1.hashMapCellKey);
            this._cell = this._cell._next;
            return true;
          }
        }
      },
      $isIterator: 1
    },
    initHooks_closure: {
      "^": "Closure:12;getTag",
      call$1: function(o) {
        return this.getTag(o);
      }
    },
    initHooks_closure0: {
      "^": "Closure:73;getUnknownTag",
      call$2: function(o, tag) {
        return this.getUnknownTag(o, tag);
      }
    },
    initHooks_closure1: {
      "^": "Closure:26;prototypeForTag",
      call$1: function(tag) {
        return this.prototypeForTag(H.stringTypeCheck(tag));
      }
    }
  }], ["dart._js_names", "dart:_js_names",, H, {
    "^": "",
    extractKeys: function(victim) {
      return J.JSArray_JSArray$markFixed(victim ? Object.keys(victim) : [], null);
    }
  }], ["dart2js._js_primitives", "dart:_js_primitives",, H, {
    "^": "",
    printString: function(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    }
  }], ["dart.typed_data.implementation", "dart:_native_typed_data",, H, {
    "^": "",
    _checkViewArguments: function(buffer, offsetInBytes, $length) {
      if (typeof offsetInBytes !== "number" || Math.floor(offsetInBytes) !== offsetInBytes)
        throw H.wrapException(P.ArgumentError$("Invalid view offsetInBytes " + H.S(offsetInBytes)));
    },
    _ensureNativeList: function(list) {
      var t1, result, i;
      t1 = J.getInterceptor$(list);
      if (!!t1.$isJSIndexable)
        return list;
      result = new Array(t1.get$length(list));
      result.fixed$length = Array;
      for (i = 0; i < t1.get$length(list); ++i)
        C.JSArray_methods.$indexSet(result, i, t1.$index(list, i));
      return result;
    },
    NativeByteData_NativeByteData$view: function(buffer, offsetInBytes, $length) {
      H._checkViewArguments(buffer, offsetInBytes, $length);
      return $length == null ? new DataView(buffer, offsetInBytes) : new DataView(buffer, offsetInBytes, $length);
    },
    NativeUint8List_NativeUint8List: function($length) {
      return new Uint8Array($length);
    },
    NativeUint8List_NativeUint8List$view: function(buffer, offsetInBytes, $length) {
      H._checkViewArguments(buffer, offsetInBytes, $length);
      return $length == null ? new Uint8Array(buffer, offsetInBytes) : new Uint8Array(buffer, offsetInBytes, $length);
    },
    _checkValidIndex: function(index, list, $length) {
      if (index >>> 0 !== index || index >= $length)
        throw H.wrapException(H.diagnoseIndexError(list, index));
    },
    _checkValidRange: function(start, end, $length) {
      var t1;
      if (!(start >>> 0 !== start))
        t1 = end >>> 0 !== end || start > end || end > $length;
      else
        t1 = true;
      if (t1)
        throw H.wrapException(H.diagnoseRangeError(start, end, $length));
      return end;
    },
    NativeByteBuffer: {
      "^": "Interceptor;",
      $isByteBuffer: 1,
      "%": "ArrayBuffer"
    },
    NativeTypedData: {
      "^": "Interceptor;",
      _invalidPosition$3: function(receiver, position, $length, $name) {
        var t1 = P.RangeError$range(position, 0, $length, $name, null);
        throw H.wrapException(t1);
      },
      _checkPosition$3: function(receiver, position, $length, $name) {
        if (position >>> 0 !== position || position > $length)
          this._invalidPosition$3(receiver, position, $length, $name);
      },
      $isTypedData: 1,
      "%": ";ArrayBufferView;NativeTypedArray|_NativeTypedArrayOfDouble_NativeTypedArray_ListMixin|_NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin|NativeTypedArrayOfDouble|_NativeTypedArrayOfInt_NativeTypedArray_ListMixin|_NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin|NativeTypedArrayOfInt"
    },
    NativeByteData: {
      "^": "NativeTypedData;",
      _getFloat32$2: function(receiver, byteOffset, littleEndian) {
        return receiver.getFloat32(byteOffset, littleEndian);
      },
      _getFloat64$2: function(receiver, byteOffset, littleEndian) {
        return receiver.getFloat64(byteOffset, littleEndian);
      },
      _getInt32$2: function(receiver, byteOffset, littleEndian) {
        return receiver.getInt32(byteOffset, littleEndian);
      },
      _getUint32$2: function(receiver, byteOffset, littleEndian) {
        return receiver.getUint32(byteOffset, littleEndian);
      },
      getUint64$2: function(receiver, byteOffset, endian) {
        throw H.wrapException(P.UnsupportedError$("Uint64 accessor not supported by dart2js."));
      },
      _setFloat32$3: function(receiver, byteOffset, value, littleEndian) {
        return receiver.setFloat32(byteOffset, value, littleEndian);
      },
      _setFloat64$3: function(receiver, byteOffset, value, littleEndian) {
        return receiver.setFloat64(byteOffset, value, littleEndian);
      },
      _setInt32$3: function(receiver, byteOffset, value, littleEndian) {
        return receiver.setInt32(byteOffset, value, littleEndian);
      },
      _setUint32$3: function(receiver, byteOffset, value, littleEndian) {
        return receiver.setUint32(byteOffset, value, littleEndian);
      },
      setUint8$2: function(receiver, byteOffset, value) {
        return receiver.setUint8(byteOffset, value);
      },
      $isByteData: 1,
      "%": "DataView"
    },
    NativeTypedArray: {
      "^": "NativeTypedData;",
      get$length: function(receiver) {
        return receiver.length;
      },
      _setRangeFast$4: function(receiver, start, end, source, skipCount) {
        var targetLength, count, sourceLength;
        targetLength = receiver.length;
        this._checkPosition$3(receiver, start, targetLength, "start");
        this._checkPosition$3(receiver, end, targetLength, "end");
        if (start > end)
          throw H.wrapException(P.RangeError$range(start, 0, end, null, null));
        count = end - start;
        if (typeof skipCount !== "number")
          return skipCount.$lt();
        if (skipCount < 0)
          throw H.wrapException(P.ArgumentError$(skipCount));
        sourceLength = source.length;
        if (sourceLength - skipCount < count)
          throw H.wrapException(P.StateError$("Not enough elements"));
        if (skipCount !== 0 || sourceLength !== count)
          source = source.subarray(skipCount, skipCount + count);
        receiver.set(source, start);
      },
      $isJSIndexable: 1,
      $asJSIndexable: Isolate.functionThatReturnsNull,
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: Isolate.functionThatReturnsNull
    },
    NativeTypedArrayOfDouble: {
      "^": "_NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin;",
      $index: function(receiver, index) {
        H._checkValidIndex(index, receiver, receiver.length);
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.doubleTypeCheck(value);
        H._checkValidIndex(index, receiver, receiver.length);
        receiver[index] = value;
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.double];
      },
      $asFixedLengthListMixin: function() {
        return [P.double];
      },
      $asListMixin: function() {
        return [P.double];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.double];
      },
      $isList: 1,
      $asList: function() {
        return [P.double];
      },
      "%": "Float32Array|Float64Array"
    },
    NativeTypedArrayOfInt: {
      "^": "_NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin;",
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.intTypeCheck(value);
        H._checkValidIndex(index, receiver, receiver.length);
        receiver[index] = value;
      },
      setRange$4: function(receiver, start, end, iterable, skipCount) {
        H.assertSubtype(iterable, "$isIterable", [P.int], "$asIterable");
        if (!!J.getInterceptor$(iterable).$isNativeTypedArrayOfInt) {
          this._setRangeFast$4(receiver, start, end, iterable, skipCount);
          return;
        }
        this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $asFixedLengthListMixin: function() {
        return [P.int];
      },
      $asListMixin: function() {
        return [P.int];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.int];
      },
      $isList: 1,
      $asList: function() {
        return [P.int];
      }
    },
    NativeInt16List: {
      "^": "NativeTypedArrayOfInt;",
      $index: function(receiver, index) {
        H._checkValidIndex(index, receiver, receiver.length);
        return receiver[index];
      },
      "%": "Int16Array"
    },
    NativeInt32List: {
      "^": "NativeTypedArrayOfInt;",
      $index: function(receiver, index) {
        H._checkValidIndex(index, receiver, receiver.length);
        return receiver[index];
      },
      "%": "Int32Array"
    },
    NativeInt8List: {
      "^": "NativeTypedArrayOfInt;",
      $index: function(receiver, index) {
        H._checkValidIndex(index, receiver, receiver.length);
        return receiver[index];
      },
      "%": "Int8Array"
    },
    NativeUint16List: {
      "^": "NativeTypedArrayOfInt;",
      $index: function(receiver, index) {
        H._checkValidIndex(index, receiver, receiver.length);
        return receiver[index];
      },
      "%": "Uint16Array"
    },
    NativeUint32List: {
      "^": "NativeTypedArrayOfInt;",
      $index: function(receiver, index) {
        H._checkValidIndex(index, receiver, receiver.length);
        return receiver[index];
      },
      "%": "Uint32Array"
    },
    NativeUint8ClampedList: {
      "^": "NativeTypedArrayOfInt;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        H._checkValidIndex(index, receiver, receiver.length);
        return receiver[index];
      },
      "%": "CanvasPixelArray|Uint8ClampedArray"
    },
    NativeUint8List: {
      "^": "NativeTypedArrayOfInt;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        H._checkValidIndex(index, receiver, receiver.length);
        return receiver[index];
      },
      sublist$2: function(receiver, start, end) {
        return new Uint8Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
      },
      $isNativeUint8List: 1,
      $isUint8List: 1,
      "%": ";Uint8Array"
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: {
      "^": "NativeTypedArray+ListMixin;"
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: {
      "^": "_NativeTypedArrayOfDouble_NativeTypedArray_ListMixin+FixedLengthListMixin;"
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: {
      "^": "NativeTypedArray+ListMixin;"
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: {
      "^": "_NativeTypedArrayOfInt_NativeTypedArray_ListMixin+FixedLengthListMixin;"
    }
  }], ["dart.async", "dart:async",, P, {
    "^": "",
    _AsyncRun__initializeScheduleImmediate: function() {
      var t1, div, span;
      t1 = {};
      if (self.scheduleImmediate != null)
        return P.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return P.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return P.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride: [function(callback) {
      self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(H.functionTypeCheck(callback, {func: 1, ret: -1})), 0));
    }, "call$1", "async__AsyncRun__scheduleImmediateJsOverride$closure", 4, 0, 9],
    _AsyncRun__scheduleImmediateWithSetImmediate: [function(callback) {
      self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(H.functionTypeCheck(callback, {func: 1, ret: -1})), 0));
    }, "call$1", "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", 4, 0, 9],
    _AsyncRun__scheduleImmediateWithTimer: [function(callback) {
      P.Timer__createTimer(C.Duration_0, H.functionTypeCheck(callback, {func: 1, ret: -1}));
    }, "call$1", "async__AsyncRun__scheduleImmediateWithTimer$closure", 4, 0, 9],
    Timer__createTimer: function(duration, callback) {
      var milliseconds;
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      milliseconds = C.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return P._TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    _makeAsyncAwaitCompleter: function($T) {
      return new P._AsyncAwaitCompleter(new P._SyncCompleter(new P._Future(0, $.Zone__current, [$T]), [$T]), false, [$T]);
    },
    _asyncStartSync: function(bodyFunction, completer) {
      H.functionTypeCheck(bodyFunction, {func: 1, ret: -1, args: [P.int,,]});
      H.interceptedTypeCheck(completer, "$is_AsyncAwaitCompleter");
      bodyFunction.call$2(0, null);
      completer.isSync = true;
      return completer._completer.future;
    },
    _asyncAwait: function(object, bodyFunction) {
      P._awaitOnObject(object, H.functionTypeCheck(bodyFunction, {func: 1, ret: -1, args: [P.int,,]}));
    },
    _asyncReturn: function(object, completer) {
      H.interceptedTypeCheck(completer, "$isCompleter").complete$1(0, object);
    },
    _asyncRethrow: function(object, completer) {
      H.interceptedTypeCheck(completer, "$isCompleter").completeError$2(H.unwrapException(object), H.getTraceFromException(object));
    },
    _awaitOnObject: function(object, bodyFunction) {
      var thenCallback, errorCallback, t1, t2, future;
      H.functionTypeCheck(bodyFunction, {func: 1, ret: -1, args: [P.int,,]});
      thenCallback = new P._awaitOnObject_closure(bodyFunction);
      errorCallback = new P._awaitOnObject_closure0(bodyFunction);
      t1 = J.getInterceptor$(object);
      if (!!t1.$is_Future)
        object._thenNoZoneRegistration$1$2(H.functionTypeCheck(thenCallback, {func: 1, ret: {futureOr: 1}, args: [,]}), errorCallback, null);
      else {
        t2 = {func: 1, ret: {futureOr: 1}, args: [,]};
        if (!!t1.$isFuture)
          object.then$1$2$onError(H.functionTypeCheck(thenCallback, t2), errorCallback, null);
        else {
          future = new P._Future(0, $.Zone__current, [null]);
          H.assertSubtypeOfRuntimeType(object, null);
          future._state = 4;
          future._resultOrListeners = object;
          future._thenNoZoneRegistration$1$2(H.functionTypeCheck(thenCallback, t2), null, null);
        }
      }
    },
    _wrapJsFunctionForAsync: function($function) {
      var $protected = function(fn, ERROR) {
        return function(errorCode, result) {
          while (true)
            try {
              fn(errorCode, result);
              break;
            } catch (error) {
              result = error;
              errorCode = ERROR;
            }
        };
      }($function, 1);
      return $.Zone__current.registerBinaryCallback$3$1(new P._wrapJsFunctionForAsync_closure($protected), P.Null, P.int, null);
    },
    _makeSyncStarIterable: function(body, $T) {
      return new P._SyncStarIterable(body, [$T]);
    },
    _invokeErrorHandler: function(errorHandler, error, stackTrace) {
      if (H.functionTypeTest(errorHandler, {func: 1, args: [P.Null, P.Null]}))
        return errorHandler.call$2(error, stackTrace);
      else
        return H.functionTypeCheck(errorHandler, {func: 1, args: [,]}).call$1(error);
    },
    Future_wait: function(futures, cleanUp, eagerError, $T) {
      var _box_0, result, handleError, future, pos, e, st, t1, t2, t3, _i, t4, exception, error;
      _box_0 = {};
      H.assertSubtype(futures, "$isIterable", [[P.Future, $T]], "$asIterable");
      t1 = [[P.List, $T]];
      result = new P._Future(0, $.Zone__current, t1);
      _box_0.values = null;
      _box_0.remaining = 0;
      _box_0.error = null;
      _box_0.stackTrace = null;
      handleError = new P.Future_wait_handleError(_box_0, cleanUp, false, result);
      try {
        for (t2 = futures, t3 = t2.length, _i = 0, t4 = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
          future = t2[_i];
          pos = t4;
          future.then$1$2$onError(new P.Future_wait_closure(_box_0, pos, result, cleanUp, false, $T), handleError, null);
          t4 = ++_box_0.remaining;
        }
        if (t4 === 0) {
          t2 = new P._Future(0, $.Zone__current, t1);
          t2._asyncComplete$1(C.List_empty);
          return t2;
        }
        t2 = new Array(t4);
        t2.fixed$length = Array;
        _box_0.values = H.setRuntimeTypeInfo(t2, [$T]);
      } catch (exception) {
        e = H.unwrapException(exception);
        st = H.getTraceFromException(exception);
        if (_box_0.remaining === 0 || false) {
          error = e;
          if (error == null)
            error = new P.NullThrownError();
          t2 = $.Zone__current;
          if (t2 !== C.C__RootZone)
            t2.toString;
          t1 = new P._Future(0, t2, t1);
          t1._asyncCompleteError$2(error, st);
          return t1;
        } else {
          _box_0.error = e;
          _box_0.stackTrace = st;
        }
      }
      return result;
    },
    Future_forEach: function(elements, action, $T) {
      H.assertSubtype(elements, "$isIterable", [$T], "$asIterable");
      return P.Future_doWhile(new P.Future_forEach_closure(new J.ArrayIterator(elements, elements.length, 0, [H.getTypeArgumentByIndex(elements, 0)]), H.functionTypeCheck(action, {func: 1, ret: {futureOr: 1}, args: [$T]})));
    },
    Future__kTrue: [function(_) {
      return true;
    }, "call$1", "async_Future__kTrue$closure", 4, 0, 14],
    Future_doWhile: function(action) {
      var t1, t2, doneSignal, nextIteration;
      t1 = {};
      H.functionTypeCheck(action, {func: 1, ret: {futureOr: 1, type: P.bool}});
      t2 = $.Zone__current;
      doneSignal = new P._Future(0, t2, [null]);
      t1.nextIteration = null;
      nextIteration = t2.bindUnaryCallbackGuarded$1$1(new P.Future_doWhile_closure(t1, action, doneSignal), P.bool);
      t1.nextIteration = nextIteration;
      nextIteration.call$1(true);
      return doneSignal;
    },
    _registerErrorHandler: function(errorHandler, zone) {
      if (H.functionTypeTest(errorHandler, {func: 1, args: [P.Object, P.StackTrace]}))
        return zone.registerBinaryCallback$3$1(errorHandler, null, P.Object, P.StackTrace);
      if (H.functionTypeTest(errorHandler, {func: 1, args: [P.Object]})) {
        zone.toString;
        return H.functionTypeCheck(errorHandler, {func: 1, ret: null, args: [P.Object]});
      }
      throw H.wrapException(P.ArgumentError$value(errorHandler, "onError", "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a a valid result"));
    },
    _microtaskLoop: function() {
      var t1, t2;
      for (; t1 = $._nextCallback, t1 != null;) {
        $._lastPriorityCallback = null;
        t2 = t1.next;
        $._nextCallback = t2;
        if (t2 == null)
          $._lastCallback = null;
        t1.callback.call$0();
      }
    },
    _startMicrotaskLoop: [function() {
      $._isInCallbackLoop = true;
      try {
        P._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      }
    }, "call$0", "async___startMicrotaskLoop$closure", 0, 0, 0],
    _scheduleAsyncCallback: function(callback) {
      var newEntry = new P._AsyncCallbackEntry(H.functionTypeCheck(callback, {func: 1, ret: -1}));
      if ($._nextCallback == null) {
        $._lastCallback = newEntry;
        $._nextCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      } else {
        $._lastCallback.next = newEntry;
        $._lastCallback = newEntry;
      }
    },
    _schedulePriorityAsyncCallback: function(callback) {
      var t1, entry, t2;
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      t1 = $._nextCallback;
      if (t1 == null) {
        P._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new P._AsyncCallbackEntry(callback);
      t2 = $._lastPriorityCallback;
      if (t2 == null) {
        entry.next = t1;
        $._lastPriorityCallback = entry;
        $._nextCallback = entry;
      } else {
        entry.next = t2.next;
        t2.next = entry;
        $._lastPriorityCallback = entry;
        if (entry.next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask: function(callback) {
      var t1, currentZone;
      t1 = {func: 1, ret: -1};
      H.functionTypeCheck(callback, t1);
      currentZone = $.Zone__current;
      if (C.C__RootZone === currentZone) {
        P._rootScheduleMicrotask(null, null, C.C__RootZone, callback);
        return;
      }
      currentZone.toString;
      P._rootScheduleMicrotask(null, null, currentZone, H.functionTypeCheck(currentZone.bindCallbackGuarded$1(callback), t1));
    },
    Stream_Stream$fromIterable: function(elements, $T) {
      return new P._GeneratedStreamImpl(new P.Stream_Stream$fromIterable_closure(H.assertSubtype(elements, "$isIterable", [$T], "$asIterable"), $T), false, [$T]);
    },
    StreamIterator_StreamIterator: function(stream, $T) {
      return new P._StreamIterator(H.assertSubtype(stream, "$isStream", [$T], "$asStream"), false, [$T]);
    },
    StreamController_StreamController: function(onCancel, onListen, onPause, onResume, sync, $T) {
      H.functionTypeCheck(onListen, {func: 1, ret: -1});
      return new P._AsyncStreamController(0, onListen, onPause, onResume, onCancel, [$T]);
    },
    _runGuarded: function(notificationHandler) {
      var e, s, exception, t1;
      H.functionTypeCheck(notificationHandler, {func: 1});
      if (notificationHandler == null)
        return;
      try {
        notificationHandler.call$0();
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = $.Zone__current;
        t1.toString;
        P._rootHandleUncaughtError(null, null, t1, e, H.interceptedTypeCheck(s, "$isStackTrace"));
      }
    },
    _nullErrorHandler: [function(error, stackTrace) {
      var t1 = $.Zone__current;
      t1.toString;
      P._rootHandleUncaughtError(null, null, t1, error, stackTrace);
    }, function(error) {
      return P._nullErrorHandler(error, null);
    }, "call$2", "call$1", "async___nullErrorHandler$closure", 4, 2, 6],
    _nullDoneHandler: [function() {
    }, "call$0", "async___nullDoneHandler$closure", 0, 0, 0],
    _runUserCode: function(userCode, onSuccess, onError, $T) {
      var e, s, replacement, error, stackTrace, exception, error0;
      H.functionTypeCheck(userCode, {func: 1, ret: $T});
      H.functionTypeCheck(onSuccess, {func: 1, args: [$T]});
      H.functionTypeCheck(onError, {func: 1, args: [, P.StackTrace]});
      try {
        onSuccess.call$1(userCode.call$0());
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        $.Zone__current.toString;
        H.interceptedTypeCheck(s, "$isStackTrace");
        replacement = null;
        if (replacement == null)
          onError.call$2(e, s);
        else {
          error0 = J.get$error$z(replacement);
          error = error0;
          stackTrace = replacement.get$stackTrace();
          onError.call$2(error, stackTrace);
        }
      }
    },
    _cancelAndError: function(subscription, future, error, stackTrace) {
      var cancelFuture = subscription.cancel$0(0);
      if (!!J.getInterceptor$(cancelFuture).$isFuture && cancelFuture !== $.$get$Future__nullFuture())
        cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
      else
        future._completeError$2(error, stackTrace);
    },
    _cancelAndErrorClosure: function(subscription, future) {
      return new P._cancelAndErrorClosure_closure(subscription, future);
    },
    _cancelAndValue: function(subscription, future, value) {
      var cancelFuture = subscription.cancel$0(0);
      if (!!J.getInterceptor$(cancelFuture).$isFuture && cancelFuture !== $.$get$Future__nullFuture())
        cancelFuture.whenComplete$1(new P._cancelAndValue_closure(future, false));
      else
        future._complete$1(false);
    },
    _addErrorWithReplacement: function(sink, error, stackTrace) {
      var t1 = $.Zone__current;
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      t1.toString;
      sink._addError$2(error, stackTrace);
    },
    Timer_Timer: function(duration, callback) {
      var t1, t2;
      t1 = {func: 1, ret: -1};
      H.functionTypeCheck(callback, t1);
      t2 = $.Zone__current;
      if (t2 === C.C__RootZone) {
        t2.toString;
        return P.Timer__createTimer(duration, callback);
      }
      return P.Timer__createTimer(duration, H.functionTypeCheck(t2.bindCallbackGuarded$1(callback), t1));
    },
    _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
      var t1 = {};
      t1.error = error;
      P._schedulePriorityAsyncCallback(new P._rootHandleUncaughtError_closure(t1, stackTrace));
    },
    _rootRun: function($self, $parent, zone, f, $R) {
      var old, t1;
      H.functionTypeCheck(f, {func: 1, ret: $R});
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary: function($self, $parent, zone, f, arg, $R, $T) {
      var old, t1;
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary: function($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old, t1;
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
      H.assertSubtypeOfRuntimeType(arg1, T1);
      H.assertSubtypeOfRuntimeType(arg2, T2);
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootScheduleMicrotask: function($self, $parent, zone, f) {
      var t1;
      H.functionTypeCheck(f, {func: 1, ret: -1});
      t1 = C.C__RootZone !== zone;
      if (t1)
        f = !(!t1 || false) ? zone.bindCallbackGuarded$1(f) : zone.bindCallback$1$1(f, -1);
      P._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: {
      "^": "Closure:10;_box_0",
      call$1: function(_) {
        var t1, f;
        t1 = this._box_0;
        f = t1.storedCallback;
        t1.storedCallback = null;
        f.call$0();
      }
    },
    _AsyncRun__initializeScheduleImmediate_closure: {
      "^": "Closure:33;_box_0,div,span",
      call$1: function(callback) {
        var t1, t2;
        this._box_0.storedCallback = H.functionTypeCheck(callback, {func: 1, ret: -1});
        t1 = this.div;
        t2 = this.span;
        t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
      }
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: {
      "^": "Closure:1;callback",
      call$0: function() {
        this.callback.call$0();
      }
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: {
      "^": "Closure:1;callback",
      call$0: function() {
        this.callback.call$0();
      }
    },
    _TimerImpl: {
      "^": "Object;_once,0_handle,_tick",
      _TimerImpl$2: function(milliseconds, callback) {
        if (self.setTimeout != null)
          this._handle = self.setTimeout(H.convertDartClosureToJS(new P._TimerImpl_internalCallback(this, callback), 0), milliseconds);
        else
          throw H.wrapException(P.UnsupportedError$("`setTimeout()` not found."));
      },
      cancel$0: function(_) {
        var t1;
        if (self.setTimeout != null) {
          t1 = this._handle;
          if (t1 == null)
            return;
          self.clearTimeout(t1);
          this._handle = null;
        } else
          throw H.wrapException(P.UnsupportedError$("Canceling a timer."));
      },
      $isTimer: 1,
      static: {
        _TimerImpl$: function(milliseconds, callback) {
          var t1 = new P._TimerImpl(true, 0);
          t1._TimerImpl$2(milliseconds, callback);
          return t1;
        }
      }
    },
    _TimerImpl_internalCallback: {
      "^": "Closure:0;$this,callback",
      call$0: function() {
        var t1 = this.$this;
        t1._handle = null;
        t1._tick = 1;
        this.callback.call$0();
      }
    },
    _AsyncAwaitCompleter: {
      "^": "Object;_completer,isSync,$ti",
      complete$1: function(_, value) {
        var t1;
        H.futureOrCheck(value, {futureOr: 1, type: H.getTypeArgumentByIndex(this, 0)});
        if (this.isSync)
          this._completer.complete$1(0, value);
        else if (H.checkSubtype(value, "$isFuture", this.$ti, "$asFuture")) {
          t1 = this._completer;
          value.then$1$2$onError(t1.get$complete(t1), t1.get$completeError(), -1);
        } else
          P.scheduleMicrotask(new P._AsyncAwaitCompleter_complete_closure(this, value));
      },
      completeError$2: function(e, st) {
        if (this.isSync)
          this._completer.completeError$2(e, st);
        else
          P.scheduleMicrotask(new P._AsyncAwaitCompleter_completeError_closure(this, e, st));
      },
      $isCompleter: 1
    },
    _AsyncAwaitCompleter_complete_closure: {
      "^": "Closure:1;$this,value",
      call$0: function() {
        this.$this._completer.complete$1(0, this.value);
      }
    },
    _AsyncAwaitCompleter_completeError_closure: {
      "^": "Closure:1;$this,e,st",
      call$0: function() {
        this.$this._completer.completeError$2(this.e, this.st);
      }
    },
    _awaitOnObject_closure: {
      "^": "Closure:2;bodyFunction",
      call$1: function(result) {
        return this.bodyFunction.call$2(0, result);
      }
    },
    _awaitOnObject_closure0: {
      "^": "Closure:16;bodyFunction",
      call$2: function(error, stackTrace) {
        this.bodyFunction.call$2(1, new H.ExceptionAndStackTrace(error, H.interceptedTypeCheck(stackTrace, "$isStackTrace")));
      }
    },
    _wrapJsFunctionForAsync_closure: {
      "^": "Closure:25;$protected",
      call$2: function(errorCode, result) {
        this.$protected(H.intTypeCheck(errorCode), result);
      }
    },
    _IterationMarker: {
      "^": "Object;value>,state",
      toString$0: function(_) {
        return "IterationMarker(" + this.state + ", " + H.S(this.value) + ")";
      },
      static: {
        _IterationMarker_yieldStar: function(values) {
          return new P._IterationMarker(values, 1);
        },
        _IterationMarker_endOfIteration: function() {
          return C._IterationMarker_null_2;
        },
        _IterationMarker_uncaughtError: function(error) {
          return new P._IterationMarker(error, 3);
        }
      }
    },
    _SyncStarIterator: {
      "^": "Object;_body,0_async$_current,0_nestedIterator,0_suspendedBodies,$ti",
      set$_async$_current: function(_current) {
        this._async$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
      },
      get$current: function(_) {
        var t1 = this._nestedIterator;
        if (t1 == null)
          return this._async$_current;
        return H.assertSubtypeOfRuntimeType(t1.get$current(t1), H.getTypeArgumentByIndex(this, 0));
      },
      moveNext$0: function() {
        var t1, value, state, inner;
        for (; true;) {
          t1 = this._nestedIterator;
          if (t1 != null)
            if (t1.moveNext$0())
              return true;
            else
              this._nestedIterator = null;
          value = function(body, SUCCESS, ERROR) {
            var errorValue,
              errorCode = SUCCESS;
            while (true)
              try {
                return body(errorCode, errorValue);
              } catch (error) {
                errorValue = error;
                errorCode = ERROR;
              }
          }(this._body, 0, 1);
          if (value instanceof P._IterationMarker) {
            state = value.state;
            if (state === 2) {
              t1 = this._suspendedBodies;
              if (t1 == null || t1.length === 0) {
                this.set$_async$_current(null);
                return false;
              }
              if (0 >= t1.length)
                return H.ioore(t1, -1);
              this._body = t1.pop();
              continue;
            } else {
              t1 = value.value;
              if (state === 3)
                throw t1;
              else {
                inner = J.get$iterator$ax(t1);
                if (!!inner.$is_SyncStarIterator) {
                  t1 = this._suspendedBodies;
                  if (t1 == null) {
                    t1 = [];
                    this._suspendedBodies = t1;
                  }
                  C.JSArray_methods.add$1(t1, this._body);
                  this._body = inner._body;
                  continue;
                } else {
                  this._nestedIterator = inner;
                  continue;
                }
              }
            }
          } else {
            this.set$_async$_current(value);
            return true;
          }
        }
        return false;
      },
      $isIterator: 1
    },
    _SyncStarIterable: {
      "^": "IterableBase;_outerHelper,$ti",
      get$iterator: function(_) {
        return new P._SyncStarIterator(this._outerHelper(), this.$ti);
      }
    },
    Future: {
      "^": "Object;$ti"
    },
    Future_wait_handleError: {
      "^": "Closure:5;_box_0,cleanUp,eagerError,result",
      call$2: function(theError, theStackTrace) {
        var t1, t2;
        t1 = this._box_0;
        t2 = --t1.remaining;
        if (t1.values != null) {
          t1.values = null;
          if (t1.remaining === 0 || this.eagerError)
            this.result._completeError$2(theError, H.interceptedTypeCheck(theStackTrace, "$isStackTrace"));
          else {
            t1.error = theError;
            t1.stackTrace = H.interceptedTypeCheck(theStackTrace, "$isStackTrace");
          }
        } else if (t2 === 0 && !this.eagerError)
          this.result._completeError$2(t1.error, t1.stackTrace);
      }
    },
    Future_wait_closure: {
      "^": "Closure;_box_0,pos,result,cleanUp,eagerError,T",
      call$1: function(value) {
        var t1, t2;
        H.assertSubtypeOfRuntimeType(value, this.T);
        t1 = this._box_0;
        --t1.remaining;
        t2 = t1.values;
        if (t2 != null) {
          C.JSArray_methods.$indexSet(t2, this.pos, value);
          if (t1.remaining === 0)
            this.result._completeWithValue$1(t1.values);
        } else if (t1.remaining === 0 && !this.eagerError)
          this.result._completeError$2(t1.error, t1.stackTrace);
      },
      $signature: function() {
        return {func: 1, ret: P.Null, args: [this.T]};
      }
    },
    Future_forEach_closure: {
      "^": "Closure:50;iterator,action",
      call$0: function() {
        var t1, result;
        t1 = this.iterator;
        if (!t1.moveNext$0())
          return false;
        result = this.action.call$1(t1._current);
        if (!!J.getInterceptor$(result).$isFuture)
          return result.then$1$1(P.async_Future__kTrue$closure(), P.bool);
        return true;
      }
    },
    Future_doWhile_closure: {
      "^": "Closure:37;_box_0,action,doneSignal",
      call$1: function(keepGoing) {
        var result, error, stackTrace, t1, t2, exception, stackTrace0, t3;
        H.boolTypeCheck(keepGoing);
        for (t1 = [P.bool], t2 = this.action; keepGoing;) {
          result = null;
          try {
            result = t2.call$0();
          } catch (exception) {
            error = H.unwrapException(exception);
            stackTrace = H.getTraceFromException(exception);
            t1 = $.Zone__current;
            stackTrace0 = H.interceptedTypeCheck(stackTrace, "$isStackTrace");
            t1.toString;
            this.doneSignal._asyncCompleteError$2(error, stackTrace0);
            return;
          }
          t3 = result;
          if (H.checkSubtype(t3, "$isFuture", t1, "$asFuture")) {
            result.then$1$2$onError(H.functionTypeCheck(this._box_0.nextIteration, {func: 1, ret: {futureOr: 1}, args: [P.bool]}), this.doneSignal.get$_completeError(), null);
            return;
          }
          keepGoing = H.boolTypeCheck(result);
        }
        this.doneSignal._complete$1(null);
      }
    },
    _Completer: {
      "^": "Object;$ti",
      completeError$2: [function(error, stackTrace) {
        H.interceptedTypeCheck(stackTrace, "$isStackTrace");
        if (error == null)
          error = new P.NullThrownError();
        if (this.future._state !== 0)
          throw H.wrapException(P.StateError$("Future already completed"));
        $.Zone__current.toString;
        this._completeError$2(error, stackTrace);
      }, function(error) {
        return this.completeError$2(error, null);
      }, "completeError$1", "call$2", "call$1", "get$completeError", 4, 2, 6],
      $isCompleter: 1
    },
    _AsyncCompleter: {
      "^": "_Completer;future,$ti",
      complete$1: function(_, value) {
        var t1;
        H.futureOrCheck(value, {futureOr: 1, type: H.getTypeArgumentByIndex(this, 0)});
        t1 = this.future;
        if (t1._state !== 0)
          throw H.wrapException(P.StateError$("Future already completed"));
        t1._asyncComplete$1(value);
      },
      _completeError$2: function(error, stackTrace) {
        this.future._asyncCompleteError$2(error, stackTrace);
      }
    },
    _SyncCompleter: {
      "^": "_Completer;future,$ti",
      complete$1: [function(_, value) {
        var t1;
        H.futureOrCheck(value, {futureOr: 1, type: H.getTypeArgumentByIndex(this, 0)});
        t1 = this.future;
        if (t1._state !== 0)
          throw H.wrapException(P.StateError$("Future already completed"));
        t1._complete$1(value);
      }, function($receiver) {
        return this.complete$1($receiver, null);
      }, "complete$0", "call$1", "call$0", "get$complete", 1, 2, 66],
      _completeError$2: function(error, stackTrace) {
        this.future._completeError$2(error, stackTrace);
      }
    },
    _FutureListener: {
      "^": "Object;0_nextListener,result,state,callback,errorCallback,$ti",
      matchesErrorTest$1: function(asyncError) {
        if (this.state !== 6)
          return true;
        return this.result._zone.runUnary$2$2(H.functionTypeCheck(this.callback, {func: 1, ret: P.bool, args: [P.Object]}), asyncError.error, P.bool, P.Object);
      },
      handleError$1: function(asyncError) {
        var errorCallback, t1, t2, t3;
        errorCallback = this.errorCallback;
        t1 = P.Object;
        t2 = {futureOr: 1, type: H.getTypeArgumentByIndex(this, 1)};
        t3 = this.result._zone;
        if (H.functionTypeTest(errorCallback, {func: 1, args: [P.Object, P.StackTrace]}))
          return H.futureOrCheck(t3.runBinary$3$3(errorCallback, asyncError.error, asyncError.stackTrace, null, t1, P.StackTrace), t2);
        else
          return H.futureOrCheck(t3.runUnary$2$2(H.functionTypeCheck(errorCallback, {func: 1, args: [P.Object]}), asyncError.error, null, t1), t2);
      }
    },
    _Future: {
      "^": "Object;_state<,_zone,0_resultOrListeners<,$ti",
      get$_hasError: function() {
        return this._state === 8;
      },
      then$1$2$onError: function(f, onError, $R) {
        var t1, currentZone;
        t1 = H.getTypeArgumentByIndex(this, 0);
        H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $R}, args: [t1]});
        currentZone = $.Zone__current;
        if (currentZone !== C.C__RootZone) {
          currentZone.toString;
          H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $R}, args: [t1]});
          if (onError != null)
            onError = P._registerErrorHandler(onError, currentZone);
        }
        return this._thenNoZoneRegistration$1$2(f, onError, $R);
      },
      then$1$1: function(f, $R) {
        return this.then$1$2$onError(f, null, $R);
      },
      _thenNoZoneRegistration$1$2: function(f, onError, $E) {
        var t1, result, t2;
        t1 = H.getTypeArgumentByIndex(this, 0);
        H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $E}, args: [t1]});
        result = new P._Future(0, $.Zone__current, [$E]);
        t2 = onError == null ? 1 : 3;
        this._addListener$1(new P._FutureListener(result, t2, f, onError, [t1, $E]));
        return result;
      },
      catchError$2$test: function(onError, test) {
        var t1, result;
        t1 = $.Zone__current;
        result = new P._Future(0, t1, this.$ti);
        if (t1 !== C.C__RootZone)
          onError = P._registerErrorHandler(onError, t1);
        t1 = H.getTypeArgumentByIndex(this, 0);
        this._addListener$1(new P._FutureListener(result, 2, test, onError, [t1, t1]));
        return result;
      },
      catchError$1: function(onError) {
        return this.catchError$2$test(onError, null);
      },
      whenComplete$1: function(action) {
        var t1, result;
        H.functionTypeCheck(action, {func: 1});
        t1 = $.Zone__current;
        result = new P._Future(0, t1, this.$ti);
        if (t1 !== C.C__RootZone) {
          t1.toString;
          H.functionTypeCheck(action, {func: 1, ret: null});
        }
        t1 = H.getTypeArgumentByIndex(this, 0);
        this._addListener$1(new P._FutureListener(result, 8, action, null, [t1, t1]));
        return result;
      },
      _addListener$1: function(listener) {
        var t1, source;
        t1 = this._state;
        if (t1 <= 1) {
          listener._nextListener = H.interceptedTypeCheck(this._resultOrListeners, "$is_FutureListener");
          this._resultOrListeners = listener;
        } else {
          if (t1 === 2) {
            source = H.interceptedTypeCheck(this._resultOrListeners, "$is_Future");
            t1 = source._state;
            if (t1 < 4) {
              source._addListener$1(listener);
              return;
            }
            this._state = t1;
            this._resultOrListeners = source._resultOrListeners;
          }
          t1 = this._zone;
          t1.toString;
          P._rootScheduleMicrotask(null, null, t1, H.functionTypeCheck(new P._Future__addListener_closure(this, listener), {func: 1, ret: -1}));
        }
      },
      _prependListeners$1: function(listeners) {
        var _box_0, t1, existingListeners, cursor, cursor0, source;
        _box_0 = {};
        _box_0.listeners = listeners;
        if (listeners == null)
          return;
        t1 = this._state;
        if (t1 <= 1) {
          existingListeners = H.interceptedTypeCheck(this._resultOrListeners, "$is_FutureListener");
          this._resultOrListeners = listeners;
          if (existingListeners != null) {
            for (cursor = listeners; cursor0 = cursor._nextListener, cursor0 != null; cursor = cursor0)
              ;
            cursor._nextListener = existingListeners;
          }
        } else {
          if (t1 === 2) {
            source = H.interceptedTypeCheck(this._resultOrListeners, "$is_Future");
            t1 = source._state;
            if (t1 < 4) {
              source._prependListeners$1(listeners);
              return;
            }
            this._state = t1;
            this._resultOrListeners = source._resultOrListeners;
          }
          _box_0.listeners = this._reverseListeners$1(listeners);
          t1 = this._zone;
          t1.toString;
          P._rootScheduleMicrotask(null, null, t1, H.functionTypeCheck(new P._Future__prependListeners_closure(_box_0, this), {func: 1, ret: -1}));
        }
      },
      _removeListeners$0: function() {
        var current = H.interceptedTypeCheck(this._resultOrListeners, "$is_FutureListener");
        this._resultOrListeners = null;
        return this._reverseListeners$1(current);
      },
      _reverseListeners$1: function(listeners) {
        var current, prev, next;
        for (current = listeners, prev = null; current != null; prev = current, current = next) {
          next = current._nextListener;
          current._nextListener = prev;
        }
        return prev;
      },
      _complete$1: function(value) {
        var t1, t2, listeners;
        t1 = H.getTypeArgumentByIndex(this, 0);
        H.futureOrCheck(value, {futureOr: 1, type: t1});
        t2 = this.$ti;
        if (H.checkSubtype(value, "$isFuture", t2, "$asFuture"))
          if (H.checkSubtype(value, "$is_Future", t2, null))
            P._Future__chainCoreFuture(value, this);
          else
            P._Future__chainForeignFuture(value, this);
        else {
          listeners = this._removeListeners$0();
          H.assertSubtypeOfRuntimeType(value, t1);
          this._state = 4;
          this._resultOrListeners = value;
          P._Future__propagateToListeners(this, listeners);
        }
      },
      _completeWithValue$1: function(value) {
        var listeners;
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0));
        listeners = this._removeListeners$0();
        this._state = 4;
        this._resultOrListeners = value;
        P._Future__propagateToListeners(this, listeners);
      },
      _completeError$2: [function(error, stackTrace) {
        var listeners;
        H.interceptedTypeCheck(stackTrace, "$isStackTrace");
        listeners = this._removeListeners$0();
        this._state = 8;
        this._resultOrListeners = new P.AsyncError(error, stackTrace);
        P._Future__propagateToListeners(this, listeners);
      }, function(error) {
        return this._completeError$2(error, null);
      }, "_completeError$1", "call$2", "call$1", "get$_completeError", 4, 2, 6],
      _asyncComplete$1: function(value) {
        var t1;
        H.futureOrCheck(value, {futureOr: 1, type: H.getTypeArgumentByIndex(this, 0)});
        if (H.checkSubtype(value, "$isFuture", this.$ti, "$asFuture")) {
          this._chainFuture$1(value);
          return;
        }
        this._state = 1;
        t1 = this._zone;
        t1.toString;
        P._rootScheduleMicrotask(null, null, t1, H.functionTypeCheck(new P._Future__asyncComplete_closure(this, value), {func: 1, ret: -1}));
      },
      _chainFuture$1: function(value) {
        var t1 = this.$ti;
        H.assertSubtype(value, "$isFuture", t1, "$asFuture");
        if (H.checkSubtype(value, "$is_Future", t1, null)) {
          if (value.get$_state() === 8) {
            this._state = 1;
            t1 = this._zone;
            t1.toString;
            P._rootScheduleMicrotask(null, null, t1, H.functionTypeCheck(new P._Future__chainFuture_closure(this, value), {func: 1, ret: -1}));
          } else
            P._Future__chainCoreFuture(value, this);
          return;
        }
        P._Future__chainForeignFuture(value, this);
      },
      _asyncCompleteError$2: function(error, stackTrace) {
        var t1;
        H.interceptedTypeCheck(stackTrace, "$isStackTrace");
        this._state = 1;
        t1 = this._zone;
        t1.toString;
        P._rootScheduleMicrotask(null, null, t1, H.functionTypeCheck(new P._Future__asyncCompleteError_closure(this, error, stackTrace), {func: 1, ret: -1}));
      },
      $isFuture: 1,
      static: {
        _Future$zoneValue: function(value, _zone, $T) {
          var t1 = new P._Future(0, _zone, [$T]);
          H.assertSubtypeOfRuntimeType(value, $T);
          t1._state = 4;
          t1._resultOrListeners = value;
          return t1;
        },
        _Future__chainForeignFuture: function(source, target) {
          var e, s, exception;
          target._state = 1;
          try {
            source.then$1$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target), null);
          } catch (exception) {
            e = H.unwrapException(exception);
            s = H.getTraceFromException(exception);
            P.scheduleMicrotask(new P._Future__chainForeignFuture_closure1(target, e, s));
          }
        },
        _Future__chainCoreFuture: function(source, target) {
          var t1, listeners;
          for (; t1 = source._state, t1 === 2;)
            source = H.interceptedTypeCheck(source._resultOrListeners, "$is_Future");
          if (t1 >= 4) {
            listeners = target._removeListeners$0();
            target._state = source._state;
            target._resultOrListeners = source._resultOrListeners;
            P._Future__propagateToListeners(target, listeners);
          } else {
            listeners = H.interceptedTypeCheck(target._resultOrListeners, "$is_FutureListener");
            target._state = 2;
            target._resultOrListeners = source;
            source._prependListeners$1(listeners);
          }
        },
        _Future__propagateToListeners: function(source, listeners) {
          var _box_1, t1, _box_0, hasError, asyncError, t2, t3, listeners0, sourceResult, zone, t4, oldZone, current, result;
          _box_1 = {};
          _box_1.source = source;
          for (t1 = source; true;) {
            _box_0 = {};
            hasError = t1._state === 8;
            if (listeners == null) {
              if (hasError) {
                asyncError = H.interceptedTypeCheck(t1._resultOrListeners, "$isAsyncError");
                t1 = t1._zone;
                t2 = asyncError.error;
                t3 = asyncError.stackTrace;
                t1.toString;
                P._rootHandleUncaughtError(null, null, t1, t2, t3);
              }
              return;
            }
            for (; listeners0 = listeners._nextListener, listeners0 != null; listeners = listeners0) {
              listeners._nextListener = null;
              P._Future__propagateToListeners(_box_1.source, listeners);
            }
            t1 = _box_1.source;
            sourceResult = t1._resultOrListeners;
            _box_0.listenerHasError = hasError;
            _box_0.listenerValueOrError = sourceResult;
            t2 = !hasError;
            if (t2) {
              t3 = listeners.state;
              t3 = (t3 & 1) !== 0 || t3 === 8;
            } else
              t3 = true;
            if (t3) {
              t3 = listeners.result;
              zone = t3._zone;
              if (hasError) {
                t4 = t1._zone;
                t4.toString;
                t4 = t4 == null ? zone == null : t4 === zone;
                if (!t4)
                  zone.toString;
                else
                  t4 = true;
                t4 = !t4;
              } else
                t4 = false;
              if (t4) {
                H.interceptedTypeCheck(sourceResult, "$isAsyncError");
                t1 = t1._zone;
                t2 = sourceResult.error;
                t3 = sourceResult.stackTrace;
                t1.toString;
                P._rootHandleUncaughtError(null, null, t1, t2, t3);
                return;
              }
              oldZone = $.Zone__current;
              if (oldZone == null ? zone != null : oldZone !== zone)
                $.Zone__current = zone;
              else
                oldZone = null;
              t1 = listeners.state;
              if (t1 === 8)
                new P._Future__propagateToListeners_handleWhenCompleteCallback(_box_1, _box_0, listeners, hasError).call$0();
              else if (t2) {
                if ((t1 & 1) !== 0)
                  new P._Future__propagateToListeners_handleValueCallback(_box_0, listeners, sourceResult).call$0();
              } else if ((t1 & 2) !== 0)
                new P._Future__propagateToListeners_handleError(_box_1, _box_0, listeners).call$0();
              if (oldZone != null)
                $.Zone__current = oldZone;
              t1 = _box_0.listenerValueOrError;
              if (!!J.getInterceptor$(t1).$isFuture) {
                if (!!t1.$is_Future)
                  if (t1._state >= 4) {
                    current = H.interceptedTypeCheck(t3._resultOrListeners, "$is_FutureListener");
                    t3._resultOrListeners = null;
                    listeners = t3._reverseListeners$1(current);
                    t3._state = t1._state;
                    t3._resultOrListeners = t1._resultOrListeners;
                    _box_1.source = t1;
                    continue;
                  } else
                    P._Future__chainCoreFuture(t1, t3);
                else
                  P._Future__chainForeignFuture(t1, t3);
                return;
              }
            }
            result = listeners.result;
            current = H.interceptedTypeCheck(result._resultOrListeners, "$is_FutureListener");
            result._resultOrListeners = null;
            listeners = result._reverseListeners$1(current);
            t1 = _box_0.listenerHasError;
            t2 = _box_0.listenerValueOrError;
            if (!t1) {
              H.assertSubtypeOfRuntimeType(t2, H.getTypeArgumentByIndex(result, 0));
              result._state = 4;
              result._resultOrListeners = t2;
            } else {
              H.interceptedTypeCheck(t2, "$isAsyncError");
              result._state = 8;
              result._resultOrListeners = t2;
            }
            _box_1.source = result;
            t1 = result;
          }
        }
      }
    },
    _Future__addListener_closure: {
      "^": "Closure:1;$this,listener",
      call$0: function() {
        P._Future__propagateToListeners(this.$this, this.listener);
      }
    },
    _Future__prependListeners_closure: {
      "^": "Closure:1;_box_0,$this",
      call$0: function() {
        P._Future__propagateToListeners(this.$this, this._box_0.listeners);
      }
    },
    _Future__chainForeignFuture_closure: {
      "^": "Closure:10;target",
      call$1: function(value) {
        var t1 = this.target;
        t1._state = 0;
        t1._complete$1(value);
      }
    },
    _Future__chainForeignFuture_closure0: {
      "^": "Closure:35;target",
      call$2: function(error, stackTrace) {
        this.target._completeError$2(error, H.interceptedTypeCheck(stackTrace, "$isStackTrace"));
      },
      call$1: function(error) {
        return this.call$2(error, null);
      }
    },
    _Future__chainForeignFuture_closure1: {
      "^": "Closure:1;target,e,s",
      call$0: function() {
        this.target._completeError$2(this.e, this.s);
      }
    },
    _Future__asyncComplete_closure: {
      "^": "Closure:1;$this,value",
      call$0: function() {
        var t1 = this.$this;
        t1._completeWithValue$1(H.assertSubtypeOfRuntimeType(this.value, H.getTypeArgumentByIndex(t1, 0)));
      }
    },
    _Future__chainFuture_closure: {
      "^": "Closure:1;$this,value",
      call$0: function() {
        P._Future__chainCoreFuture(this.value, this.$this);
      }
    },
    _Future__asyncCompleteError_closure: {
      "^": "Closure:1;$this,error,stackTrace",
      call$0: function() {
        this.$this._completeError$2(this.error, this.stackTrace);
      }
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: {
      "^": "Closure:0;_box_1,_box_0,listener,hasError",
      call$0: function() {
        var completeResult, e, s, t1, exception, t2, originalSource;
        completeResult = null;
        try {
          t1 = this.listener;
          completeResult = t1.result._zone.run$1$1(H.functionTypeCheck(t1.callback, {func: 1}), null);
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          if (this.hasError) {
            t1 = H.interceptedTypeCheck(this._box_1.source._resultOrListeners, "$isAsyncError").error;
            t2 = e;
            t2 = t1 == null ? t2 == null : t1 === t2;
            t1 = t2;
          } else
            t1 = false;
          t2 = this._box_0;
          if (t1)
            t2.listenerValueOrError = H.interceptedTypeCheck(this._box_1.source._resultOrListeners, "$isAsyncError");
          else
            t2.listenerValueOrError = new P.AsyncError(e, s);
          t2.listenerHasError = true;
          return;
        }
        if (!!J.getInterceptor$(completeResult).$isFuture) {
          if (completeResult instanceof P._Future && completeResult.get$_state() >= 4) {
            if (completeResult.get$_hasError()) {
              t1 = this._box_0;
              t1.listenerValueOrError = H.interceptedTypeCheck(completeResult.get$_resultOrListeners(), "$isAsyncError");
              t1.listenerHasError = true;
            }
            return;
          }
          originalSource = this._box_1.source;
          t1 = this._box_0;
          t1.listenerValueOrError = completeResult.then$1$1(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), null);
          t1.listenerHasError = false;
        }
      }
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: {
      "^": "Closure:51;originalSource",
      call$1: function(_) {
        return this.originalSource;
      }
    },
    _Future__propagateToListeners_handleValueCallback: {
      "^": "Closure:0;_box_0,listener,sourceResult",
      call$0: function() {
        var e, s, t1, t2, t3, t4, exception;
        try {
          t1 = this.listener;
          t2 = H.getTypeArgumentByIndex(t1, 0);
          t3 = H.assertSubtypeOfRuntimeType(this.sourceResult, t2);
          t4 = H.getTypeArgumentByIndex(t1, 1);
          this._box_0.listenerValueOrError = t1.result._zone.runUnary$2$2(H.functionTypeCheck(t1.callback, {func: 1, ret: {futureOr: 1, type: t4}, args: [t2]}), t3, {futureOr: 1, type: t4}, t2);
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          t1 = this._box_0;
          t1.listenerValueOrError = new P.AsyncError(e, s);
          t1.listenerHasError = true;
        }
      }
    },
    _Future__propagateToListeners_handleError: {
      "^": "Closure:0;_box_1,_box_0,listener",
      call$0: function() {
        var asyncError, e, s, t1, t2, exception, t3, t4;
        try {
          asyncError = H.interceptedTypeCheck(this._box_1.source._resultOrListeners, "$isAsyncError");
          t1 = this.listener;
          if (t1.matchesErrorTest$1(asyncError) && t1.errorCallback != null) {
            t2 = this._box_0;
            t2.listenerValueOrError = t1.handleError$1(asyncError);
            t2.listenerHasError = false;
          }
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          t1 = H.interceptedTypeCheck(this._box_1.source._resultOrListeners, "$isAsyncError");
          t2 = t1.error;
          t3 = e;
          t4 = this._box_0;
          if (t2 == null ? t3 == null : t2 === t3)
            t4.listenerValueOrError = t1;
          else
            t4.listenerValueOrError = new P.AsyncError(e, s);
          t4.listenerHasError = true;
        }
      }
    },
    _AsyncCallbackEntry: {
      "^": "Object;callback,0next"
    },
    Stream: {
      "^": "Object;$ti",
      fold$1$2: function(_, initialValue, combine, $S) {
        var t1, result;
        t1 = {};
        H.assertSubtypeOfRuntimeType(initialValue, $S);
        H.functionTypeCheck(combine, {func: 1, ret: $S, args: [$S, H.getRuntimeTypeArgument(this, "Stream", 0)]});
        result = new P._Future(0, $.Zone__current, [$S]);
        t1.value = initialValue;
        t1.subscription = null;
        t1.subscription = this.listen$4$cancelOnError$onDone$onError(new P.Stream_fold_closure(t1, this, combine, result, $S), true, new P.Stream_fold_closure0(t1, result), result.get$_completeError());
        return result;
      },
      get$length: function(_) {
        var t1, future;
        t1 = {};
        future = new P._Future(0, $.Zone__current, [P.int]);
        t1.count = 0;
        this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1, this), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
        return future;
      },
      get$isEmpty: function(_) {
        var t1, future;
        t1 = {};
        future = new P._Future(0, $.Zone__current, [P.bool]);
        t1.subscription = null;
        t1.subscription = this.listen$4$cancelOnError$onDone$onError(new P.Stream_isEmpty_closure(t1, this, future), true, new P.Stream_isEmpty_closure0(future), future.get$_completeError());
        return future;
      }
    },
    Stream_Stream$fromIterable_closure: {
      "^": "Closure;elements,T",
      call$0: function() {
        var t1 = this.elements;
        return new P._IterablePendingEvents(new J.ArrayIterator(t1, 1, 0, [H.getTypeArgumentByIndex(t1, 0)]), 0, [this.T]);
      },
      $signature: function() {
        return {func: 1, ret: [P._IterablePendingEvents, this.T]};
      }
    },
    Stream_fold_closure: {
      "^": "Closure;_box_0,$this,combine,result,S",
      call$1: function(element) {
        var t1, t2;
        t1 = this._box_0;
        t2 = this.S;
        P._runUserCode(new P.Stream_fold__closure(t1, this.combine, H.assertSubtypeOfRuntimeType(element, H.getRuntimeTypeArgument(this.$this, "Stream", 0)), t2), new P.Stream_fold__closure0(t1, t2), P._cancelAndErrorClosure(t1.subscription, this.result), t2);
      },
      $signature: function() {
        return {func: 1, ret: P.Null, args: [H.getRuntimeTypeArgument(this.$this, "Stream", 0)]};
      }
    },
    Stream_fold__closure: {
      "^": "Closure;_box_0,combine,element,S",
      call$0: function() {
        return this.combine.call$2(this._box_0.value, this.element);
      },
      $signature: function() {
        return {func: 1, ret: this.S};
      }
    },
    Stream_fold__closure0: {
      "^": "Closure;_box_0,S",
      call$1: function(newValue) {
        this._box_0.value = H.assertSubtypeOfRuntimeType(newValue, this.S);
      },
      $signature: function() {
        return {func: 1, ret: P.Null, args: [this.S]};
      }
    },
    Stream_fold_closure0: {
      "^": "Closure:1;_box_0,result",
      call$0: function() {
        this.result._complete$1(this._box_0.value);
      }
    },
    Stream_length_closure: {
      "^": "Closure;_box_0,$this",
      call$1: function(_) {
        H.assertSubtypeOfRuntimeType(_, H.getRuntimeTypeArgument(this.$this, "Stream", 0));
        ++this._box_0.count;
      },
      $signature: function() {
        return {func: 1, ret: P.Null, args: [H.getRuntimeTypeArgument(this.$this, "Stream", 0)]};
      }
    },
    Stream_length_closure0: {
      "^": "Closure:1;_box_0,future",
      call$0: function() {
        this.future._complete$1(this._box_0.count);
      }
    },
    Stream_isEmpty_closure: {
      "^": "Closure;_box_0,$this,future",
      call$1: function(_) {
        H.assertSubtypeOfRuntimeType(_, H.getRuntimeTypeArgument(this.$this, "Stream", 0));
        P._cancelAndValue(this._box_0.subscription, this.future, false);
      },
      $signature: function() {
        return {func: 1, ret: P.Null, args: [H.getRuntimeTypeArgument(this.$this, "Stream", 0)]};
      }
    },
    Stream_isEmpty_closure0: {
      "^": "Closure:1;future",
      call$0: function() {
        this.future._complete$1(true);
      }
    },
    StreamSubscription: {
      "^": "Object;$ti"
    },
    EventSink: {
      "^": "Object;$ti",
      $isSink: 1
    },
    StreamView: {
      "^": "Stream;$ti",
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        return this._async$_stream.listen$4$cancelOnError$onDone$onError(H.functionTypeCheck(onData, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0)]}), cancelOnError, H.functionTypeCheck(onDone, {func: 1, ret: -1}), onError);
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      },
      listen$2$onDone: function(onData, onDone) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, null);
      }
    },
    StreamTransformerBase: {
      "^": "Object;",
      $isStreamTransformer: 1
    },
    _StreamController: {
      "^": "Object;_state<,onPause,onResume,onCancel,$ti",
      set$onPause: function(_, onPause) {
        this.onPause = H.functionTypeCheck(onPause, {func: 1, ret: -1});
      },
      set$onResume: function(_, onResume) {
        this.onResume = H.functionTypeCheck(onResume, {func: 1, ret: -1});
      },
      set$onCancel: function(_, onCancel) {
        this.onCancel = H.functionTypeCheck(onCancel, {func: 1});
      },
      get$_pendingEvents: function() {
        if ((this._state & 8) === 0)
          return H.assertSubtype(this._varData, "$is_PendingEvents", this.$ti, "$as_PendingEvents");
        var t1 = this.$ti;
        return H.assertSubtype(H.assertSubtype(this._varData, "$is_StreamControllerAddStreamState", t1, "$as_StreamControllerAddStreamState").get$varData(), "$is_PendingEvents", t1, "$as_PendingEvents");
      },
      _ensurePendingEvents$0: function() {
        var t1, state;
        if ((this._state & 8) === 0) {
          t1 = this._varData;
          if (t1 == null) {
            t1 = new P._StreamImplEvents(0, this.$ti);
            this._varData = t1;
          }
          return H.assertSubtype(t1, "$is_StreamImplEvents", this.$ti, "$as_StreamImplEvents");
        }
        t1 = this.$ti;
        state = H.assertSubtype(this._varData, "$is_StreamControllerAddStreamState", t1, "$as_StreamControllerAddStreamState");
        state.get$varData();
        return H.assertSubtype(state.get$varData(), "$is_StreamImplEvents", t1, "$as_StreamImplEvents");
      },
      get$_subscription: function() {
        if ((this._state & 8) !== 0) {
          var t1 = this.$ti;
          return H.assertSubtype(H.assertSubtype(this._varData, "$is_StreamControllerAddStreamState", t1, "$as_StreamControllerAddStreamState").get$varData(), "$is_ControllerSubscription", t1, "$as_ControllerSubscription");
        }
        return H.assertSubtype(this._varData, "$is_ControllerSubscription", this.$ti, "$as_ControllerSubscription");
      },
      _badEventState$0: function() {
        if ((this._state & 4) !== 0)
          return new P.StateError("Cannot add event after closing");
        return new P.StateError("Cannot add event while adding a stream");
      },
      _ensureDoneFuture$0: function() {
        var t1 = this._doneFuture;
        if (t1 == null) {
          t1 = (this._state & 2) !== 0 ? $.$get$Future__nullFuture() : new P._Future(0, $.Zone__current, [null]);
          this._doneFuture = t1;
        }
        return t1;
      },
      add$1: [function(_, value) {
        var t1;
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0));
        t1 = this._state;
        if (t1 >= 4)
          throw H.wrapException(this._badEventState$0());
        if ((t1 & 1) !== 0)
          this._sendData$1(value);
        else if ((t1 & 3) === 0)
          this._ensurePendingEvents$0().add$1(0, new P._DelayedData(value, this.$ti));
      }, "call$1", "get$add", 5, 0, 3],
      addError$2: [function(error, stackTrace) {
        var t1;
        H.interceptedTypeCheck(stackTrace, "$isStackTrace");
        t1 = this._state;
        if (t1 >= 4)
          throw H.wrapException(this._badEventState$0());
        if (error == null)
          error = new P.NullThrownError();
        $.Zone__current.toString;
        if ((t1 & 1) !== 0)
          this._sendError$2(error, stackTrace);
        else if ((t1 & 3) === 0)
          this._ensurePendingEvents$0().add$1(0, new P._DelayedError(error, stackTrace));
      }, function(error) {
        return this.addError$2(error, null);
      }, "addError$1", "call$2", "call$1", "get$addError", 4, 2, 6],
      close$0: [function(_) {
        var t1 = this._state;
        if ((t1 & 4) !== 0)
          return this._ensureDoneFuture$0();
        if (t1 >= 4)
          throw H.wrapException(this._badEventState$0());
        t1 |= 4;
        this._state = t1;
        if ((t1 & 1) !== 0)
          this._sendDone$0();
        else if ((t1 & 3) === 0)
          this._ensurePendingEvents$0().add$1(0, C.C__DelayedDone);
        return this._ensureDoneFuture$0();
      }, "call$0", "get$close", 1, 0, 11],
      _add$1: function(_, value) {
        var t1;
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0));
        t1 = this._state;
        if ((t1 & 1) !== 0)
          this._sendData$1(value);
        else if ((t1 & 3) === 0)
          this._ensurePendingEvents$0().add$1(0, new P._DelayedData(value, this.$ti));
      },
      _addError$2: function(error, stackTrace) {
        var t1 = this._state;
        if ((t1 & 1) !== 0)
          this._sendError$2(error, stackTrace);
        else if ((t1 & 3) === 0)
          this._ensurePendingEvents$0().add$1(0, new P._DelayedError(error, stackTrace));
      },
      _subscribe$4: function(onData, onError, onDone, cancelOnError) {
        var t1, t2, t3, t4, subscription, pendingEvents, addState;
        t1 = H.getTypeArgumentByIndex(this, 0);
        H.functionTypeCheck(onData, {func: 1, ret: -1, args: [t1]});
        H.functionTypeCheck(onDone, {func: 1, ret: -1});
        if ((this._state & 3) !== 0)
          throw H.wrapException(P.StateError$("Stream has already been listened to."));
        t2 = $.Zone__current;
        t3 = cancelOnError ? 1 : 0;
        t4 = this.$ti;
        subscription = new P._ControllerSubscription(this, t2, t3, t4);
        subscription._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, t1);
        pendingEvents = this.get$_pendingEvents();
        t1 = this._state |= 1;
        if ((t1 & 8) !== 0) {
          addState = H.assertSubtype(this._varData, "$is_StreamControllerAddStreamState", t4, "$as_StreamControllerAddStreamState");
          addState.set$varData(subscription);
          addState.resume$0(0);
        } else
          this._varData = subscription;
        subscription._setPendingEvents$1(pendingEvents);
        subscription._guardCallback$1(new P._StreamController__subscribe_closure(this));
        return subscription;
      },
      _recordCancel$1: function(subscription) {
        var result, e, s, t1, exception, result0;
        t1 = this.$ti;
        H.assertSubtype(subscription, "$isStreamSubscription", t1, "$asStreamSubscription");
        result = null;
        if ((this._state & 8) !== 0)
          result = C.JSNull_methods.cancel$0(H.assertSubtype(this._varData, "$is_StreamControllerAddStreamState", t1, "$as_StreamControllerAddStreamState"));
        this._varData = null;
        this._state = this._state & 4294967286 | 2;
        t1 = this.onCancel;
        if (t1 != null)
          if (result == null)
            try {
              result = H.interceptedTypeCheck(this.onCancel.call$0(), "$isFuture");
            } catch (exception) {
              e = H.unwrapException(exception);
              s = H.getTraceFromException(exception);
              result0 = new P._Future(0, $.Zone__current, [null]);
              result0._asyncCompleteError$2(e, s);
              result = result0;
            }
          else
            result = result.whenComplete$1(t1);
        t1 = new P._StreamController__recordCancel_complete(this);
        if (result != null)
          result = result.whenComplete$1(t1);
        else
          t1.call$0();
        return result;
      },
      $isEventSink: 1,
      $isStreamController: 1,
      $is_StreamControllerLifecycle: 1,
      $is_EventSink: 1,
      $is_EventDispatch: 1,
      $isSink: 1
    },
    _StreamController__subscribe_closure: {
      "^": "Closure:1;$this",
      call$0: function() {
        P._runGuarded(this.$this.onListen);
      }
    },
    _StreamController__recordCancel_complete: {
      "^": "Closure:0;$this",
      call$0: function() {
        var t1 = this.$this._doneFuture;
        if (t1 != null && t1._state === 0)
          t1._asyncComplete$1(null);
      }
    },
    _AsyncStreamControllerDispatch: {
      "^": "Object;$ti",
      _sendData$1: function(data) {
        var t1 = H.getTypeArgumentByIndex(this, 0);
        H.assertSubtypeOfRuntimeType(data, t1);
        this.get$_subscription()._addPending$1(new P._DelayedData(data, [t1]));
      },
      _sendError$2: function(error, stackTrace) {
        this.get$_subscription()._addPending$1(new P._DelayedError(error, stackTrace));
      },
      _sendDone$0: function() {
        this.get$_subscription()._addPending$1(C.C__DelayedDone);
      }
    },
    _AsyncStreamController: {
      "^": "_StreamController+_AsyncStreamControllerDispatch;0_varData,_state,0_doneFuture,onListen,onPause,onResume,onCancel,$ti"
    },
    _ControllerStream: {
      "^": "_StreamImpl;_controller,$ti",
      _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
        return this._controller._subscribe$4(H.functionTypeCheck(onData, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0)]}), onError, H.functionTypeCheck(onDone, {func: 1, ret: -1}), cancelOnError);
      },
      get$hashCode: function(_) {
        return (H.Primitives_objectHashCode(this._controller) ^ 892482866) >>> 0;
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (this === other)
          return true;
        if (!(other instanceof P._ControllerStream))
          return false;
        return other._controller === this._controller;
      }
    },
    _ControllerSubscription: {
      "^": "_BufferingStreamSubscription;_controller,0_onData,0_onError,0_onDone,_zone,_state,0_cancelFuture,0_pending,$ti",
      _onCancel$0: function() {
        return this._controller._recordCancel$1(this);
      },
      _onPause$0: [function() {
        var t1, t2;
        t1 = this._controller;
        t2 = H.getTypeArgumentByIndex(t1, 0);
        H.assertSubtype(this, "$isStreamSubscription", [t2], "$asStreamSubscription");
        if ((t1._state & 8) !== 0)
          C.JSNull_methods.pause$0(H.assertSubtype(t1._varData, "$is_StreamControllerAddStreamState", [t2], "$as_StreamControllerAddStreamState"));
        P._runGuarded(t1.onPause);
      }, "call$0", "get$_onPause", 0, 0, 0],
      _onResume$0: [function() {
        var t1, t2;
        t1 = this._controller;
        t2 = H.getTypeArgumentByIndex(t1, 0);
        H.assertSubtype(this, "$isStreamSubscription", [t2], "$asStreamSubscription");
        if ((t1._state & 8) !== 0)
          C.JSNull_methods.resume$0(H.assertSubtype(t1._varData, "$is_StreamControllerAddStreamState", [t2], "$as_StreamControllerAddStreamState"));
        P._runGuarded(t1.onResume);
      }, "call$0", "get$_onResume", 0, 0, 0]
    },
    _StreamSinkWrapper: {
      "^": "Object;_async$_target,$ti",
      add$1: [function(_, data) {
        this._async$_target.add$1(0, H.assertSubtypeOfRuntimeType(data, H.getTypeArgumentByIndex(this, 0)));
      }, "call$1", "get$add", 5, 0, 3],
      addError$2: [function(error, stackTrace) {
        this._async$_target.addError$2(error, H.interceptedTypeCheck(stackTrace, "$isStackTrace"));
      }, function(error) {
        return this.addError$2(error, null);
      }, "addError$1", "call$2", "call$1", "get$addError", 4, 2, 6],
      close$0: [function(_) {
        return this._async$_target.close$0(0);
      }, "call$0", "get$close", 1, 0, 11],
      $isEventSink: 1,
      $isSink: 1
    },
    _BufferingStreamSubscription: {
      "^": "Object;0_onData,0_onError,0_onDone,_zone,_state<,0_cancelFuture,0_pending,$ti",
      set$_onData: function(_onData) {
        this._onData = H.functionTypeCheck(_onData, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(this, "_BufferingStreamSubscription", 0)]});
      },
      set$_onDone: function(_onDone) {
        this._onDone = H.functionTypeCheck(_onDone, {func: 1, ret: -1});
      },
      set$_pending: function(_pending) {
        this._pending = H.assertSubtype(_pending, "$is_PendingEvents", [H.getRuntimeTypeArgument(this, "_BufferingStreamSubscription", 0)], "$as_PendingEvents");
      },
      _BufferingStreamSubscription$4: function(onData, onError, onDone, cancelOnError, $T) {
        var t1, t2, handleError, handleDone;
        t1 = H.getRuntimeTypeArgument(this, "_BufferingStreamSubscription", 0);
        H.functionTypeCheck(onData, {func: 1, ret: -1, args: [t1]});
        t2 = this._zone;
        t2.toString;
        this.set$_onData(H.functionTypeCheck(onData, {func: 1, ret: null, args: [t1]}));
        handleError = onError == null ? P.async___nullErrorHandler$closure() : onError;
        if (H.functionTypeTest(handleError, {func: 1, ret: -1, args: [P.Object, P.StackTrace]}))
          this._onError = t2.registerBinaryCallback$3$1(handleError, null, P.Object, P.StackTrace);
        else if (H.functionTypeTest(handleError, {func: 1, ret: -1, args: [P.Object]}))
          this._onError = H.functionTypeCheck(handleError, {func: 1, ret: null, args: [P.Object]});
        else
          H.throwExpression(P.ArgumentError$("handleError callback must take either an Object (the error), or both an Object (the error) and a StackTrace."));
        H.functionTypeCheck(onDone, {func: 1, ret: -1});
        handleDone = onDone == null ? P.async___nullDoneHandler$closure() : onDone;
        this.set$_onDone(H.functionTypeCheck(handleDone, {func: 1, ret: -1}));
      },
      _setPendingEvents$1: function(pendingEvents) {
        H.assertSubtype(pendingEvents, "$is_PendingEvents", [H.getRuntimeTypeArgument(this, "_BufferingStreamSubscription", 0)], "$as_PendingEvents");
        if (pendingEvents == null)
          return;
        this.set$_pending(pendingEvents);
        if (!pendingEvents.get$isEmpty(pendingEvents)) {
          this._state = (this._state | 64) >>> 0;
          this._pending.schedule$1(this);
        }
      },
      pause$1: [function(_, resumeSignal) {
        var t1, t2, t3;
        t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        t2 = (t1 + 128 | 4) >>> 0;
        this._state = t2;
        if (t1 < 128 && this._pending != null) {
          t3 = this._pending;
          if (t3._state === 1)
            t3._state = 3;
        }
        if ((t1 & 4) === 0 && (t2 & 32) === 0)
          this._guardCallback$1(this.get$_onPause());
      }, function($receiver) {
        return this.pause$1($receiver, null);
      }, "pause$0", "call$1", "call$0", "get$pause", 1, 2, 52],
      resume$0: [function(_) {
        var t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        if (t1 >= 128) {
          t1 -= 128;
          this._state = t1;
          if (t1 < 128) {
            if ((t1 & 64) !== 0) {
              t1 = this._pending;
              t1 = !t1.get$isEmpty(t1);
            } else
              t1 = false;
            if (t1)
              this._pending.schedule$1(this);
            else {
              t1 = (this._state & 4294967291) >>> 0;
              this._state = t1;
              if ((t1 & 32) === 0)
                this._guardCallback$1(this.get$_onResume());
            }
          }
        }
      }, "call$0", "get$resume", 1, 0, 0],
      cancel$0: [function(_) {
        var t1 = (this._state & 4294967279) >>> 0;
        this._state = t1;
        if ((t1 & 8) === 0)
          this._cancel$0();
        t1 = this._cancelFuture;
        return t1 == null ? $.$get$Future__nullFuture() : t1;
      }, "call$0", "get$cancel", 1, 0, 11],
      _cancel$0: function() {
        var t1, t2;
        t1 = (this._state | 8) >>> 0;
        this._state = t1;
        if ((t1 & 64) !== 0) {
          t2 = this._pending;
          if (t2._state === 1)
            t2._state = 3;
        }
        if ((t1 & 32) === 0)
          this.set$_pending(null);
        this._cancelFuture = this._onCancel$0();
      },
      _add$1: ["super$_BufferingStreamSubscription$_add", function(_, data) {
        var t1, t2;
        t1 = H.getRuntimeTypeArgument(this, "_BufferingStreamSubscription", 0);
        H.assertSubtypeOfRuntimeType(data, t1);
        t2 = this._state;
        if ((t2 & 8) !== 0)
          return;
        if (t2 < 32)
          this._sendData$1(data);
        else
          this._addPending$1(new P._DelayedData(data, [t1]));
      }],
      _addError$2: ["super$_BufferingStreamSubscription$_addError", function(error, stackTrace) {
        var t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        if (t1 < 32)
          this._sendError$2(error, stackTrace);
        else
          this._addPending$1(new P._DelayedError(error, stackTrace));
      }],
      _close$0: ["super$_BufferingStreamSubscription$_close", function() {
        var t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        t1 = (t1 | 2) >>> 0;
        this._state = t1;
        if (t1 < 32)
          this._sendDone$0();
        else
          this._addPending$1(C.C__DelayedDone);
      }],
      _onPause$0: [function() {
      }, "call$0", "get$_onPause", 0, 0, 0],
      _onResume$0: [function() {
      }, "call$0", "get$_onResume", 0, 0, 0],
      _onCancel$0: function() {
        return;
      },
      _addPending$1: function($event) {
        var t1, pending;
        t1 = [H.getRuntimeTypeArgument(this, "_BufferingStreamSubscription", 0)];
        pending = H.assertSubtype(this._pending, "$is_StreamImplEvents", t1, "$as_StreamImplEvents");
        if (pending == null) {
          pending = new P._StreamImplEvents(0, t1);
          this.set$_pending(pending);
        }
        pending.add$1(0, $event);
        t1 = this._state;
        if ((t1 & 64) === 0) {
          t1 = (t1 | 64) >>> 0;
          this._state = t1;
          if (t1 < 128)
            this._pending.schedule$1(this);
        }
      },
      _sendData$1: function(data) {
        var t1, t2;
        t1 = H.getRuntimeTypeArgument(this, "_BufferingStreamSubscription", 0);
        H.assertSubtypeOfRuntimeType(data, t1);
        t2 = this._state;
        this._state = (t2 | 32) >>> 0;
        this._zone.runUnaryGuarded$1$2(this._onData, data, t1);
        this._state = (this._state & 4294967263) >>> 0;
        this._checkState$1((t2 & 4) !== 0);
      },
      _sendError$2: function(error, stackTrace) {
        var t1, t2;
        H.interceptedTypeCheck(stackTrace, "$isStackTrace");
        t1 = this._state;
        t2 = new P._BufferingStreamSubscription__sendError_sendError(this, error, stackTrace);
        if ((t1 & 1) !== 0) {
          this._state = (t1 | 16) >>> 0;
          this._cancel$0();
          t1 = this._cancelFuture;
          if (!!J.getInterceptor$(t1).$isFuture && t1 !== $.$get$Future__nullFuture())
            t1.whenComplete$1(t2);
          else
            t2.call$0();
        } else {
          t2.call$0();
          this._checkState$1((t1 & 4) !== 0);
        }
      },
      _sendDone$0: function() {
        var t1, t2;
        t1 = new P._BufferingStreamSubscription__sendDone_sendDone(this);
        this._cancel$0();
        this._state = (this._state | 16) >>> 0;
        t2 = this._cancelFuture;
        if (!!J.getInterceptor$(t2).$isFuture && t2 !== $.$get$Future__nullFuture())
          t2.whenComplete$1(t1);
        else
          t1.call$0();
      },
      _guardCallback$1: function(callback) {
        var t1;
        H.functionTypeCheck(callback, {func: 1, ret: -1});
        t1 = this._state;
        this._state = (t1 | 32) >>> 0;
        callback.call$0();
        this._state = (this._state & 4294967263) >>> 0;
        this._checkState$1((t1 & 4) !== 0);
      },
      _checkState$1: function(wasInputPaused) {
        var t1, isInputPaused;
        if ((this._state & 64) !== 0) {
          t1 = this._pending;
          t1 = t1.get$isEmpty(t1);
        } else
          t1 = false;
        if (t1) {
          t1 = (this._state & 4294967231) >>> 0;
          this._state = t1;
          if ((t1 & 4) !== 0)
            if (t1 < 128) {
              t1 = this._pending;
              t1 = t1 == null || t1.get$isEmpty(t1);
            } else
              t1 = false;
          else
            t1 = false;
          if (t1)
            this._state = (this._state & 4294967291) >>> 0;
        }
        for (; true; wasInputPaused = isInputPaused) {
          t1 = this._state;
          if ((t1 & 8) !== 0) {
            this.set$_pending(null);
            return;
          }
          isInputPaused = (t1 & 4) !== 0;
          if (wasInputPaused === isInputPaused)
            break;
          this._state = (t1 ^ 32) >>> 0;
          if (isInputPaused)
            this._onPause$0();
          else
            this._onResume$0();
          this._state = (this._state & 4294967263) >>> 0;
        }
        t1 = this._state;
        if ((t1 & 64) !== 0 && t1 < 128)
          this._pending.schedule$1(this);
      },
      $isStreamSubscription: 1,
      $is_EventSink: 1,
      $is_EventDispatch: 1,
      static: {
        _BufferingStreamSubscription$: function(onData, onError, onDone, cancelOnError, $T) {
          var t1, t2;
          t1 = $.Zone__current;
          t2 = cancelOnError ? 1 : 0;
          t2 = new P._BufferingStreamSubscription(t1, t2, [$T]);
          t2._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, $T);
          return t2;
        }
      }
    },
    _BufferingStreamSubscription__sendError_sendError: {
      "^": "Closure:0;$this,error,stackTrace",
      call$0: function() {
        var t1, t2, onError, t3, t4;
        t1 = this.$this;
        t2 = t1._state;
        if ((t2 & 8) !== 0 && (t2 & 16) === 0)
          return;
        t1._state = (t2 | 32) >>> 0;
        onError = t1._onError;
        t2 = this.error;
        t3 = P.Object;
        t4 = t1._zone;
        if (H.functionTypeTest(onError, {func: 1, ret: -1, args: [P.Object, P.StackTrace]}))
          t4.runBinaryGuarded$2$3(onError, t2, this.stackTrace, t3, P.StackTrace);
        else
          t4.runUnaryGuarded$1$2(H.functionTypeCheck(t1._onError, {func: 1, ret: -1, args: [P.Object]}), t2, t3);
        t1._state = (t1._state & 4294967263) >>> 0;
      }
    },
    _BufferingStreamSubscription__sendDone_sendDone: {
      "^": "Closure:0;$this",
      call$0: function() {
        var t1, t2;
        t1 = this.$this;
        t2 = t1._state;
        if ((t2 & 16) === 0)
          return;
        t1._state = (t2 | 42) >>> 0;
        t1._zone.runGuarded$1(t1._onDone);
        t1._state = (t1._state & 4294967263) >>> 0;
      }
    },
    _StreamImpl: {
      "^": "Stream;$ti",
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        return this._createSubscription$4(H.functionTypeCheck(onData, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0)]}), onError, H.functionTypeCheck(onDone, {func: 1, ret: -1}), true === cancelOnError);
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      },
      _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
        var t1 = H.getTypeArgumentByIndex(this, 0);
        return P._BufferingStreamSubscription$(H.functionTypeCheck(onData, {func: 1, ret: -1, args: [t1]}), onError, H.functionTypeCheck(onDone, {func: 1, ret: -1}), cancelOnError, t1);
      }
    },
    _GeneratedStreamImpl: {
      "^": "_StreamImpl;_pending,_isUsed,$ti",
      _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
        var t1 = H.getTypeArgumentByIndex(this, 0);
        H.functionTypeCheck(onData, {func: 1, ret: -1, args: [t1]});
        H.functionTypeCheck(onDone, {func: 1, ret: -1});
        if (this._isUsed)
          throw H.wrapException(P.StateError$("Stream has already been listened to."));
        this._isUsed = true;
        t1 = P._BufferingStreamSubscription$(onData, onError, onDone, cancelOnError, t1);
        t1._setPendingEvents$1(this._pending.call$0());
        return t1;
      }
    },
    _IterablePendingEvents: {
      "^": "_PendingEvents;_async$_iterator,_state,$ti",
      set$_async$_iterator: function(_iterator) {
        this._async$_iterator = H.assertSubtype(_iterator, "$isIterator", this.$ti, "$asIterator");
      },
      get$isEmpty: function(_) {
        return this._async$_iterator == null;
      },
      handleNext$1: function(dispatch) {
        var hasMore, e, s, t1, exception;
        H.assertSubtype(dispatch, "$is_EventDispatch", this.$ti, "$as_EventDispatch");
        t1 = this._async$_iterator;
        if (t1 == null)
          throw H.wrapException(P.StateError$("No events pending."));
        hasMore = null;
        try {
          hasMore = t1.moveNext$0();
          if (hasMore) {
            t1 = this._async$_iterator;
            dispatch._sendData$1(t1.get$current(t1));
          } else {
            this.set$_async$_iterator(null);
            dispatch._sendDone$0();
          }
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          if (hasMore == null) {
            this.set$_async$_iterator(C.C_EmptyIterator);
            dispatch._sendError$2(e, s);
          } else
            dispatch._sendError$2(e, s);
        }
      }
    },
    _DelayedEvent: {
      "^": "Object;0next>,$ti",
      set$next: function(_, next) {
        this.next = H.interceptedTypeCheck(next, "$is_DelayedEvent");
      }
    },
    _DelayedData: {
      "^": "_DelayedEvent;value>,0next,$ti",
      perform$1: function(dispatch) {
        H.assertSubtype(dispatch, "$is_EventDispatch", this.$ti, "$as_EventDispatch")._sendData$1(this.value);
      }
    },
    _DelayedError: {
      "^": "_DelayedEvent;error>,stackTrace<,0next",
      perform$1: function(dispatch) {
        dispatch._sendError$2(this.error, this.stackTrace);
      },
      $as_DelayedEvent: Isolate.functionThatReturnsNull
    },
    _DelayedDone: {
      "^": "Object;",
      perform$1: function(dispatch) {
        dispatch._sendDone$0();
      },
      get$next: function(_) {
        return;
      },
      set$next: function(_, _0) {
        throw H.wrapException(P.StateError$("No events after a done."));
      },
      $is_DelayedEvent: 1,
      $as_DelayedEvent: Isolate.functionThatReturnsNull
    },
    _PendingEvents: {
      "^": "Object;_state<,$ti",
      schedule$1: function(dispatch) {
        var t1;
        H.assertSubtype(dispatch, "$is_EventDispatch", this.$ti, "$as_EventDispatch");
        t1 = this._state;
        if (t1 === 1)
          return;
        if (t1 >= 1) {
          this._state = 1;
          return;
        }
        P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
        this._state = 1;
      }
    },
    _PendingEvents_schedule_closure: {
      "^": "Closure:1;$this,dispatch",
      call$0: function() {
        var t1, oldState;
        t1 = this.$this;
        oldState = t1._state;
        t1._state = 0;
        if (oldState === 3)
          return;
        t1.handleNext$1(this.dispatch);
      }
    },
    _StreamImplEvents: {
      "^": "_PendingEvents;0firstPendingEvent,0lastPendingEvent,_state,$ti",
      get$isEmpty: function(_) {
        return this.lastPendingEvent == null;
      },
      add$1: function(_, $event) {
        var t1 = this.lastPendingEvent;
        if (t1 == null) {
          this.lastPendingEvent = $event;
          this.firstPendingEvent = $event;
        } else {
          t1.set$next(0, $event);
          this.lastPendingEvent = $event;
        }
      },
      handleNext$1: function(dispatch) {
        var $event, t1;
        H.assertSubtype(dispatch, "$is_EventDispatch", this.$ti, "$as_EventDispatch");
        $event = this.firstPendingEvent;
        t1 = $event.get$next($event);
        this.firstPendingEvent = t1;
        if (t1 == null)
          this.lastPendingEvent = null;
        $event.perform$1(dispatch);
      }
    },
    _StreamIterator: {
      "^": "Object;0_subscription,_stateData,_isPaused,$ti"
    },
    _cancelAndError_closure: {
      "^": "Closure:0;future,error,stackTrace",
      call$0: function() {
        return this.future._completeError$2(this.error, this.stackTrace);
      }
    },
    _cancelAndErrorClosure_closure: {
      "^": "Closure:16;subscription,future",
      call$2: function(error, stackTrace) {
        P._cancelAndError(this.subscription, this.future, error, H.interceptedTypeCheck(stackTrace, "$isStackTrace"));
      }
    },
    _cancelAndValue_closure: {
      "^": "Closure:0;future,value",
      call$0: function() {
        return this.future._complete$1(this.value);
      }
    },
    _ForwardingStream: {
      "^": "Stream;$ti",
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        var t1, t2, t3;
        t1 = H.getRuntimeTypeArgument(this, "_ForwardingStream", 1);
        H.functionTypeCheck(onData, {func: 1, ret: -1, args: [t1]});
        H.functionTypeCheck(onDone, {func: 1, ret: -1});
        cancelOnError = true === cancelOnError;
        t2 = $.Zone__current;
        t3 = cancelOnError ? 1 : 0;
        t3 = new P._ForwardingStreamSubscription(this, t2, t3, [H.getRuntimeTypeArgument(this, "_ForwardingStream", 0), t1]);
        t3._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, t1);
        t3.set$_subscription(this._async$_source.listen$3$onDone$onError(t3.get$_handleData(), t3.get$_handleDone(), t3.get$_handleError()));
        return t3;
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      },
      listen$1: function(onData) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
      },
      _handleData$2: function(data, sink) {
        var t1;
        H.assertSubtypeOfRuntimeType(data, H.getRuntimeTypeArgument(this, "_ForwardingStream", 0));
        t1 = H.getRuntimeTypeArgument(this, "_ForwardingStream", 1);
        H.assertSubtype(sink, "$is_EventSink", [t1], "$as_EventSink")._add$1(0, H.assertSubtypeOfRuntimeType(data, t1));
      },
      _handleError$3: function(error, stackTrace, sink) {
        H.assertSubtype(sink, "$is_EventSink", [H.getRuntimeTypeArgument(this, "_ForwardingStream", 1)], "$as_EventSink")._addError$2(error, stackTrace);
      },
      $asStream: function($S, $T) {
        return [$T];
      }
    },
    _ForwardingStreamSubscription: {
      "^": "_BufferingStreamSubscription;_async$_stream,0_subscription,0_onData,0_onError,0_onDone,_zone,_state,0_cancelFuture,0_pending,$ti",
      set$_subscription: function(_subscription) {
        this._subscription = H.assertSubtype(_subscription, "$isStreamSubscription", [H.getTypeArgumentByIndex(this, 0)], "$asStreamSubscription");
      },
      _add$1: function(_, data) {
        H.assertSubtypeOfRuntimeType(data, H.getTypeArgumentByIndex(this, 1));
        if ((this._state & 2) !== 0)
          return;
        this.super$_BufferingStreamSubscription$_add(0, data);
      },
      _addError$2: function(error, stackTrace) {
        if ((this._state & 2) !== 0)
          return;
        this.super$_BufferingStreamSubscription$_addError(error, stackTrace);
      },
      _onPause$0: [function() {
        var t1 = this._subscription;
        if (t1 == null)
          return;
        t1.pause$0(0);
      }, "call$0", "get$_onPause", 0, 0, 0],
      _onResume$0: [function() {
        var t1 = this._subscription;
        if (t1 == null)
          return;
        t1.resume$0(0);
      }, "call$0", "get$_onResume", 0, 0, 0],
      _onCancel$0: function() {
        var t1 = this._subscription;
        if (t1 != null) {
          this.set$_subscription(null);
          return t1.cancel$0(0);
        }
        return;
      },
      _handleData$1: [function(data) {
        this._async$_stream._handleData$2(H.assertSubtypeOfRuntimeType(data, H.getTypeArgumentByIndex(this, 0)), this);
      }, "call$1", "get$_handleData", 4, 0, 3],
      _handleError$2: [function(error, stackTrace) {
        this._async$_stream._handleError$3(error, H.interceptedTypeCheck(stackTrace, "$isStackTrace"), this);
      }, "call$2", "get$_handleError", 8, 0, 20],
      _handleDone$0: [function() {
        H.assertSubtype(this, "$is_EventSink", [H.getRuntimeTypeArgument(this._async$_stream, "_ForwardingStream", 1)], "$as_EventSink")._close$0();
      }, "call$0", "get$_handleDone", 0, 0, 0],
      $asStreamSubscription: function($S, $T) {
        return [$T];
      },
      $as_EventSink: function($S, $T) {
        return [$T];
      },
      $as_EventDispatch: function($S, $T) {
        return [$T];
      },
      $as_BufferingStreamSubscription: function($S, $T) {
        return [$T];
      }
    },
    _MapStream: {
      "^": "_ForwardingStream;_transform,_async$_source,$ti",
      _handleData$2: function(inputEvent, sink) {
        var outputEvent, e, s, exception;
        H.assertSubtypeOfRuntimeType(inputEvent, H.getTypeArgumentByIndex(this, 0));
        H.assertSubtype(sink, "$is_EventSink", [H.getTypeArgumentByIndex(this, 1)], "$as_EventSink");
        outputEvent = null;
        try {
          outputEvent = this._transform.call$1(inputEvent);
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          P._addErrorWithReplacement(sink, e, s);
          return;
        }
        J._add$1$z(sink, outputEvent);
      }
    },
    _HandleErrorStream: {
      "^": "_ForwardingStream;_transform,_test,_async$_source,$ti",
      _handleError$3: function(error, stackTrace, sink) {
        var matches, e, s, exception, t1;
        H.assertSubtype(sink, "$is_EventSink", this.$ti, "$as_EventSink");
        matches = true;
        if (matches)
          try {
            P._invokeErrorHandler(this._transform, error, stackTrace);
          } catch (exception) {
            e = H.unwrapException(exception);
            s = H.getTraceFromException(exception);
            t1 = e;
            if (t1 == null ? error == null : t1 === error)
              sink._addError$2(error, stackTrace);
            else
              P._addErrorWithReplacement(sink, e, s);
            return;
          }
        else
          sink._addError$2(error, stackTrace);
      },
      $asStream: null,
      $as_ForwardingStream: function($T) {
        return [$T, $T];
      }
    },
    _EventSinkWrapper: {
      "^": "Object;_sink,$ti",
      add$1: function(_, data) {
        var t1 = this._sink;
        data = H.assertSubtypeOfRuntimeType(H.assertSubtypeOfRuntimeType(data, H.getTypeArgumentByIndex(this, 0)), H.getTypeArgumentByIndex(t1, 1));
        if ((t1._state & 2) !== 0)
          H.throwExpression(P.StateError$("Stream is already closed"));
        t1.super$_BufferingStreamSubscription$_add(0, data);
      },
      addError$2: function(error, stackTrace) {
        var t1 = this._sink;
        if ((t1._state & 2) !== 0)
          H.throwExpression(P.StateError$("Stream is already closed"));
        t1.super$_BufferingStreamSubscription$_addError(error, stackTrace);
      },
      close$0: function(_) {
        var t1 = this._sink;
        if ((t1._state & 2) !== 0)
          H.throwExpression(P.StateError$("Stream is already closed"));
        t1.super$_BufferingStreamSubscription$_close();
      },
      $isEventSink: 1,
      $isSink: 1
    },
    _SinkTransformerStreamSubscription: {
      "^": "_BufferingStreamSubscription;0_transformerSink,0_subscription,0_onData,0_onError,0_onDone,_zone,_state,0_cancelFuture,0_pending,$ti",
      set$_transformerSink: function(_transformerSink) {
        this._transformerSink = H.assertSubtype(_transformerSink, "$isEventSink", [H.getTypeArgumentByIndex(this, 0)], "$asEventSink");
      },
      set$_subscription: function(_subscription) {
        this._subscription = H.assertSubtype(_subscription, "$isStreamSubscription", [H.getTypeArgumentByIndex(this, 0)], "$asStreamSubscription");
      },
      _add$1: function(_, data) {
        H.assertSubtypeOfRuntimeType(data, H.getTypeArgumentByIndex(this, 1));
        if ((this._state & 2) !== 0)
          throw H.wrapException(P.StateError$("Stream is already closed"));
        this.super$_BufferingStreamSubscription$_add(0, data);
      },
      _addError$2: function(error, stackTrace) {
        H.interceptedTypeCheck(stackTrace, "$isStackTrace");
        if ((this._state & 2) !== 0)
          throw H.wrapException(P.StateError$("Stream is already closed"));
        this.super$_BufferingStreamSubscription$_addError(error, stackTrace);
      },
      _onPause$0: [function() {
        var t1 = this._subscription;
        if (t1 != null)
          t1.pause$0(0);
      }, "call$0", "get$_onPause", 0, 0, 0],
      _onResume$0: [function() {
        var t1 = this._subscription;
        if (t1 != null)
          t1.resume$0(0);
      }, "call$0", "get$_onResume", 0, 0, 0],
      _onCancel$0: function() {
        var t1 = this._subscription;
        if (t1 != null) {
          this.set$_subscription(null);
          return t1.cancel$0(0);
        }
        return;
      },
      _handleData$1: [function(data) {
        var e, s, exception, t1;
        H.assertSubtypeOfRuntimeType(data, H.getTypeArgumentByIndex(this, 0));
        try {
          this._transformerSink.add$1(0, data);
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          t1 = H.interceptedTypeCheck(s, "$isStackTrace");
          if ((this._state & 2) !== 0)
            H.throwExpression(P.StateError$("Stream is already closed"));
          this.super$_BufferingStreamSubscription$_addError(e, t1);
        }
      }, "call$1", "get$_handleData", 4, 0, 3],
      _handleError$2: [function(error, stackTrace) {
        var e, s, exception, t1;
        try {
          this._transformerSink.addError$2(error, H.interceptedTypeCheck(stackTrace, "$isStackTrace"));
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          t1 = e;
          if (t1 == null ? error == null : t1 === error) {
            H.interceptedTypeCheck(stackTrace, "$isStackTrace");
            if ((this._state & 2) !== 0)
              H.throwExpression(P.StateError$("Stream is already closed"));
            this.super$_BufferingStreamSubscription$_addError(error, stackTrace);
          } else {
            t1 = H.interceptedTypeCheck(s, "$isStackTrace");
            if ((this._state & 2) !== 0)
              H.throwExpression(P.StateError$("Stream is already closed"));
            this.super$_BufferingStreamSubscription$_addError(e, t1);
          }
        }
      }, function(error) {
        return this._handleError$2(error, null);
      }, "_handleError$1", "call$2", "call$1", "get$_handleError", 4, 2, 21],
      _handleDone$0: [function() {
        var e, s, exception, t1;
        try {
          this.set$_subscription(null);
          this._transformerSink.close$0(0);
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          t1 = H.interceptedTypeCheck(s, "$isStackTrace");
          if ((this._state & 2) !== 0)
            H.throwExpression(P.StateError$("Stream is already closed"));
          this.super$_BufferingStreamSubscription$_addError(e, t1);
        }
      }, "call$0", "get$_handleDone", 0, 0, 0],
      $asStreamSubscription: function($S, $T) {
        return [$T];
      },
      $as_EventSink: function($S, $T) {
        return [$T];
      },
      $as_EventDispatch: function($S, $T) {
        return [$T];
      },
      $as_BufferingStreamSubscription: function($S, $T) {
        return [$T];
      }
    },
    _StreamSinkTransformer: {
      "^": "StreamTransformerBase;$ti",
      bind$1: ["super$_StreamSinkTransformer$bind", function(stream) {
        return new P._BoundSinkStream(this._sinkMapper, H.assertSubtype(stream, "$isStream", [H.getTypeArgumentByIndex(this, 0)], "$asStream"), this.$ti);
      }]
    },
    _BoundSinkStream: {
      "^": "Stream;_sinkMapper,_async$_stream,$ti",
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        var t1, t2, t3, subscription;
        t1 = H.getTypeArgumentByIndex(this, 1);
        H.functionTypeCheck(onData, {func: 1, ret: -1, args: [t1]});
        H.functionTypeCheck(onDone, {func: 1, ret: -1});
        cancelOnError = true === cancelOnError;
        t2 = $.Zone__current;
        t3 = cancelOnError ? 1 : 0;
        subscription = new P._SinkTransformerStreamSubscription(t2, t3, this.$ti);
        subscription._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, t1);
        subscription.set$_transformerSink(this._sinkMapper.call$1(new P._EventSinkWrapper(subscription, [t1])));
        subscription.set$_subscription(this._async$_stream.listen$3$onDone$onError(subscription.get$_handleData(), subscription.get$_handleDone(), subscription.get$_handleError()));
        return subscription;
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      },
      $asStream: function($S, $T) {
        return [$T];
      }
    },
    _HandlerEventSink: {
      "^": "Object;_handleData,_handleError,_handleDone,_sink,$ti",
      set$_sink: function(_sink) {
        this._sink = H.assertSubtype(_sink, "$isEventSink", [H.getTypeArgumentByIndex(this, 1)], "$asEventSink");
      },
      _reportClosedSink$0: function() {
        H.printString("Sink is closed and adding to it is an error.");
        H.printString("  See http://dartbug.com/29554.");
        H.printString(J.toString$0$(P.StackTrace_current()));
      },
      add$1: function(_, data) {
        H.assertSubtypeOfRuntimeType(data, H.getTypeArgumentByIndex(this, 0));
        if (this._sink == null)
          this._reportClosedSink$0();
        this._handleData.call$2(data, this._sink);
      },
      addError$2: function(error, stackTrace) {
        var t1;
        if (this._sink == null)
          this._reportClosedSink$0();
        t1 = this._sink._sink;
        if ((t1._state & 2) !== 0)
          H.throwExpression(P.StateError$("Stream is already closed"));
        t1.super$_BufferingStreamSubscription$_addError(error, stackTrace);
      },
      close$0: function(_) {
        var t1 = this._sink;
        if (t1 == null)
          return;
        this.set$_sink(null);
        t1 = t1._sink;
        if ((t1._state & 2) !== 0)
          H.throwExpression(P.StateError$("Stream is already closed"));
        t1.super$_BufferingStreamSubscription$_close();
      },
      $isEventSink: 1,
      $asEventSink: function($S, $T) {
        return [$S];
      },
      $isSink: 1,
      $asSink: function($S, $T) {
        return [$S];
      }
    },
    _StreamHandlerTransformer: {
      "^": "_StreamSinkTransformer;_sinkMapper,$ti",
      bind$1: function(stream) {
        return this.super$_StreamSinkTransformer$bind(H.assertSubtype(stream, "$isStream", [H.getTypeArgumentByIndex(this, 0)], "$asStream"));
      },
      static: {
        _StreamHandlerTransformer$: function(handleData, handleDone, handleError, $S, $T) {
          return new P._StreamHandlerTransformer(new P._StreamHandlerTransformer_closure(handleData, handleError, handleDone, $T, $S), [$S, $T]);
        }
      }
    },
    _StreamHandlerTransformer_closure: {
      "^": "Closure;handleData,handleError,handleDone,T,S",
      call$1: function(outputSink) {
        var t1 = this.T;
        H.assertSubtype(outputSink, "$isEventSink", [t1], "$asEventSink");
        return new P._HandlerEventSink(this.handleData, this.handleError, this.handleDone, outputSink, [this.S, t1]);
      },
      $signature: function() {
        var t1 = this.T;
        return {func: 1, ret: [P._HandlerEventSink, this.S, t1], args: [[P.EventSink, t1]]};
      }
    },
    AsyncError: {
      "^": "Object;error>,stackTrace<",
      toString$0: function(_) {
        return H.S(this.error);
      },
      $isError: 1
    },
    _Zone: {
      "^": "Object;",
      $isZone: 1
    },
    _rootHandleUncaughtError_closure: {
      "^": "Closure:1;_box_0,stackTrace",
      call$0: function() {
        var t1, t2, error;
        t1 = this._box_0;
        t2 = t1.error;
        if (t2 == null) {
          error = new P.NullThrownError();
          t1.error = error;
          t1 = error;
        } else
          t1 = t2;
        t2 = this.stackTrace;
        if (t2 == null)
          throw H.wrapException(t1);
        error = H.wrapException(t1);
        error.stack = t2.toString$0(0);
        throw error;
      }
    },
    _RootZone: {
      "^": "_Zone;",
      runGuarded$1: function(f) {
        var e, s, exception;
        H.functionTypeCheck(f, {func: 1, ret: -1});
        try {
          if (C.C__RootZone === $.Zone__current) {
            f.call$0();
            return;
          }
          P._rootRun(null, null, this, f, -1);
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          P._rootHandleUncaughtError(null, null, this, e, H.interceptedTypeCheck(s, "$isStackTrace"));
        }
      },
      runUnaryGuarded$1$2: function(f, arg, $T) {
        var e, s, exception;
        H.functionTypeCheck(f, {func: 1, ret: -1, args: [$T]});
        H.assertSubtypeOfRuntimeType(arg, $T);
        try {
          if (C.C__RootZone === $.Zone__current) {
            f.call$1(arg);
            return;
          }
          P._rootRunUnary(null, null, this, f, arg, -1, $T);
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          P._rootHandleUncaughtError(null, null, this, e, H.interceptedTypeCheck(s, "$isStackTrace"));
        }
      },
      runBinaryGuarded$2$3: function(f, arg1, arg2, T1, T2) {
        var e, s, exception;
        H.functionTypeCheck(f, {func: 1, ret: -1, args: [T1, T2]});
        H.assertSubtypeOfRuntimeType(arg1, T1);
        H.assertSubtypeOfRuntimeType(arg2, T2);
        try {
          if (C.C__RootZone === $.Zone__current) {
            f.call$2(arg1, arg2);
            return;
          }
          P._rootRunBinary(null, null, this, f, arg1, arg2, -1, T1, T2);
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          P._rootHandleUncaughtError(null, null, this, e, H.interceptedTypeCheck(s, "$isStackTrace"));
        }
      },
      bindCallback$1$1: function(f, $R) {
        return new P._RootZone_bindCallback_closure(this, H.functionTypeCheck(f, {func: 1, ret: $R}), $R);
      },
      bindCallbackGuarded$1: function(f) {
        return new P._RootZone_bindCallbackGuarded_closure(this, H.functionTypeCheck(f, {func: 1, ret: -1}));
      },
      bindUnaryCallbackGuarded$1$1: function(f, $T) {
        return new P._RootZone_bindUnaryCallbackGuarded_closure(this, H.functionTypeCheck(f, {func: 1, ret: -1, args: [$T]}), $T);
      },
      $index: function(_, key) {
        return;
      },
      run$1$1: function(f, $R) {
        H.functionTypeCheck(f, {func: 1, ret: $R});
        if ($.Zone__current === C.C__RootZone)
          return f.call$0();
        return P._rootRun(null, null, this, f, $R);
      },
      runUnary$2$2: function(f, arg, $R, $T) {
        H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
        H.assertSubtypeOfRuntimeType(arg, $T);
        if ($.Zone__current === C.C__RootZone)
          return f.call$1(arg);
        return P._rootRunUnary(null, null, this, f, arg, $R, $T);
      },
      runBinary$3$3: function(f, arg1, arg2, $R, T1, T2) {
        H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
        H.assertSubtypeOfRuntimeType(arg1, T1);
        H.assertSubtypeOfRuntimeType(arg2, T2);
        if ($.Zone__current === C.C__RootZone)
          return f.call$2(arg1, arg2);
        return P._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
      },
      registerBinaryCallback$3$1: function(f, $R, T1, T2) {
        return H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
      }
    },
    _RootZone_bindCallback_closure: {
      "^": "Closure;$this,f,R",
      call$0: function() {
        return this.$this.run$1$1(this.f, this.R);
      },
      $signature: function() {
        return {func: 1, ret: this.R};
      }
    },
    _RootZone_bindCallbackGuarded_closure: {
      "^": "Closure:0;$this,f",
      call$0: function() {
        return this.$this.runGuarded$1(this.f);
      }
    },
    _RootZone_bindUnaryCallbackGuarded_closure: {
      "^": "Closure;$this,f,T",
      call$1: function(arg) {
        var t1 = this.T;
        return this.$this.runUnaryGuarded$1$2(this.f, H.assertSubtypeOfRuntimeType(arg, t1), t1);
      },
      $signature: function() {
        return {func: 1, ret: -1, args: [this.T]};
      }
    }
  }], ["dart.collection", "dart:collection",, P, {
    "^": "",
    LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
      return new H.JsLinkedHashMap(0, 0, [$K, $V]);
    },
    LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
      return new H.JsLinkedHashMap(0, 0, [$K, $V]);
    },
    LinkedHashMap__makeEmpty: function() {
      return new H.JsLinkedHashMap(0, 0, [null, null]);
    },
    IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (P._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = [];
      t1 = $.$get$_toStringVisiting();
      C.JSArray_methods.add$1(t1, iterable);
      try {
        P._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      }
      t1 = P.StringBuffer__writeAll(leftDelimiter, H.listSuperNativeTypeCheck(parts, "$isIterable"), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1, t2;
      if (P._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new P.StringBuffer(leftDelimiter);
      t1 = $.$get$_toStringVisiting();
      C.JSArray_methods.add$1(t1, iterable);
      try {
        t2 = buffer;
        t2._contents = P.StringBuffer__writeAll(t2.get$_contents(), iterable, ", ");
      } finally {
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      }
      t1 = buffer;
      t1._contents = t1.get$_contents() + rightDelimiter;
      t1 = buffer.get$_contents();
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting: function(o) {
      var i, t1;
      for (i = 0; t1 = $.$get$_toStringVisiting(), i < t1.length; ++i)
        if (o === t1[i])
          return true;
      return false;
    },
    _iterablePartsToStrings: function(iterable, parts) {
      var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
      it = iterable.get$iterator(iterable);
      $length = 0;
      count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = H.S(it.get$current(it));
        C.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current(it);
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            C.JSArray_methods.add$1(parts, H.S(penultimate));
            return;
          }
          ultimateString = H.S(penultimate);
          if (0 >= parts.length)
            return H.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current(it);
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current(it);
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return H.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              C.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = H.S(penultimate);
          ultimateString = H.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        C.JSArray_methods.add$1(parts, elision);
      C.JSArray_methods.add$1(parts, penultimateString);
      C.JSArray_methods.add$1(parts, ultimateString);
    },
    LinkedHashMap_LinkedHashMap$from: function(other, $K, $V) {
      var result = P.LinkedHashMap_LinkedHashMap(null, null, null, $K, $V);
      other.forEach$1(0, new P.LinkedHashMap_LinkedHashMap$from_closure(result, $K, $V));
      return result;
    },
    MapBase_mapToString: function(m) {
      var t1, result, t2;
      t1 = {};
      if (P._isToStringVisiting(m))
        return "{...}";
      result = new P.StringBuffer("");
      try {
        C.JSArray_methods.add$1($.$get$_toStringVisiting(), m);
        t2 = result;
        t2._contents = t2.get$_contents() + "{";
        t1.first = true;
        J.forEach$1$ax(m, new P.MapBase_mapToString_closure(t1, result));
        t1 = result;
        t1._contents = t1.get$_contents() + "}";
      } finally {
        t1 = $.$get$_toStringVisiting();
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      }
      t1 = result.get$_contents();
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase: {
      "^": "Iterable;"
    },
    LinkedHashMap_LinkedHashMap$from_closure: {
      "^": "Closure:5;result,K,V",
      call$2: function(k, v) {
        this.result.$indexSet(0, H.assertSubtypeOfRuntimeType(k, this.K), H.assertSubtypeOfRuntimeType(v, this.V));
      }
    },
    ListBase: {
      "^": "_ListBase_Object_ListMixin;",
      $isEfficientLengthIterable: 1,
      $isIterable: 1,
      $isList: 1
    },
    ListMixin: {
      "^": "Object;$ti",
      get$iterator: function(receiver) {
        return new H.ListIterator(receiver, this.get$length(receiver), 0, [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0)]);
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      get$isEmpty: function(receiver) {
        return this.get$length(receiver) === 0;
      },
      skip$1: function(receiver, count) {
        return H.SubListIterable$(receiver, count, null, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0));
      },
      add$1: function(receiver, element) {
        var t1;
        H.assertSubtypeOfRuntimeType(element, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0));
        t1 = this.get$length(receiver);
        this.set$length(receiver, t1 + 1);
        this.$indexSet(receiver, t1, element);
      },
      addAll$1: function(receiver, iterable) {
        var i, t1, element, i0;
        H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0)], "$asIterable");
        i = this.get$length(receiver);
        for (t1 = iterable._wrappedList, t1 = new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0(); i = i0) {
          element = t1._current;
          i0 = i + 1;
          this.set$length(receiver, i0);
          this.$indexSet(receiver, i, element);
        }
      },
      setRange$4: ["super$ListMixin$setRange", function(receiver, start, end, iterable, skipCount) {
        var t1, $length, otherStart, otherList, i;
        t1 = H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0);
        H.assertSubtype(iterable, "$isIterable", [t1], "$asIterable");
        P.RangeError_checkValidRange(start, end, this.get$length(receiver), null, null, null);
        $length = end - start;
        if ($length === 0)
          return;
        if (typeof skipCount !== "number")
          return skipCount.$lt();
        if (skipCount < 0)
          H.throwExpression(P.RangeError$range(skipCount, 0, null, "skipCount", null));
        if (H.checkSubtype(iterable, "$isList", [t1], "$asList")) {
          otherStart = skipCount;
          otherList = iterable;
        } else {
          otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
          otherStart = 0;
        }
        t1 = J.getInterceptor$asx(otherList);
        if (otherStart + $length > t1.get$length(otherList))
          throw H.wrapException(H.IterableElementError_tooFew());
        if (otherStart < start)
          for (i = $length - 1; i >= 0; --i)
            this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
        else
          for (i = 0; i < $length; ++i)
            this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
      }],
      toString$0: function(receiver) {
        return P.IterableBase_iterableToFullString(receiver, "[", "]");
      }
    },
    MapBase: {
      "^": "MapMixin;"
    },
    MapBase_mapToString_closure: {
      "^": "Closure:5;_box_0,result",
      call$2: function(k, v) {
        var t1, t2;
        t1 = this._box_0;
        if (!t1.first)
          this.result._contents += ", ";
        t1.first = false;
        t1 = this.result;
        t2 = t1._contents += H.S(k);
        t1._contents = t2 + ": ";
        t1._contents += H.S(v);
      }
    },
    MapMixin: {
      "^": "Object;$ti",
      forEach$1: function(receiver, action) {
        var t1, key;
        H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getRuntimeTypeArgumentIntercepted(this, receiver, "MapMixin", 0), H.getRuntimeTypeArgumentIntercepted(this, receiver, "MapMixin", 1)]});
        for (t1 = J.get$iterator$ax(this.get$keys(receiver)); t1.moveNext$0();) {
          key = t1.get$current(t1);
          action.call$2(key, this.$index(receiver, key));
        }
      },
      get$entries: function(receiver) {
        return J.map$1$1$ax(this.get$keys(receiver), new P.MapMixin_entries_closure(receiver), [P.MapEntry, H.getRuntimeTypeArgumentIntercepted(this, receiver, "MapMixin", 0), H.getRuntimeTypeArgumentIntercepted(this, receiver, "MapMixin", 1)]);
      },
      get$length: function(receiver) {
        return J.get$length$asx(this.get$keys(receiver));
      },
      get$isEmpty: function(receiver) {
        return J.get$isEmpty$asx(this.get$keys(receiver));
      },
      toString$0: function(receiver) {
        return P.MapBase_mapToString(receiver);
      },
      $isMap: 1
    },
    MapMixin_entries_closure: {
      "^": "Closure;$this",
      call$1: function(key) {
        var t1, t2, t3;
        t1 = this.$this;
        t2 = J.getInterceptor$(t1);
        t3 = H.getRuntimeTypeArgumentIntercepted(t2, t1, "MapMixin", 0);
        H.assertSubtypeOfRuntimeType(key, t3);
        return new P.MapEntry(key, t2.$index(t1, key), [t3, H.getRuntimeTypeArgumentIntercepted(t2, t1, "MapMixin", 1)]);
      },
      $signature: function() {
        var t1, t2, t3;
        t1 = this.$this;
        t2 = J.getInterceptor$(t1);
        t3 = H.getRuntimeTypeArgumentIntercepted(t2, t1, "MapMixin", 0);
        return {func: 1, ret: [P.MapEntry, t3, H.getRuntimeTypeArgumentIntercepted(t2, t1, "MapMixin", 1)], args: [t3]};
      }
    },
    _UnmodifiableMapMixin: {
      "^": "Object;$ti"
    },
    MapView: {
      "^": "Object;$ti",
      $index: function(_, key) {
        return this._collection$_map.$index(0, key);
      },
      forEach$1: function(_, action) {
        this._collection$_map.forEach$1(0, H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)]}));
      },
      get$isEmpty: function(_) {
        var t1 = this._collection$_map;
        return t1.get$isEmpty(t1);
      },
      get$length: function(_) {
        var t1 = this._collection$_map;
        return t1.get$length(t1);
      },
      get$keys: function(_) {
        var t1 = this._collection$_map;
        return t1.get$keys(t1);
      },
      toString$0: function(_) {
        return P.MapBase_mapToString(this._collection$_map);
      },
      get$entries: function(_) {
        var t1 = this._collection$_map;
        return t1.get$entries(t1);
      },
      $isMap: 1
    },
    UnmodifiableMapView: {
      "^": "_UnmodifiableMapView_MapView__UnmodifiableMapMixin;$ti"
    },
    _ListBase_Object_ListMixin: {
      "^": "Object+ListMixin;"
    },
    _UnmodifiableMapView_MapView__UnmodifiableMapMixin: {
      "^": "MapView+_UnmodifiableMapMixin;$ti"
    }
  }], ["dart.convert", "dart:convert",, P, {
    "^": "",
    ByteConversionSink: {
      "^": "ChunkedConversionSink;",
      $asChunkedConversionSink: function() {
        return [[P.List, P.int]];
      },
      $asSink: function() {
        return [[P.List, P.int]];
      }
    },
    ByteConversionSinkBase: {
      "^": "ByteConversionSink;"
    },
    _ByteAdapterSink: {
      "^": "ByteConversionSinkBase;_convert$_sink"
    },
    ChunkedConversionSink: {
      "^": "Object;$ti",
      $isSink: 1
    },
    _ConverterStreamEventSink: {
      "^": "Object;_eventSink,_chunkedSink,$ti",
      add$1: function(_, o) {
        this._chunkedSink.add$1(0, H.assertSubtypeOfRuntimeType(o, H.getTypeArgumentByIndex(this, 0)));
      },
      addError$2: function(error, stackTrace) {
        var t1 = this._eventSink._sink;
        if ((t1._state & 2) !== 0)
          H.throwExpression(P.StateError$("Stream is already closed"));
        t1.super$_BufferingStreamSubscription$_addError(error, stackTrace);
      },
      close$0: function(_) {
        this._chunkedSink.close$0(0);
      },
      $isEventSink: 1,
      $asEventSink: function($S, $T) {
        return [$S];
      },
      $isSink: 1,
      $asSink: function($S, $T) {
        return [$S];
      }
    },
    Converter: {
      "^": "StreamTransformerBase;$ti",
      startChunkedConversion$1: function(sink) {
        H.assertSubtype(sink, "$isSink", [H.getRuntimeTypeArgument(this, "Converter", 1)], "$asSink");
        throw H.wrapException(P.UnsupportedError$("This converter does not support chunked conversions: " + this.toString$0(0)));
      },
      bind$1: function(stream) {
        return new P._BoundSinkStream(new P.Converter_bind_closure(this), H.assertSubtype(stream, "$isStream", [H.getRuntimeTypeArgument(this, "Converter", 0)], "$asStream"), [null, H.getRuntimeTypeArgument(this, "Converter", 1)]);
      }
    },
    Converter_bind_closure: {
      "^": "Closure:22;$this",
      call$1: function(sink) {
        return new P._ConverterStreamEventSink(sink, this.$this.startChunkedConversion$1(sink), [null, null]);
      }
    },
    StringConversionSinkBase: {
      "^": "StringConversionSinkMixin;"
    },
    StringConversionSinkMixin: {
      "^": "Object;",
      add$1: function(_, str) {
        H.stringTypeCheck(str);
        this.addSlice$4(str, 0, str.length, false);
      },
      $isStringConversionSink: 1,
      $isSink: 1,
      $asSink: function() {
        return [P.String];
      }
    },
    _StringAdapterSink: {
      "^": "StringConversionSinkBase;_convert$_sink",
      addSlice$4: function(str, start, end, isLast) {
        var t1, t2, t3;
        t1 = start === 0 && end === str.length;
        t2 = this._convert$_sink;
        t3 = H.getTypeArgumentByIndex(t2, 0);
        t2 = t2._sink;
        if (t1) {
          str = H.assertSubtypeOfRuntimeType(H.assertSubtypeOfRuntimeType(str, t3), H.getTypeArgumentByIndex(t2, 1));
          if ((t2._state & 2) !== 0)
            H.throwExpression(P.StateError$("Stream is already closed"));
          t2.super$_BufferingStreamSubscription$_add(0, str);
        } else {
          t1 = H.assertSubtypeOfRuntimeType(H.assertSubtypeOfRuntimeType(J.substring$2$s(str, start, end), t3), H.getTypeArgumentByIndex(t2, 1));
          if ((t2._state & 2) !== 0)
            H.throwExpression(P.StateError$("Stream is already closed"));
          t2.super$_BufferingStreamSubscription$_add(0, t1);
        }
        if (isLast) {
          if ((t2._state & 2) !== 0)
            H.throwExpression(P.StateError$("Stream is already closed"));
          t2.super$_BufferingStreamSubscription$_close();
        }
      },
      close$0: function(_) {
        var t1 = this._convert$_sink._sink;
        if ((t1._state & 2) !== 0)
          H.throwExpression(P.StateError$("Stream is already closed"));
        t1.super$_BufferingStreamSubscription$_close();
      }
    },
    _Utf8ConversionSink: {
      "^": "ByteConversionSink;_decoder,_chunkedSink,_convert$_buffer",
      close$0: function(_) {
        var t1, t2, t3, accumulated;
        this._decoder.flush$0(0);
        t1 = this._convert$_buffer;
        t2 = t1._contents;
        t3 = this._chunkedSink;
        if (t2.length !== 0) {
          accumulated = t2.charCodeAt(0) == 0 ? t2 : t2;
          t1._contents = "";
          t3.addSlice$4(accumulated, 0, accumulated.length, true);
        } else
          t3.close$0(0);
      },
      add$1: function(_, chunk) {
        H.assertSubtype(chunk, "$isList", [P.int], "$asList");
        this.addSlice$4(chunk, 0, J.get$length$asx(chunk), false);
      },
      addSlice$4: function(chunk, startIndex, endIndex, isLast) {
        var t1, t2, accumulated;
        this._decoder.convert$3(H.assertSubtype(chunk, "$isList", [P.int], "$asList"), startIndex, endIndex);
        t1 = this._convert$_buffer;
        t2 = t1._contents;
        if (t2.length !== 0) {
          accumulated = t2.charCodeAt(0) == 0 ? t2 : t2;
          this._chunkedSink.addSlice$4(accumulated, 0, accumulated.length, false);
          t1._contents = "";
          return;
        }
      }
    },
    Utf8Encoder: {
      "^": "Converter;",
      convert$3: function(string, start, end) {
        var stringLength, $length, t1, encoder;
        stringLength = string.length;
        P.RangeError_checkValidRange(start, end, stringLength, null, null, null);
        $length = stringLength - start;
        if ($length === 0)
          return new Uint8Array(0);
        t1 = new Uint8Array($length * 3);
        encoder = new P._Utf8Encoder(0, 0, t1);
        if (encoder._fillBuffer$3(string, start, stringLength) !== stringLength)
          encoder._writeSurrogate$2(J.codeUnitAt$1$s(string, stringLength - 1), 0);
        return C.NativeUint8List_methods.sublist$2(t1, 0, encoder._bufferIndex);
      },
      convert$1: function(string) {
        return this.convert$3(string, 0, null);
      },
      startChunkedConversion$1: function(sink) {
        H.assertSubtype(sink, "$isSink", [[P.List, P.int]], "$asSink");
        return new P._Utf8EncoderSink(new P._ByteAdapterSink(sink), 0, 0, new Uint8Array(1024));
      },
      $asStreamTransformer: function() {
        return [P.String, [P.List, P.int]];
      },
      $asConverter: function() {
        return [P.String, [P.List, P.int]];
      }
    },
    _Utf8Encoder: {
      "^": "Object;_carry,_bufferIndex,_convert$_buffer",
      _writeSurrogate$2: function(leadingSurrogate, nextCodeUnit) {
        var t1, t2, t3, t4, rune;
        t1 = this._convert$_buffer;
        t2 = this._bufferIndex;
        t3 = t2 + 1;
        t4 = t1.length;
        if ((nextCodeUnit & 64512) === 56320) {
          rune = 65536 + ((leadingSurrogate & 1023) << 10) | nextCodeUnit & 1023;
          this._bufferIndex = t3;
          if (t2 >= t4)
            return H.ioore(t1, t2);
          t1[t2] = 240 | rune >>> 18;
          t2 = t3 + 1;
          this._bufferIndex = t2;
          if (t3 >= t4)
            return H.ioore(t1, t3);
          t1[t3] = 128 | rune >>> 12 & 63;
          t3 = t2 + 1;
          this._bufferIndex = t3;
          if (t2 >= t4)
            return H.ioore(t1, t2);
          t1[t2] = 128 | rune >>> 6 & 63;
          this._bufferIndex = t3 + 1;
          if (t3 >= t4)
            return H.ioore(t1, t3);
          t1[t3] = 128 | rune & 63;
          return true;
        } else {
          this._bufferIndex = t3;
          if (t2 >= t4)
            return H.ioore(t1, t2);
          t1[t2] = 224 | leadingSurrogate >>> 12;
          t2 = t3 + 1;
          this._bufferIndex = t2;
          if (t3 >= t4)
            return H.ioore(t1, t3);
          t1[t3] = 128 | leadingSurrogate >>> 6 & 63;
          this._bufferIndex = t2 + 1;
          if (t2 >= t4)
            return H.ioore(t1, t2);
          t1[t2] = 128 | leadingSurrogate & 63;
          return false;
        }
      },
      _fillBuffer$3: function(str, start, end) {
        var t1, t2, t3, stringIndex, codeUnit, t4, stringIndex0, t5;
        if (start !== end && (J.codeUnitAt$1$s(str, end - 1) & 64512) === 55296)
          --end;
        for (t1 = this._convert$_buffer, t2 = t1.length, t3 = J.getInterceptor$s(str), stringIndex = start; stringIndex < end; ++stringIndex) {
          codeUnit = t3._codeUnitAt$1(str, stringIndex);
          if (codeUnit <= 127) {
            t4 = this._bufferIndex;
            if (t4 >= t2)
              break;
            this._bufferIndex = t4 + 1;
            t1[t4] = codeUnit;
          } else if ((codeUnit & 64512) === 55296) {
            if (this._bufferIndex + 3 >= t2)
              break;
            stringIndex0 = stringIndex + 1;
            if (this._writeSurrogate$2(codeUnit, C.JSString_methods._codeUnitAt$1(str, stringIndex0)))
              stringIndex = stringIndex0;
          } else if (codeUnit <= 2047) {
            t4 = this._bufferIndex;
            t5 = t4 + 1;
            if (t5 >= t2)
              break;
            this._bufferIndex = t5;
            if (t4 >= t2)
              return H.ioore(t1, t4);
            t1[t4] = 192 | codeUnit >>> 6;
            this._bufferIndex = t5 + 1;
            t1[t5] = 128 | codeUnit & 63;
          } else {
            t4 = this._bufferIndex;
            if (t4 + 2 >= t2)
              break;
            t5 = t4 + 1;
            this._bufferIndex = t5;
            if (t4 >= t2)
              return H.ioore(t1, t4);
            t1[t4] = 224 | codeUnit >>> 12;
            t4 = t5 + 1;
            this._bufferIndex = t4;
            if (t5 >= t2)
              return H.ioore(t1, t5);
            t1[t5] = 128 | codeUnit >>> 6 & 63;
            this._bufferIndex = t4 + 1;
            if (t4 >= t2)
              return H.ioore(t1, t4);
            t1[t4] = 128 | codeUnit & 63;
          }
        }
        return stringIndex;
      }
    },
    _Utf8EncoderSink: {
      "^": "__Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin;_convert$_sink,_carry,_bufferIndex,_convert$_buffer",
      close$0: function(_) {
        var t1;
        if (this._carry !== 0) {
          this.addSlice$4("", 0, 0, true);
          return;
        }
        t1 = this._convert$_sink._convert$_sink._sink;
        if ((t1._state & 2) !== 0)
          H.throwExpression(P.StateError$("Stream is already closed"));
        t1.super$_BufferingStreamSubscription$_close();
      },
      addSlice$4: function(str, start, end, isLast) {
        var t1, t2, t3, t4, t5, t6, t7, t8, isLastSlice, t9;
        this._bufferIndex = 0;
        t1 = start === end;
        if (t1 && !isLast)
          return;
        t2 = this._carry;
        if (t2 !== 0) {
          if (this._writeSurrogate$2(t2, !t1 ? J._codeUnitAt$1$s(str, start) : 0))
            ++start;
          this._carry = 0;
        }
        t1 = this._convert$_buffer;
        t2 = [P.int];
        t3 = this._convert$_sink._convert$_sink;
        t4 = H.getTypeArgumentByIndex(t3, 0);
        t3 = t3._sink;
        t5 = H.getTypeArgumentByIndex(t3, 1);
        t6 = end - 1;
        t7 = J.getInterceptor$s(str);
        t8 = t1.length - 3;
        do {
          start = this._fillBuffer$3(str, start, end);
          isLastSlice = isLast && start === end;
          if (start === t6 && (t7._codeUnitAt$1(str, start) & 64512) === 55296) {
            if (isLast && this._bufferIndex < t8)
              this._writeSurrogate$2(t7._codeUnitAt$1(str, start), 0);
            else
              this._carry = t7._codeUnitAt$1(str, start);
            ++start;
          }
          t9 = this._bufferIndex;
          t9 = H.assertSubtypeOfRuntimeType(H.assertSubtypeOfRuntimeType(H.assertSubtype(C.NativeUint8List_methods.sublist$2(H.assertSubtype(t1, "$isList", t2, "$asList"), 0, t9), "$isList", t2, "$asList"), t4), t5);
          if ((t3._state & 2) !== 0)
            H.throwExpression(P.StateError$("Stream is already closed"));
          t3.super$_BufferingStreamSubscription$_add(0, t9);
          if (isLastSlice) {
            if ((t3._state & 2) !== 0)
              H.throwExpression(P.StateError$("Stream is already closed"));
            t3.super$_BufferingStreamSubscription$_close();
          }
          this._bufferIndex = 0;
        } while (start < end);
        if (isLast)
          this.close$0(0);
      },
      $isStringConversionSink: 1,
      $isSink: 1,
      $asSink: function() {
        return [P.String];
      }
    },
    Utf8Decoder: {
      "^": "Converter;_allowMalformed",
      convert$3: function(codeUnits, start, end) {
        var result, $length, buffer, decoder, t1;
        H.assertSubtype(codeUnits, "$isList", [P.int], "$asList");
        result = P.Utf8Decoder__convertIntercepted(true, codeUnits, start, end);
        if (result != null)
          return result;
        $length = codeUnits.length;
        P.RangeError_checkValidRange(start, end, $length, null, null, null);
        buffer = new P.StringBuffer("");
        decoder = new P._Utf8Decoder(true, buffer, true, 0, 0, 0);
        decoder.convert$3(codeUnits, start, $length);
        decoder.flush$2(0, codeUnits, $length);
        t1 = buffer._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      convert$1: function(codeUnits) {
        return this.convert$3(codeUnits, 0, null);
      },
      startChunkedConversion$1: function(sink) {
        var t1;
        H.assertSubtype(sink, "$isSink", [P.String], "$asSink");
        t1 = new P.StringBuffer("");
        return new P._Utf8ConversionSink(new P._Utf8Decoder(true, t1, true, 0, 0, 0), new P._StringAdapterSink(sink), t1);
      },
      $asStreamTransformer: function() {
        return [[P.List, P.int], P.String];
      },
      $asConverter: function() {
        return [[P.List, P.int], P.String];
      },
      static: {
        Utf8Decoder__convertIntercepted: function(allowMalformed, codeUnits, start, end) {
          H.assertSubtype(codeUnits, "$isList", [P.int], "$asList");
          if (codeUnits instanceof Uint8Array)
            return P.Utf8Decoder__convertInterceptedUint8List(true, codeUnits, start, end);
          return;
        },
        Utf8Decoder__convertInterceptedUint8List: function(allowMalformed, codeUnits, start, end) {
          return;
        }
      }
    },
    _Utf8Decoder: {
      "^": "Object;_allowMalformed,_stringSink,_isFirstCharacter,_convert$_value,_expectedUnits,_extraUnits",
      flush$2: function(_, source, offset) {
        H.assertSubtype(source, "$isList", [P.int], "$asList");
        if (this._expectedUnits > 0) {
          this._stringSink._contents += H.Primitives_stringFromCharCode(65533);
          this._convert$_value = 0;
          this._expectedUnits = 0;
          this._extraUnits = 0;
        }
      },
      flush$0: function($receiver) {
        return this.flush$2($receiver, null, null);
      },
      convert$3: function(codeUnits, startIndex, endIndex) {
        var value, expectedUnits, extraUnits, scanOneByteCharacters, addSingleBytes, t1, t2, i, unit, t3, oneBytes, i0;
        H.assertSubtype(codeUnits, "$isList", [P.int], "$asList");
        value = this._convert$_value;
        expectedUnits = this._expectedUnits;
        extraUnits = this._extraUnits;
        this._convert$_value = 0;
        this._expectedUnits = 0;
        this._extraUnits = 0;
        scanOneByteCharacters = new P._Utf8Decoder_convert_scanOneByteCharacters(endIndex);
        addSingleBytes = new P._Utf8Decoder_convert_addSingleBytes(this, startIndex, endIndex, codeUnits);
        $label0$0:
          for (t1 = this._stringSink, t2 = J.getInterceptor$asx(codeUnits), i = startIndex; true; i = i0) {
            $label1$1:
              if (expectedUnits > 0) {
                do {
                  if (i === endIndex)
                    break $label0$0;
                  unit = t2.$index(codeUnits, i);
                  if (typeof unit !== "number")
                    return unit.$and();
                  if ((unit & 192) !== 128) {
                    this._isFirstCharacter = false;
                    t1._contents += H.Primitives_stringFromCharCode(65533);
                    expectedUnits = 0;
                    break $label1$1;
                  } else {
                    value = (value << 6 | unit & 63) >>> 0;
                    --expectedUnits;
                    ++i;
                  }
                } while (expectedUnits > 0);
                t3 = extraUnits - 1;
                if (t3 < 0 || t3 >= 4)
                  return H.ioore(C.List_127_2047_65535_1114111, t3);
                if (value <= C.List_127_2047_65535_1114111[t3]) {
                  value = 65533;
                  expectedUnits = 0;
                  extraUnits = 0;
                }
                if (value > 1114111)
                  value = 65533;
                if (!this._isFirstCharacter || value !== 65279)
                  t1._contents += H.Primitives_stringFromCharCode(value);
                this._isFirstCharacter = false;
              }
            for (; i < endIndex; i = i0) {
              oneBytes = scanOneByteCharacters.call$2(codeUnits, i);
              if (typeof oneBytes !== "number")
                return oneBytes.$gt();
              if (oneBytes > 0) {
                this._isFirstCharacter = false;
                i0 = i + oneBytes;
                addSingleBytes.call$2(i, i0);
                if (i0 === endIndex)
                  break;
                i = i0;
              }
              i0 = i + 1;
              unit = t2.$index(codeUnits, i);
              if (typeof unit !== "number")
                return unit.$lt();
              if (unit < 0)
                t1._contents += H.Primitives_stringFromCharCode(65533);
              else {
                if ((unit & 224) === 192) {
                  value = unit & 31;
                  expectedUnits = 1;
                  extraUnits = 1;
                  continue $label0$0;
                }
                if ((unit & 240) === 224) {
                  value = unit & 15;
                  expectedUnits = 2;
                  extraUnits = 2;
                  continue $label0$0;
                }
                if ((unit & 248) === 240 && unit < 245) {
                  value = unit & 7;
                  expectedUnits = 3;
                  extraUnits = 3;
                  continue $label0$0;
                }
                this._isFirstCharacter = false;
                t1._contents += H.Primitives_stringFromCharCode(65533);
                value = 65533;
                expectedUnits = 0;
                extraUnits = 0;
              }
            }
            break $label0$0;
          }
        if (expectedUnits > 0) {
          this._convert$_value = value;
          this._expectedUnits = expectedUnits;
          this._extraUnits = extraUnits;
        }
      }
    },
    _Utf8Decoder_convert_scanOneByteCharacters: {
      "^": "Closure:23;endIndex",
      call$2: function(units, from) {
        var to, t1, i, unit;
        H.assertSubtype(units, "$isList", [P.int], "$asList");
        to = this.endIndex;
        for (t1 = J.getInterceptor$asx(units), i = from; i < to; ++i) {
          unit = t1.$index(units, i);
          if (typeof unit !== "number")
            return unit.$and();
          if ((unit & 127) !== unit)
            return i - from;
        }
        return to - from;
      }
    },
    _Utf8Decoder_convert_addSingleBytes: {
      "^": "Closure:24;$this,startIndex,endIndex,codeUnits",
      call$2: function(from, to) {
        this.$this._stringSink._contents += P.String_String$fromCharCodes(this.codeUnits, from, to);
      }
    },
    __Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin: {
      "^": "_Utf8Encoder+StringConversionSinkMixin;"
    }
  }], ["dart.core", "dart:core",, P, {
    "^": "",
    int_parse: function(source, onError, radix) {
      var value;
      H.stringTypeCheck(source);
      value = H.Primitives_parseInt(source, radix);
      if (value != null)
        return value;
      throw H.wrapException(P.FormatException$(source, null, null));
    },
    Error__objectToString: function(object) {
      if (object instanceof H.Closure)
        return object.toString$0(0);
      return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
    },
    List_List$from: function(elements, growable, $E) {
      var t1, list, t2;
      t1 = [$E];
      list = H.setRuntimeTypeInfo([], t1);
      for (t2 = J.get$iterator$ax(elements); t2.moveNext$0();)
        C.JSArray_methods.add$1(list, H.assertSubtypeOfRuntimeType(t2.get$current(t2), $E));
      if (growable)
        return list;
      return H.assertSubtype(J.JSArray_markFixedList(list), "$isList", t1, "$asList");
    },
    List_List$unmodifiable: function(elements, $E) {
      var t1, t2;
      t1 = [$E];
      t2 = H.assertSubtype(P.List_List$from(elements, false, $E), "$isList", t1, "$asList");
      t2.fixed$length = Array;
      t2.immutable$list = Array;
      return H.assertSubtype(t2, "$isList", t1, "$asList");
    },
    String_String$fromCharCodes: function(charCodes, start, end) {
      var t1, len;
      t1 = P.int;
      H.assertSubtype(charCodes, "$isIterable", [t1], "$asIterable");
      if (typeof charCodes === "object" && charCodes !== null && charCodes.constructor === Array) {
        H.assertSubtype(charCodes, "$isJSArray", [t1], "$asJSArray");
        len = charCodes.length;
        end = P.RangeError_checkValidRange(start, end, len, null, null, null);
        return H.Primitives_stringFromCharCodes(start > 0 || end < len ? C.JSArray_methods.sublist$2(charCodes, start, end) : charCodes);
      }
      if (!!J.getInterceptor$(charCodes).$isNativeUint8List)
        return H.Primitives_stringFromNativeUint8List(charCodes, start, P.RangeError_checkValidRange(start, end, charCodes.length, null, null, null));
      return P.String__stringFromIterable(charCodes, start, end);
    },
    String__stringFromIterable: function(charCodes, start, end) {
      var t1, it, i, list;
      H.assertSubtype(charCodes, "$isIterable", [P.int], "$asIterable");
      if (start < 0)
        throw H.wrapException(P.RangeError$range(start, 0, J.get$length$asx(charCodes), null, null));
      t1 = end == null;
      if (!t1 && end < start)
        throw H.wrapException(P.RangeError$range(end, start, J.get$length$asx(charCodes), null, null));
      it = J.get$iterator$ax(charCodes);
      for (i = 0; i < start; ++i)
        if (!it.moveNext$0())
          throw H.wrapException(P.RangeError$range(start, 0, i, null, null));
      list = [];
      if (t1)
        for (; it.moveNext$0();)
          list.push(it.get$current(it));
      else
        for (i = start; i < end; ++i) {
          if (!it.moveNext$0())
            throw H.wrapException(P.RangeError$range(end, start, i, null, null));
          list.push(it.get$current(it));
        }
      return H.Primitives_stringFromCharCodes(list);
    },
    StackTrace_current: function() {
      var stackTrace, exception;
      if ($.$get$_hasErrorStackProperty())
        return H.getTraceFromException(new Error());
      try {
        throw H.wrapException("");
      } catch (exception) {
        H.unwrapException(exception);
        stackTrace = H.getTraceFromException(exception);
        return stackTrace;
      }
    },
    Error_safeToString: function(object) {
      if (typeof object === "number" || typeof object === "boolean" || null == object)
        return J.toString$0$(object);
      if (typeof object === "string")
        return JSON.stringify(object);
      return P.Error__objectToString(object);
    },
    bool: {
      "^": "Object;"
    },
    "+bool": 0,
    DateTime: {
      "^": "Object;_value,isUtc",
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (!(other instanceof P.DateTime))
          return false;
        return this._value === other._value && true;
      },
      compareTo$1: function(_, other) {
        return C.JSInt_methods.compareTo$1(this._value, H.interceptedTypeCheck(other, "$isDateTime")._value);
      },
      get$hashCode: function(_) {
        var t1 = this._value;
        return (t1 ^ C.JSInt_methods._shrOtherPositive$1(t1, 30)) & 1073741823;
      },
      toString$0: function(_) {
        var y, m, d, h, min, sec, ms, t1;
        y = P.DateTime__fourDigits(H.Primitives_getYear(this));
        m = P.DateTime__twoDigits(H.Primitives_getMonth(this));
        d = P.DateTime__twoDigits(H.Primitives_getDay(this));
        h = P.DateTime__twoDigits(H.Primitives_getHours(this));
        min = P.DateTime__twoDigits(H.Primitives_getMinutes(this));
        sec = P.DateTime__twoDigits(H.Primitives_getSeconds(this));
        ms = P.DateTime__threeDigits(H.Primitives_getMilliseconds(this));
        t1 = y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
        return t1;
      },
      $isComparable: 1,
      $asComparable: function() {
        return [P.DateTime];
      },
      static: {
        DateTime__fourDigits: function(n) {
          var absN, sign;
          absN = Math.abs(n);
          sign = n < 0 ? "-" : "";
          if (absN >= 1000)
            return "" + n;
          if (absN >= 100)
            return sign + "0" + absN;
          if (absN >= 10)
            return sign + "00" + absN;
          return sign + "000" + absN;
        },
        DateTime__threeDigits: function(n) {
          if (n >= 100)
            return "" + n;
          if (n >= 10)
            return "0" + n;
          return "00" + n;
        },
        DateTime__twoDigits: function(n) {
          if (n >= 10)
            return "" + n;
          return "0" + n;
        }
      }
    },
    double: {
      "^": "num;"
    },
    "+double": 0,
    Duration: {
      "^": "Object;_duration",
      $lt: function(_, other) {
        return this._duration < H.interceptedTypeCheck(other, "$isDuration")._duration;
      },
      $gt: function(_, other) {
        return C.JSInt_methods.$gt(this._duration, H.interceptedTypeCheck(other, "$isDuration")._duration);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (!(other instanceof P.Duration))
          return false;
        return this._duration === other._duration;
      },
      get$hashCode: function(_) {
        return this._duration & 0x1FFFFFFF;
      },
      compareTo$1: function(_, other) {
        return C.JSInt_methods.compareTo$1(this._duration, H.interceptedTypeCheck(other, "$isDuration")._duration);
      },
      toString$0: function(_) {
        var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
        t1 = new P.Duration_toString_twoDigits();
        t2 = this._duration;
        if (t2 < 0)
          return "-" + new P.Duration(0 - t2).toString$0(0);
        twoDigitMinutes = t1.call$1(C.JSInt_methods._tdivFast$1(t2, 60000000) % 60);
        twoDigitSeconds = t1.call$1(C.JSInt_methods._tdivFast$1(t2, 1000000) % 60);
        sixDigitUs = new P.Duration_toString_sixDigits().call$1(t2 % 1000000);
        return "" + C.JSInt_methods._tdivFast$1(t2, 3600000000) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
      },
      $isComparable: 1,
      $asComparable: function() {
        return [P.Duration];
      }
    },
    Duration_toString_sixDigits: {
      "^": "Closure:18;",
      call$1: function(n) {
        if (n >= 100000)
          return "" + n;
        if (n >= 10000)
          return "0" + n;
        if (n >= 1000)
          return "00" + n;
        if (n >= 100)
          return "000" + n;
        if (n >= 10)
          return "0000" + n;
        return "00000" + n;
      }
    },
    Duration_toString_twoDigits: {
      "^": "Closure:18;",
      call$1: function(n) {
        if (n >= 10)
          return "" + n;
        return "0" + n;
      }
    },
    Error: {
      "^": "Object;"
    },
    NullThrownError: {
      "^": "Error;",
      toString$0: function(_) {
        return "Throw of null.";
      }
    },
    ArgumentError: {
      "^": "Error;_hasValue,invalidValue,name,message",
      get$_errorName: function() {
        return "Invalid argument" + (!this._hasValue ? "(s)" : "");
      },
      get$_errorExplanation: function() {
        return "";
      },
      toString$0: function(_) {
        var t1, nameString, message, prefix, explanation, errorValue;
        t1 = this.name;
        nameString = t1 != null ? " (" + t1 + ")" : "";
        t1 = this.message;
        message = t1 == null ? "" : ": " + H.S(t1);
        prefix = this.get$_errorName() + nameString + message;
        if (!this._hasValue)
          return prefix;
        explanation = this.get$_errorExplanation();
        errorValue = P.Error_safeToString(this.invalidValue);
        return prefix + explanation + ": " + H.S(errorValue);
      },
      static: {
        ArgumentError$: function(message) {
          return new P.ArgumentError(false, null, null, message);
        },
        ArgumentError$value: function(value, $name, message) {
          return new P.ArgumentError(true, value, $name, message);
        }
      }
    },
    RangeError: {
      "^": "ArgumentError;start,end,_hasValue,invalidValue,name,message",
      get$_errorName: function() {
        return "RangeError";
      },
      get$_errorExplanation: function() {
        var t1, explanation, t2;
        t1 = this.start;
        if (t1 == null) {
          t1 = this.end;
          explanation = t1 != null ? ": Not less than or equal to " + H.S(t1) : "";
        } else {
          t2 = this.end;
          if (t2 == null)
            explanation = ": Not greater than or equal to " + H.S(t1);
          else if (t2 > t1)
            explanation = ": Not in range " + H.S(t1) + ".." + H.S(t2) + ", inclusive";
          else
            explanation = t2 < t1 ? ": Valid value range is empty" : ": Only valid value is " + H.S(t1);
        }
        return explanation;
      },
      static: {
        RangeError$value: function(value, $name, message) {
          return new P.RangeError(null, null, true, value, $name, "Value not in range");
        },
        RangeError$range: function(invalidValue, minValue, maxValue, $name, message) {
          return new P.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
        },
        RangeError_checkValidRange: function(start, end, $length, startName, endName, message) {
          if (0 > start || start > $length)
            throw H.wrapException(P.RangeError$range(start, 0, $length, "start", message));
          if (end != null) {
            if (start > end || end > $length)
              throw H.wrapException(P.RangeError$range(end, start, $length, "end", message));
            return end;
          }
          return $length;
        }
      }
    },
    IndexError: {
      "^": "ArgumentError;indexable,length>,_hasValue,invalidValue,name,message",
      get$_errorName: function() {
        return "RangeError";
      },
      get$_errorExplanation: function() {
        if (J.$lt$n(this.invalidValue, 0))
          return ": index must not be negative";
        var t1 = this.length;
        if (t1 === 0)
          return ": no indices are valid";
        return ": index should be less than " + H.S(t1);
      },
      static: {
        IndexError$: function(invalidValue, indexable, $name, message, $length) {
          var t1 = H.intTypeCheck($length != null ? $length : J.get$length$asx(indexable));
          return new P.IndexError(indexable, t1, true, invalidValue, $name, "Index out of range");
        }
      }
    },
    UnsupportedError: {
      "^": "Error;message",
      toString$0: function(_) {
        return "Unsupported operation: " + this.message;
      },
      static: {
        UnsupportedError$: function(message) {
          return new P.UnsupportedError(message);
        }
      }
    },
    UnimplementedError: {
      "^": "Error;message",
      toString$0: function(_) {
        var t1 = this.message;
        return t1 != null ? "UnimplementedError: " + t1 : "UnimplementedError";
      },
      static: {
        UnimplementedError$: function(message) {
          return new P.UnimplementedError(message);
        }
      }
    },
    StateError: {
      "^": "Error;message",
      toString$0: function(_) {
        return "Bad state: " + this.message;
      },
      static: {
        StateError$: function(message) {
          return new P.StateError(message);
        }
      }
    },
    ConcurrentModificationError: {
      "^": "Error;modifiedObject",
      toString$0: function(_) {
        var t1 = this.modifiedObject;
        if (t1 == null)
          return "Concurrent modification during iteration.";
        return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
      },
      static: {
        ConcurrentModificationError$: function(modifiedObject) {
          return new P.ConcurrentModificationError(modifiedObject);
        }
      }
    },
    OutOfMemoryError: {
      "^": "Object;",
      toString$0: function(_) {
        return "Out of Memory";
      },
      $isError: 1
    },
    StackOverflowError: {
      "^": "Object;",
      toString$0: function(_) {
        return "Stack Overflow";
      },
      $isError: 1
    },
    CyclicInitializationError: {
      "^": "Error;variableName",
      toString$0: function(_) {
        var t1 = this.variableName;
        return t1 == null ? "Reading static variable during its initialization" : "Reading static variable '" + t1 + "' during its initialization";
      }
    },
    _Exception: {
      "^": "Object;message",
      toString$0: function(_) {
        return "Exception: " + this.message;
      }
    },
    FormatException: {
      "^": "Object;message,source,offset",
      toString$0: function(_) {
        var t1, report, offset, source, lineNum, lineStart, previousCharWasCR, i, char, lineEnd, end, start, prefix, postfix, slice;
        t1 = this.message;
        report = t1 != null && "" !== t1 ? "FormatException: " + H.S(t1) : "FormatException";
        offset = this.offset;
        source = this.source;
        if (typeof source !== "string")
          return offset != null ? report + (" (at offset " + H.S(offset) + ")") : report;
        if (offset != null)
          t1 = offset < 0 || offset > source.length;
        else
          t1 = false;
        if (t1)
          offset = null;
        if (offset == null) {
          if (source.length > 78)
            source = C.JSString_methods.substring$2(source, 0, 75) + "...";
          return report + "\n" + source;
        }
        for (lineNum = 1, lineStart = 0, previousCharWasCR = false, i = 0; i < offset; ++i) {
          char = C.JSString_methods._codeUnitAt$1(source, i);
          if (char === 10) {
            if (lineStart !== i || !previousCharWasCR)
              ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = false;
          } else if (char === 13) {
            ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = true;
          }
        }
        report = lineNum > 1 ? report + (" (at line " + lineNum + ", character " + (offset - lineStart + 1) + ")\n") : report + (" (at character " + (offset + 1) + ")\n");
        lineEnd = source.length;
        for (i = offset; i < source.length; ++i) {
          char = C.JSString_methods.codeUnitAt$1(source, i);
          if (char === 10 || char === 13) {
            lineEnd = i;
            break;
          }
        }
        if (lineEnd - lineStart > 78)
          if (offset - lineStart < 75) {
            end = lineStart + 75;
            start = lineStart;
            prefix = "";
            postfix = "...";
          } else {
            if (lineEnd - offset < 75) {
              start = lineEnd - 75;
              end = lineEnd;
              postfix = "";
            } else {
              start = offset - 36;
              end = offset + 36;
              postfix = "...";
            }
            prefix = "...";
          }
        else {
          end = lineEnd;
          start = lineStart;
          prefix = "";
          postfix = "";
        }
        slice = C.JSString_methods.substring$2(source, start, end);
        return report + prefix + slice + postfix + "\n" + C.JSString_methods.$mul(" ", offset - start + prefix.length) + "^\n";
      },
      static: {
        FormatException$: function(message, source, offset) {
          return new P.FormatException(message, source, offset);
        }
      }
    },
    Function: {
      "^": "Object;"
    },
    int: {
      "^": "num;"
    },
    "+int": 0,
    Iterable: {
      "^": "Object;$ti",
      map$1$1: function(_, f, $T) {
        var t1 = H.getRuntimeTypeArgument(this, "Iterable", 0);
        return H.MappedIterable_MappedIterable(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), t1, $T);
      },
      every$1: function(_, test) {
        var t1;
        H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getRuntimeTypeArgument(this, "Iterable", 0)]});
        for (t1 = this.get$iterator(this); t1.moveNext$0();)
          if (!test.call$1(t1.get$current(t1)))
            return false;
        return true;
      },
      get$length: function(_) {
        var it, count;
        it = this.get$iterator(this);
        for (count = 0; it.moveNext$0();)
          ++count;
        return count;
      },
      get$isEmpty: function(_) {
        return !this.get$iterator(this).moveNext$0();
      },
      elementAt$1: function(_, index) {
        var t1, elementIndex, element;
        if (index < 0)
          H.throwExpression(P.RangeError$range(index, 0, null, "index", null));
        for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
          element = t1.get$current(t1);
          if (index === elementIndex)
            return element;
          ++elementIndex;
        }
        throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
      },
      toString$0: function(_) {
        return P.IterableBase_iterableToShortString(this, "(", ")");
      }
    },
    Iterator: {
      "^": "Object;$ti"
    },
    List: {
      "^": "Object;$ti",
      $isEfficientLengthIterable: 1,
      $isIterable: 1
    },
    "+List": 0,
    Map: {
      "^": "Object;$ti"
    },
    MapEntry: {
      "^": "Object;key,value>,$ti",
      toString$0: function(_) {
        return "MapEntry(" + H.S(this.key) + ": " + H.S(this.value) + ")";
      }
    },
    Null: {
      "^": "Object;",
      get$hashCode: function(_) {
        return P.Object.prototype.get$hashCode.call(this, this);
      },
      toString$0: function(_) {
        return "null";
      }
    },
    "+Null": 0,
    num: {
      "^": "Object;",
      $isComparable: 1,
      $asComparable: function() {
        return [P.num];
      }
    },
    "+num": 0,
    Object: {
      "^": ";",
      $eq: function(_, other) {
        return this === other;
      },
      get$hashCode: function(_) {
        return H.Primitives_objectHashCode(this);
      },
      toString$0: function(_) {
        return "Instance of '" + H.Primitives_objectTypeName(this) + "'";
      },
      toString: function() {
        return this.toString$0(this);
      }
    },
    StackTrace: {
      "^": "Object;"
    },
    String: {
      "^": "Object;",
      $isComparable: 1,
      $asComparable: function() {
        return [P.String];
      },
      $isPattern: 1
    },
    "+String": 0,
    StringBuffer: {
      "^": "Object;_contents<",
      get$length: function(_) {
        return this._contents.length;
      },
      toString$0: function(_) {
        var t1 = this._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      get$isEmpty: function(_) {
        return this._contents.length === 0;
      },
      $isStringSink: 1,
      static: {
        StringBuffer__writeAll: function(string, objects, separator) {
          var iterator = J.get$iterator$ax(objects);
          if (!iterator.moveNext$0())
            return string;
          if (separator.length === 0) {
            do
              string += H.S(iterator.get$current(iterator));
            while (iterator.moveNext$0());
          } else {
            string += H.S(iterator.get$current(iterator));
            for (; iterator.moveNext$0();)
              string = string + separator + H.S(iterator.get$current(iterator));
          }
          return string;
        }
      }
    }
  }], ["dart.dom.html", "dart:html",, W, {
    "^": "",
    _ElementFactoryProvider_createElement_tag: function(tag, typeExtension) {
      return document.createElement(tag);
    },
    _JenkinsSmiHash_combine: function(hash, value) {
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10);
      return hash ^ hash >>> 6;
    },
    _JenkinsSmiHash_hash4: function(a, b, c, d) {
      var t1, hash;
      t1 = W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, a), b), c), d);
      hash = 536870911 & t1 + ((67108863 & t1) << 3);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    _ElementCssClassSet__addAll: function(_element, iterable) {
      var list, t1, _i;
      H.assertSubtype(iterable, "$isIterable", [P.String], "$asIterable");
      list = _element.classList;
      for (t1 = iterable.length, _i = 0; _i < iterable.length; iterable.length === t1 || (0, H.throwConcurrentModificationError)(iterable), ++_i)
        list.add(iterable[_i]);
    },
    _convertNativeToDart_XHR_Response: function(o) {
      if (!!J.getInterceptor$(o).$isDocument)
        return o;
      return new P._AcceptStructuredCloneDart2Js([], [], false).convertNativeToDart_AcceptStructuredClone$2$mustCopy(o, true);
    },
    _wrapZone: function(callback, $T) {
      var t1;
      H.functionTypeCheck(callback, {func: 1, ret: -1, args: [$T]});
      t1 = $.Zone__current;
      if (t1 === C.C__RootZone)
        return callback;
      return t1.bindUnaryCallbackGuarded$1$1(callback, $T);
    },
    HtmlElement: {
      "^": "Element;",
      "%": "HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLFieldSetElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMarqueeElement|HTMLMenuElement|HTMLMetaElement|HTMLModElement|HTMLOListElement|HTMLOptGroupElement|HTMLParagraphElement|HTMLPictureElement|HTMLPreElement|HTMLQuoteElement|HTMLScriptElement|HTMLShadowElement|HTMLSlotElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTemplateElement|HTMLTimeElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement;HTMLElement"
    },
    AccessibleNodeList: {
      "^": "Interceptor;0length=",
      "%": "AccessibleNodeList"
    },
    AnchorElement: {
      "^": "HtmlElement;",
      toString$0: function(receiver) {
        return String(receiver);
      },
      "%": "HTMLAnchorElement"
    },
    AreaElement: {
      "^": "HtmlElement;",
      toString$0: function(receiver) {
        return String(receiver);
      },
      "%": "HTMLAreaElement"
    },
    Blob: {
      "^": "Interceptor;",
      "%": ";Blob"
    },
    BluetoothRemoteGattDescriptor: {
      "^": "Interceptor;0value=",
      "%": "BluetoothRemoteGATTDescriptor"
    },
    ButtonElement: {
      "^": "HtmlElement;0value=",
      $isButtonElement: 1,
      "%": "HTMLButtonElement"
    },
    CanvasElement: {
      "^": "HtmlElement;0height=,0width=",
      "%": "HTMLCanvasElement"
    },
    CharacterData: {
      "^": "Node;0length=",
      "%": "CDATASection|CharacterData|Comment|ProcessingInstruction|Text"
    },
    CssKeywordValue: {
      "^": "CssStyleValue;0value=",
      "%": "CSSKeywordValue"
    },
    CssNumericValue: {
      "^": "CssStyleValue;",
      $isCssNumericValue: 1,
      "%": ";CSSNumericValue"
    },
    CssPerspective: {
      "^": "CssTransformComponent;0length=",
      "%": "CSSPerspective"
    },
    CssRule: {
      "^": "Interceptor;",
      $isCssRule: 1,
      "%": "CSSCharsetRule|CSSConditionRule|CSSFontFaceRule|CSSGroupingRule|CSSImportRule|CSSKeyframeRule|CSSKeyframesRule|CSSMediaRule|CSSNamespaceRule|CSSPageRule|CSSRule|CSSStyleRule|CSSSupportsRule|CSSViewportRule|MozCSSKeyframeRule|MozCSSKeyframesRule|WebKitCSSKeyframeRule|WebKitCSSKeyframesRule"
    },
    CssStyleDeclaration: {
      "^": "_CssStyleDeclaration_Interceptor_CssStyleDeclarationBase;0length=",
      getPropertyValue$1: function(receiver, propertyName) {
        var propValue = this._getPropertyValue$1(receiver, this._browserPropertyName$1(receiver, propertyName));
        return propValue == null ? "" : propValue;
      },
      _browserPropertyName$1: function(receiver, propertyName) {
        var t1, $name;
        t1 = $.$get$CssStyleDeclaration__propertyCache();
        $name = t1[propertyName];
        if (typeof $name === "string")
          return $name;
        $name = this._supportedBrowserPropertyName$1(receiver, propertyName);
        t1[propertyName] = $name;
        return $name;
      },
      _supportedBrowserPropertyName$1: function(receiver, propertyName) {
        var prefixed;
        if (propertyName.replace(/^-ms-/, "ms-").replace(/-([\da-z])/ig, function(_, letter) {
          return letter.toUpperCase();
        }) in receiver)
          return propertyName;
        prefixed = P.Device_cssPrefix() + propertyName;
        if (prefixed in receiver)
          return prefixed;
        return propertyName;
      },
      _getPropertyValue$1: function(receiver, property) {
        return receiver.getPropertyValue(property);
      },
      get$height: function(receiver) {
        return receiver.height;
      },
      get$width: function(receiver) {
        return receiver.width;
      },
      "%": "CSS2Properties|CSSStyleDeclaration|MSStyleCSSProperties"
    },
    CssStyleDeclarationBase: {
      "^": "Object;",
      get$height: function(receiver) {
        return this.getPropertyValue$1(receiver, "height");
      },
      get$width: function(receiver) {
        return this.getPropertyValue$1(receiver, "width");
      }
    },
    CssStyleValue: {
      "^": "Interceptor;",
      "%": "CSSImageValue|CSSPositionValue|CSSResourceValue|CSSURLImageValue;CSSStyleValue"
    },
    CssTransformComponent: {
      "^": "Interceptor;",
      "%": "CSSMatrixComponent|CSSRotation|CSSScale|CSSSkew|CSSTranslation;CSSTransformComponent"
    },
    CssTransformValue: {
      "^": "CssStyleValue;0length=",
      "%": "CSSTransformValue"
    },
    CssUnitValue: {
      "^": "CssNumericValue;0value=",
      "%": "CSSUnitValue"
    },
    CssUnparsedValue: {
      "^": "CssStyleValue;0length=",
      "%": "CSSUnparsedValue"
    },
    DataElement: {
      "^": "HtmlElement;0value=",
      "%": "HTMLDataElement"
    },
    DataTransferItemList: {
      "^": "Interceptor;0length=",
      $index: function(receiver, index) {
        return receiver[index];
      },
      "%": "DataTransferItemList"
    },
    DivElement: {
      "^": "HtmlElement;",
      "%": "HTMLDivElement"
    },
    Document: {
      "^": "Node;",
      querySelector$1: function(receiver, selectors) {
        return receiver.querySelector(selectors);
      },
      $isDocument: 1,
      "%": "XMLDocument;Document"
    },
    DomException: {
      "^": "Interceptor;",
      toString$0: function(receiver) {
        return String(receiver);
      },
      "%": "DOMException"
    },
    DomRectList: {
      "^": "_DomRectList_Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.assertSubtype(value, "$isRectangle", [P.num], "$asRectangle");
        throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
      },
      elementAt$1: function(receiver, index) {
        if (index < 0 || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [[P.Rectangle, P.num]];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [[P.Rectangle, P.num]];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [[P.Rectangle, P.num]];
      },
      $asListMixin: function() {
        return [[P.Rectangle, P.num]];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [[P.Rectangle, P.num]];
      },
      $isList: 1,
      $asList: function() {
        return [[P.Rectangle, P.num]];
      },
      $asImmutableListMixin: function() {
        return [[P.Rectangle, P.num]];
      },
      "%": "ClientRectList|DOMRectList"
    },
    DomRectReadOnly: {
      "^": "Interceptor;",
      toString$0: function(receiver) {
        return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(this.get$width(receiver)) + " x " + H.S(this.get$height(receiver));
      },
      $eq: function(receiver, other) {
        var t1;
        if (other == null)
          return false;
        if (!H.checkSubtype(other, "$isRectangle", [P.num], "$asRectangle"))
          return false;
        if (receiver.left === other.left)
          if (receiver.top === other.top) {
            t1 = J.getInterceptor$x(other);
            t1 = this.get$width(receiver) === t1.get$width(other) && this.get$height(receiver) === t1.get$height(other);
          } else
            t1 = false;
        else
          t1 = false;
        return t1;
      },
      get$hashCode: function(receiver) {
        return W._JenkinsSmiHash_hash4(receiver.left & 0x1FFFFFFF, receiver.top & 0x1FFFFFFF, this.get$width(receiver) & 0x1FFFFFFF, this.get$height(receiver) & 0x1FFFFFFF);
      },
      get$height: function(receiver) {
        return receiver.height;
      },
      get$width: function(receiver) {
        return receiver.width;
      },
      $isRectangle: 1,
      $asRectangle: function() {
        return [P.num];
      },
      "%": ";DOMRectReadOnly"
    },
    DomStringList: {
      "^": "_DomStringList_Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.stringTypeCheck(value);
        throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
      },
      elementAt$1: function(receiver, index) {
        if (index < 0 || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [P.String];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.String];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [P.String];
      },
      $asListMixin: function() {
        return [P.String];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.String];
      },
      $isList: 1,
      $asList: function() {
        return [P.String];
      },
      $asImmutableListMixin: function() {
        return [P.String];
      },
      "%": "DOMStringList"
    },
    DomTokenList: {
      "^": "Interceptor;0length=,0value=",
      "%": "DOMTokenList"
    },
    Element: {
      "^": "Node;",
      toString$0: function(receiver) {
        return receiver.localName;
      },
      after$1: function(receiver, nodes) {
        return receiver.after(nodes);
      },
      $isElement: 1,
      "%": ";Element"
    },
    EmbedElement: {
      "^": "HtmlElement;0height=,0width=",
      "%": "HTMLEmbedElement"
    },
    Entry: {
      "^": "Interceptor;",
      $isEntry: 1,
      "%": "DirectoryEntry|Entry|FileEntry"
    },
    Event: {
      "^": "Interceptor;",
      $isEvent: 1,
      "%": "AbortPaymentEvent|AnimationEvent|AnimationPlaybackEvent|ApplicationCacheErrorEvent|AudioProcessingEvent|BackgroundFetchClickEvent|BackgroundFetchEvent|BackgroundFetchFailEvent|BackgroundFetchedEvent|BeforeInstallPromptEvent|BeforeUnloadEvent|BlobEvent|CanMakePaymentEvent|ClipboardEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|ErrorEvent|ExtendableEvent|ExtendableMessageEvent|FetchEvent|FontFaceSetLoadEvent|ForeignFetchEvent|GamepadEvent|HashChangeEvent|IDBVersionChangeEvent|InstallEvent|MIDIConnectionEvent|MIDIMessageEvent|MediaEncryptedEvent|MediaKeyMessageEvent|MediaQueryListEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MojoInterfaceRequestEvent|MutationEvent|NotificationEvent|OfflineAudioCompletionEvent|PageTransitionEvent|PaymentRequestEvent|PaymentRequestUpdateEvent|PopStateEvent|PresentationConnectionAvailableEvent|PresentationConnectionCloseEvent|PromiseRejectionEvent|PushEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCPeerConnectionIceEvent|RTCTrackEvent|SecurityPolicyViolationEvent|SensorErrorEvent|SpeechRecognitionError|SpeechRecognitionEvent|SpeechSynthesisEvent|StorageEvent|SyncEvent|TrackEvent|TransitionEvent|USBConnectionEvent|VRDeviceEvent|VRDisplayEvent|VRSessionEvent|WebGLContextEvent|WebKitTransitionEvent;Event|InputEvent"
    },
    EventTarget: {
      "^": "Interceptor;",
      addEventListener$3: function(receiver, type, listener, useCapture) {
        H.functionTypeCheck(listener, {func: 1, args: [W.Event]});
        if (listener != null)
          this._addEventListener$3(receiver, type, listener, false);
      },
      _addEventListener$3: function(receiver, type, listener, options) {
        return receiver.addEventListener(type, H.convertDartClosureToJS(H.functionTypeCheck(listener, {func: 1, args: [W.Event]}), 1), false);
      },
      _removeEventListener$3: function(receiver, type, listener, options) {
        return receiver.removeEventListener(type, H.convertDartClosureToJS(H.functionTypeCheck(listener, {func: 1, args: [W.Event]}), 1), false);
      },
      $isEventTarget: 1,
      "%": "AbsoluteOrientationSensor|Accelerometer|AccessibleNode|AmbientLightSensor|AnalyserNode|Animation|ApplicationCache|AudioBufferSourceNode|AudioChannelMerger|AudioChannelSplitter|AudioDestinationNode|AudioGainNode|AudioNode|AudioPannerNode|AudioScheduledSourceNode|AudioWorkletNode|BackgroundFetchRegistration|BatteryManager|BiquadFilterNode|BluetoothDevice|BluetoothRemoteGATTCharacteristic|BroadcastChannel|CanvasCaptureMediaStreamTrack|ChannelMergerNode|ChannelSplitterNode|Clipboard|ConstantSourceNode|ConvolverNode|DOMApplicationCache|DOMWindow|DataChannel|DedicatedWorkerGlobalScope|DelayNode|DynamicsCompressorNode|EventSource|FileReader|FontFaceSet|GainNode|Gyroscope|IDBDatabase|IDBOpenDBRequest|IDBRequest|IDBTransaction|IDBVersionChangeRequest|IIRFilterNode|JavaScriptAudioNode|LinearAccelerationSensor|MIDIAccess|MIDIInput|MIDIOutput|MIDIPort|Magnetometer|MediaDevices|MediaElementAudioSourceNode|MediaKeySession|MediaQueryList|MediaRecorder|MediaSource|MediaStream|MediaStreamAudioDestinationNode|MediaStreamAudioSourceNode|MediaStreamTrack|MessagePort|MojoInterfaceInterceptor|NetworkInformation|Notification|OfflineResourceList|OrientationSensor|Oscillator|OscillatorNode|PannerNode|PaymentRequest|Performance|PermissionStatus|PresentationConnection|PresentationConnectionList|PresentationRequest|RTCDTMFSender|RTCDataChannel|RTCPeerConnection|RealtimeAnalyserNode|RelativeOrientationSensor|RemotePlayback|ScreenOrientation|ScriptProcessorNode|Sensor|ServiceWorker|ServiceWorkerContainer|ServiceWorkerGlobalScope|ServiceWorkerRegistration|SharedWorker|SharedWorkerGlobalScope|SpeechRecognition|SpeechSynthesis|SpeechSynthesisUtterance|StereoPannerNode|USB|VR|VRDevice|VRDisplay|VRSession|WaveShaperNode|WebSocket|Window|Worker|WorkerGlobalScope|WorkerPerformance|mozRTCPeerConnection|webkitAudioPannerNode|webkitRTCPeerConnection;EventTarget;_SourceBufferList_EventTarget_ListMixin|_SourceBufferList_EventTarget_ListMixin_ImmutableListMixin|_TextTrackList_EventTarget_ListMixin|_TextTrackList_EventTarget_ListMixin_ImmutableListMixin"
    },
    File: {
      "^": "Blob;",
      $isFile: 1,
      "%": "File"
    },
    FileList: {
      "^": "_FileList_Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.interceptedTypeCheck(value, "$isFile");
        throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
      },
      elementAt$1: function(receiver, index) {
        if (index < 0 || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.File];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.File];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.File];
      },
      $asListMixin: function() {
        return [W.File];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.File];
      },
      $isList: 1,
      $asList: function() {
        return [W.File];
      },
      $asImmutableListMixin: function() {
        return [W.File];
      },
      "%": "FileList"
    },
    FileWriter: {
      "^": "EventTarget;0length=",
      "%": "FileWriter"
    },
    FormElement: {
      "^": "HtmlElement;0length=",
      "%": "HTMLFormElement"
    },
    Gamepad: {
      "^": "Interceptor;",
      $isGamepad: 1,
      "%": "Gamepad"
    },
    GamepadButton: {
      "^": "Interceptor;0value=",
      "%": "GamepadButton"
    },
    History: {
      "^": "Interceptor;0length=",
      "%": "History"
    },
    HtmlCollection: {
      "^": "_HtmlCollection_Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.interceptedTypeCheck(value, "$isNode");
        throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
      },
      elementAt$1: function(receiver, index) {
        if (index < 0 || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.Node];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.Node];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.Node];
      },
      $asListMixin: function() {
        return [W.Node];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $asImmutableListMixin: function() {
        return [W.Node];
      },
      "%": "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"
    },
    HtmlDocument: {
      "^": "Document;",
      "%": "HTMLDocument"
    },
    HttpRequest: {
      "^": "HttpRequestEventTarget;",
      get$responseHeaders: function(receiver) {
        var t1, headers, headersString, headersList, _i, header, t2, splitIdx, key, value;
        t1 = P.String;
        headers = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
        headersString = receiver.getAllResponseHeaders();
        if (headersString == null)
          return headers;
        headersList = headersString.split("\r\n");
        for (t1 = headersList.length, _i = 0; _i < t1; ++_i) {
          header = headersList[_i];
          t2 = J.getInterceptor$asx(header);
          if (t2.get$length(header) === 0)
            continue;
          splitIdx = t2.indexOf$1(header, ": ");
          if (splitIdx === -1)
            continue;
          key = C.JSString_methods.substring$2(header, 0, splitIdx).toLowerCase();
          value = C.JSString_methods.substring$1(header, splitIdx + 2);
          if (headers.containsKey$1(0, key))
            headers.$indexSet(0, key, H.S(headers.$index(0, key)) + ", " + value);
          else
            headers.$indexSet(0, key, value);
        }
        return headers;
      },
      open$5$async$password$user: function(receiver, method, url, async, password, user) {
        return receiver.open(method, url);
      },
      open$2: function($receiver, method, url) {
        return $receiver.open(method, url);
      },
      getResponseHeader$1: function(receiver, $name) {
        return receiver.getResponseHeader($name);
      },
      overrideMimeType$1: function(receiver, mime) {
        return receiver.overrideMimeType(mime);
      },
      send$1: function(receiver, body_OR_data) {
        return receiver.send(body_OR_data);
      },
      setRequestHeader$2: function(receiver, $name, value) {
        return receiver.setRequestHeader($name, value);
      },
      $isHttpRequest: 1,
      "%": "XMLHttpRequest"
    },
    HttpRequestEventTarget: {
      "^": "EventTarget;",
      "%": "XMLHttpRequestUpload;XMLHttpRequestEventTarget"
    },
    IFrameElement: {
      "^": "HtmlElement;0height=,0width=",
      "%": "HTMLIFrameElement"
    },
    ImageBitmap: {
      "^": "Interceptor;0height=,0width=",
      "%": "ImageBitmap"
    },
    ImageData: {
      "^": "Interceptor;0height=,0width=",
      "%": "ImageData"
    },
    ImageElement: {
      "^": "HtmlElement;0height=,0width=",
      "%": "HTMLImageElement"
    },
    InputElement: {
      "^": "HtmlElement;0height=,0value=,0entries:webkitEntries=,0width=",
      $isTextInputElement: 1,
      "%": "HTMLInputElement"
    },
    LIElement: {
      "^": "HtmlElement;0value=",
      "%": "HTMLLIElement"
    },
    Location: {
      "^": "Interceptor;",
      toString$0: function(receiver) {
        return String(receiver);
      },
      "%": "Location"
    },
    MediaElement: {
      "^": "HtmlElement;",
      "%": "HTMLAudioElement;HTMLMediaElement"
    },
    MediaList: {
      "^": "Interceptor;0length=",
      "%": "MediaList"
    },
    MeterElement: {
      "^": "HtmlElement;0value=",
      "%": "HTMLMeterElement"
    },
    MidiInputMap: {
      "^": "_MidiInputMap_Interceptor_MapMixin;",
      $index: function(receiver, key) {
        return P.convertNativeToDart_Dictionary(receiver.get(H.stringTypeCheck(key)));
      },
      forEach$1: function(receiver, f) {
        var entries, entry;
        H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String,,]});
        entries = receiver.entries();
        for (; true;) {
          entry = entries.next();
          if (entry.done)
            return;
          f.call$2(entry.value[0], P.convertNativeToDart_Dictionary(entry.value[1]));
        }
      },
      get$keys: function(receiver) {
        var keys = H.setRuntimeTypeInfo([], [P.String]);
        this.forEach$1(receiver, new W.MidiInputMap_keys_closure(keys));
        return keys;
      },
      get$length: function(receiver) {
        return receiver.size;
      },
      get$isEmpty: function(receiver) {
        return receiver.size === 0;
      },
      $asMapMixin: function() {
        return [P.String, null];
      },
      $isMap: 1,
      $asMap: function() {
        return [P.String, null];
      },
      "%": "MIDIInputMap"
    },
    MidiInputMap_keys_closure: {
      "^": "Closure:8;keys",
      call$2: function(k, v) {
        return C.JSArray_methods.add$1(this.keys, k);
      }
    },
    MidiOutputMap: {
      "^": "_MidiOutputMap_Interceptor_MapMixin;",
      $index: function(receiver, key) {
        return P.convertNativeToDart_Dictionary(receiver.get(H.stringTypeCheck(key)));
      },
      forEach$1: function(receiver, f) {
        var entries, entry;
        H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String,,]});
        entries = receiver.entries();
        for (; true;) {
          entry = entries.next();
          if (entry.done)
            return;
          f.call$2(entry.value[0], P.convertNativeToDart_Dictionary(entry.value[1]));
        }
      },
      get$keys: function(receiver) {
        var keys = H.setRuntimeTypeInfo([], [P.String]);
        this.forEach$1(receiver, new W.MidiOutputMap_keys_closure(keys));
        return keys;
      },
      get$length: function(receiver) {
        return receiver.size;
      },
      get$isEmpty: function(receiver) {
        return receiver.size === 0;
      },
      $asMapMixin: function() {
        return [P.String, null];
      },
      $isMap: 1,
      $asMap: function() {
        return [P.String, null];
      },
      "%": "MIDIOutputMap"
    },
    MidiOutputMap_keys_closure: {
      "^": "Closure:8;keys",
      call$2: function(k, v) {
        return C.JSArray_methods.add$1(this.keys, k);
      }
    },
    MimeType: {
      "^": "Interceptor;",
      $isMimeType: 1,
      "%": "MimeType"
    },
    MimeTypeArray: {
      "^": "_MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.interceptedTypeCheck(value, "$isMimeType");
        throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
      },
      elementAt$1: function(receiver, index) {
        if (index < 0 || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.MimeType];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.MimeType];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.MimeType];
      },
      $asListMixin: function() {
        return [W.MimeType];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.MimeType];
      },
      $isList: 1,
      $asList: function() {
        return [W.MimeType];
      },
      $asImmutableListMixin: function() {
        return [W.MimeType];
      },
      "%": "MimeTypeArray"
    },
    MouseEvent: {
      "^": "UIEvent;",
      $isMouseEvent: 1,
      "%": "WheelEvent;DragEvent|MouseEvent"
    },
    Node: {
      "^": "EventTarget;",
      toString$0: function(receiver) {
        var value = receiver.nodeValue;
        return value == null ? this.super$Interceptor$toString(receiver) : value;
      },
      append$1: function(receiver, node) {
        return receiver.appendChild(node);
      },
      $isNode: 1,
      "%": "DocumentFragment|DocumentType|ShadowRoot;Node"
    },
    NodeList: {
      "^": "_NodeList_Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.interceptedTypeCheck(value, "$isNode");
        throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
      },
      elementAt$1: function(receiver, index) {
        if (index < 0 || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.Node];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.Node];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.Node];
      },
      $asListMixin: function() {
        return [W.Node];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $asImmutableListMixin: function() {
        return [W.Node];
      },
      "%": "NodeList|RadioNodeList"
    },
    ObjectElement: {
      "^": "HtmlElement;0height=,0width=",
      "%": "HTMLObjectElement"
    },
    OffscreenCanvas: {
      "^": "EventTarget;0height=,0width=",
      "%": "OffscreenCanvas"
    },
    OptionElement: {
      "^": "HtmlElement;0value=",
      "%": "HTMLOptionElement"
    },
    OutputElement: {
      "^": "HtmlElement;0value=",
      "%": "HTMLOutputElement"
    },
    PaintSize: {
      "^": "Interceptor;0height=,0width=",
      "%": "PaintSize"
    },
    ParamElement: {
      "^": "HtmlElement;0value=",
      "%": "HTMLParamElement"
    },
    Plugin: {
      "^": "Interceptor;0length=",
      $isPlugin: 1,
      "%": "Plugin"
    },
    PluginArray: {
      "^": "_PluginArray_Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.interceptedTypeCheck(value, "$isPlugin");
        throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
      },
      elementAt$1: function(receiver, index) {
        if (index < 0 || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.Plugin];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.Plugin];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.Plugin];
      },
      $asListMixin: function() {
        return [W.Plugin];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.Plugin];
      },
      $isList: 1,
      $asList: function() {
        return [W.Plugin];
      },
      $asImmutableListMixin: function() {
        return [W.Plugin];
      },
      "%": "PluginArray"
    },
    PointerEvent: {
      "^": "MouseEvent;0height=,0width=",
      "%": "PointerEvent"
    },
    PresentationAvailability: {
      "^": "EventTarget;0value=",
      "%": "PresentationAvailability"
    },
    ProgressElement: {
      "^": "HtmlElement;0value=",
      "%": "HTMLProgressElement"
    },
    ProgressEvent: {
      "^": "Event;",
      $isProgressEvent: 1,
      "%": "ProgressEvent|ResourceProgressEvent"
    },
    RtcStatsReport: {
      "^": "_RtcStatsReport_Interceptor_MapMixin;",
      $index: function(receiver, key) {
        return P.convertNativeToDart_Dictionary(receiver.get(H.stringTypeCheck(key)));
      },
      forEach$1: function(receiver, f) {
        var entries, entry;
        H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String,,]});
        entries = receiver.entries();
        for (; true;) {
          entry = entries.next();
          if (entry.done)
            return;
          f.call$2(entry.value[0], P.convertNativeToDart_Dictionary(entry.value[1]));
        }
      },
      get$keys: function(receiver) {
        var keys = H.setRuntimeTypeInfo([], [P.String]);
        this.forEach$1(receiver, new W.RtcStatsReport_keys_closure(keys));
        return keys;
      },
      get$length: function(receiver) {
        return receiver.size;
      },
      get$isEmpty: function(receiver) {
        return receiver.size === 0;
      },
      $asMapMixin: function() {
        return [P.String, null];
      },
      $isMap: 1,
      $asMap: function() {
        return [P.String, null];
      },
      "%": "RTCStatsReport"
    },
    RtcStatsReport_keys_closure: {
      "^": "Closure:8;keys",
      call$2: function(k, v) {
        return C.JSArray_methods.add$1(this.keys, k);
      }
    },
    Screen: {
      "^": "Interceptor;0height=,0width=",
      "%": "Screen"
    },
    SelectElement: {
      "^": "HtmlElement;0length=,0value=",
      "%": "HTMLSelectElement"
    },
    SourceBuffer: {
      "^": "EventTarget;",
      $isSourceBuffer: 1,
      "%": "SourceBuffer"
    },
    SourceBufferList: {
      "^": "_SourceBufferList_EventTarget_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.interceptedTypeCheck(value, "$isSourceBuffer");
        throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
      },
      elementAt$1: function(receiver, index) {
        if (index < 0 || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.SourceBuffer];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.SourceBuffer];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.SourceBuffer];
      },
      $asListMixin: function() {
        return [W.SourceBuffer];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.SourceBuffer];
      },
      $isList: 1,
      $asList: function() {
        return [W.SourceBuffer];
      },
      $asImmutableListMixin: function() {
        return [W.SourceBuffer];
      },
      "%": "SourceBufferList"
    },
    SpeechGrammar: {
      "^": "Interceptor;",
      $isSpeechGrammar: 1,
      "%": "SpeechGrammar"
    },
    SpeechGrammarList: {
      "^": "_SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.interceptedTypeCheck(value, "$isSpeechGrammar");
        throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
      },
      elementAt$1: function(receiver, index) {
        if (index < 0 || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.SpeechGrammar];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.SpeechGrammar];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.SpeechGrammar];
      },
      $asListMixin: function() {
        return [W.SpeechGrammar];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.SpeechGrammar];
      },
      $isList: 1,
      $asList: function() {
        return [W.SpeechGrammar];
      },
      $asImmutableListMixin: function() {
        return [W.SpeechGrammar];
      },
      "%": "SpeechGrammarList"
    },
    SpeechRecognitionResult: {
      "^": "Interceptor;0length=",
      $isSpeechRecognitionResult: 1,
      "%": "SpeechRecognitionResult"
    },
    Storage: {
      "^": "_Storage_Interceptor_MapMixin;",
      $index: function(receiver, key) {
        return this._getItem$1(receiver, H.stringTypeCheck(key));
      },
      forEach$1: function(receiver, f) {
        var i, key;
        H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String, P.String]});
        for (i = 0; true; ++i) {
          key = this._key$1(receiver, i);
          if (key == null)
            return;
          f.call$2(key, this._getItem$1(receiver, key));
        }
      },
      get$keys: function(receiver) {
        var keys = H.setRuntimeTypeInfo([], [P.String]);
        this.forEach$1(receiver, new W.Storage_keys_closure(keys));
        return keys;
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      get$isEmpty: function(receiver) {
        return this._key$1(receiver, 0) == null;
      },
      _getItem$1: function(receiver, key) {
        return receiver.getItem(key);
      },
      _key$1: function(receiver, index) {
        return receiver.key(index);
      },
      $asMapMixin: function() {
        return [P.String, P.String];
      },
      $isMap: 1,
      $asMap: function() {
        return [P.String, P.String];
      },
      "%": "Storage"
    },
    Storage_keys_closure: {
      "^": "Closure:27;keys",
      call$2: function(k, v) {
        return C.JSArray_methods.add$1(this.keys, k);
      }
    },
    StyleSheet: {
      "^": "Interceptor;",
      $isStyleSheet: 1,
      "%": "CSSStyleSheet|StyleSheet"
    },
    TextAreaElement: {
      "^": "HtmlElement;0value=",
      "%": "HTMLTextAreaElement"
    },
    TextMetrics: {
      "^": "Interceptor;0width=",
      "%": "TextMetrics"
    },
    TextTrack: {
      "^": "EventTarget;",
      $isTextTrack: 1,
      "%": "TextTrack"
    },
    TextTrackCue: {
      "^": "EventTarget;",
      $isTextTrackCue: 1,
      "%": "TextTrackCue|VTTCue"
    },
    TextTrackCueList: {
      "^": "_TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.interceptedTypeCheck(value, "$isTextTrackCue");
        throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
      },
      elementAt$1: function(receiver, index) {
        if (index < 0 || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.TextTrackCue];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.TextTrackCue];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.TextTrackCue];
      },
      $asListMixin: function() {
        return [W.TextTrackCue];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.TextTrackCue];
      },
      $isList: 1,
      $asList: function() {
        return [W.TextTrackCue];
      },
      $asImmutableListMixin: function() {
        return [W.TextTrackCue];
      },
      "%": "TextTrackCueList"
    },
    TextTrackList: {
      "^": "_TextTrackList_EventTarget_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.interceptedTypeCheck(value, "$isTextTrack");
        throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
      },
      elementAt$1: function(receiver, index) {
        if (index < 0 || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.TextTrack];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.TextTrack];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.TextTrack];
      },
      $asListMixin: function() {
        return [W.TextTrack];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.TextTrack];
      },
      $isList: 1,
      $asList: function() {
        return [W.TextTrack];
      },
      $asImmutableListMixin: function() {
        return [W.TextTrack];
      },
      "%": "TextTrackList"
    },
    TimeRanges: {
      "^": "Interceptor;0length=",
      "%": "TimeRanges"
    },
    Touch: {
      "^": "Interceptor;",
      $isTouch: 1,
      "%": "Touch"
    },
    TouchList: {
      "^": "_TouchList_Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.interceptedTypeCheck(value, "$isTouch");
        throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
      },
      elementAt$1: function(receiver, index) {
        if (index < 0 || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.Touch];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.Touch];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.Touch];
      },
      $asListMixin: function() {
        return [W.Touch];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.Touch];
      },
      $isList: 1,
      $asList: function() {
        return [W.Touch];
      },
      $asImmutableListMixin: function() {
        return [W.Touch];
      },
      "%": "TouchList"
    },
    TrackDefaultList: {
      "^": "Interceptor;0length=",
      "%": "TrackDefaultList"
    },
    UIEvent: {
      "^": "Event;",
      "%": "CompositionEvent|FocusEvent|KeyboardEvent|TextEvent|TouchEvent;UIEvent"
    },
    Url: {
      "^": "Interceptor;",
      toString$0: function(receiver) {
        return String(receiver);
      },
      "%": "URL"
    },
    VideoElement: {
      "^": "MediaElement;0height=,0width=",
      "%": "HTMLVideoElement"
    },
    VideoTrackList: {
      "^": "EventTarget;0length=",
      "%": "VideoTrackList"
    },
    VisualViewport: {
      "^": "EventTarget;0height=,0width=",
      "%": "VisualViewport"
    },
    VttRegion: {
      "^": "Interceptor;0width=",
      "%": "VTTRegion"
    },
    _Attr: {
      "^": "Node;0value=",
      "%": "Attr"
    },
    _CssRuleList: {
      "^": "__CssRuleList_Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.interceptedTypeCheck(value, "$isCssRule");
        throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
      },
      elementAt$1: function(receiver, index) {
        if (index < 0 || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.CssRule];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.CssRule];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.CssRule];
      },
      $asListMixin: function() {
        return [W.CssRule];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.CssRule];
      },
      $isList: 1,
      $asList: function() {
        return [W.CssRule];
      },
      $asImmutableListMixin: function() {
        return [W.CssRule];
      },
      "%": "CSSRuleList"
    },
    _DomRect: {
      "^": "DomRectReadOnly;",
      toString$0: function(receiver) {
        return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
      },
      $eq: function(receiver, other) {
        var t1;
        if (other == null)
          return false;
        if (!H.checkSubtype(other, "$isRectangle", [P.num], "$asRectangle"))
          return false;
        if (receiver.left === other.left)
          if (receiver.top === other.top) {
            t1 = J.getInterceptor$x(other);
            t1 = receiver.width === t1.get$width(other) && receiver.height === t1.get$height(other);
          } else
            t1 = false;
        else
          t1 = false;
        return t1;
      },
      get$hashCode: function(receiver) {
        return W._JenkinsSmiHash_hash4(receiver.left & 0x1FFFFFFF, receiver.top & 0x1FFFFFFF, receiver.width & 0x1FFFFFFF, receiver.height & 0x1FFFFFFF);
      },
      get$height: function(receiver) {
        return receiver.height;
      },
      get$width: function(receiver) {
        return receiver.width;
      },
      "%": "ClientRect|DOMRect"
    },
    _GamepadList: {
      "^": "__GamepadList_Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.interceptedTypeCheck(value, "$isGamepad");
        throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
      },
      elementAt$1: function(receiver, index) {
        if (index < 0 || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.Gamepad];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.Gamepad];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.Gamepad];
      },
      $asListMixin: function() {
        return [W.Gamepad];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.Gamepad];
      },
      $isList: 1,
      $asList: function() {
        return [W.Gamepad];
      },
      $asImmutableListMixin: function() {
        return [W.Gamepad];
      },
      "%": "GamepadList"
    },
    _NamedNodeMap: {
      "^": "__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.interceptedTypeCheck(value, "$isNode");
        throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
      },
      elementAt$1: function(receiver, index) {
        if (index < 0 || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.Node];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.Node];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.Node];
      },
      $asListMixin: function() {
        return [W.Node];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $asImmutableListMixin: function() {
        return [W.Node];
      },
      "%": "MozNamedAttrMap|NamedNodeMap"
    },
    _SpeechRecognitionResultList: {
      "^": "__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.interceptedTypeCheck(value, "$isSpeechRecognitionResult");
        throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
      },
      elementAt$1: function(receiver, index) {
        if (index < 0 || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.SpeechRecognitionResult];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.SpeechRecognitionResult];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.SpeechRecognitionResult];
      },
      $asListMixin: function() {
        return [W.SpeechRecognitionResult];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.SpeechRecognitionResult];
      },
      $isList: 1,
      $asList: function() {
        return [W.SpeechRecognitionResult];
      },
      $asImmutableListMixin: function() {
        return [W.SpeechRecognitionResult];
      },
      "%": "SpeechRecognitionResultList"
    },
    _StyleSheetList: {
      "^": "__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.interceptedTypeCheck(value, "$isStyleSheet");
        throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
      },
      elementAt$1: function(receiver, index) {
        if (index < 0 || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.StyleSheet];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.StyleSheet];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.StyleSheet];
      },
      $asListMixin: function() {
        return [W.StyleSheet];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.StyleSheet];
      },
      $isList: 1,
      $asList: function() {
        return [W.StyleSheet];
      },
      $asImmutableListMixin: function() {
        return [W.StyleSheet];
      },
      "%": "StyleSheetList"
    },
    _EventStream: {
      "^": "Stream;_html$_target,_eventType,_useCapture,$ti",
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        var t1 = H.getTypeArgumentByIndex(this, 0);
        H.functionTypeCheck(onData, {func: 1, ret: -1, args: [t1]});
        H.functionTypeCheck(onDone, {func: 1, ret: -1});
        return W._EventStreamSubscription$(this._html$_target, this._eventType, onData, false, t1);
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      }
    },
    _ElementEventStreamImpl: {
      "^": "_EventStream;_html$_target,_eventType,_useCapture,$ti"
    },
    _EventStreamSubscription: {
      "^": "StreamSubscription;_pauseCount,_html$_target,_eventType,_html$_onData,_useCapture,$ti",
      set$_html$_onData: function(_onData) {
        this._html$_onData = H.functionTypeCheck(_onData, {func: 1, args: [W.Event]});
      },
      cancel$0: function(_) {
        if (this._html$_target == null)
          return;
        this._unlisten$0();
        this._html$_target = null;
        this.set$_html$_onData(null);
        return;
      },
      pause$1: function(_, resumeSignal) {
        if (this._html$_target == null)
          return;
        ++this._pauseCount;
        this._unlisten$0();
      },
      pause$0: function($receiver) {
        return this.pause$1($receiver, null);
      },
      resume$0: function(_) {
        if (this._html$_target == null || this._pauseCount <= 0)
          return;
        --this._pauseCount;
        this._tryResume$0();
      },
      _tryResume$0: function() {
        var t1 = this._html$_onData;
        if (t1 != null && this._pauseCount <= 0)
          J.addEventListener$3$x(this._html$_target, this._eventType, t1, false);
      },
      _unlisten$0: function() {
        var t1, t2, t3;
        t1 = this._html$_onData;
        t2 = t1 != null;
        if (t2) {
          t3 = this._html$_target;
          t3.toString;
          H.functionTypeCheck(t1, {func: 1, args: [W.Event]});
          if (t2)
            J._removeEventListener$3$x(t3, this._eventType, t1, false);
        }
      },
      static: {
        _EventStreamSubscription$: function(_target, _eventType, onData, _useCapture, $T) {
          var t1 = W._wrapZone(new W._EventStreamSubscription_closure(onData), W.Event);
          t1 = new W._EventStreamSubscription(0, _target, _eventType, t1, false, [$T]);
          t1._tryResume$0();
          return t1;
        }
      }
    },
    _EventStreamSubscription_closure: {
      "^": "Closure:28;onData",
      call$1: function(e) {
        return this.onData.call$1(H.interceptedTypeCheck(e, "$isEvent"));
      }
    },
    ImmutableListMixin: {
      "^": "Object;$ti",
      get$iterator: function(receiver) {
        return new W.FixedSizeListIterator(receiver, this.get$length(receiver), -1, [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ImmutableListMixin", 0)]);
      },
      add$1: function(receiver, value) {
        H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ImmutableListMixin", 0));
        throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
      },
      addAll$1: function(receiver, iterable) {
        H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ImmutableListMixin", 0)], "$asIterable");
        throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
      }
    },
    FixedSizeListIterator: {
      "^": "Object;_array,_html$_length,_position,0_html$_current,$ti",
      set$_html$_current: function(_current) {
        this._html$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
      },
      moveNext$0: function() {
        var nextPosition, t1;
        nextPosition = this._position + 1;
        t1 = this._html$_length;
        if (nextPosition < t1) {
          this.set$_html$_current(J.$index$asx(this._array, nextPosition));
          this._position = nextPosition;
          return true;
        }
        this.set$_html$_current(null);
        this._position = t1;
        return false;
      },
      get$current: function(_) {
        return this._html$_current;
      },
      $isIterator: 1
    },
    _CssStyleDeclaration_Interceptor_CssStyleDeclarationBase: {
      "^": "Interceptor+CssStyleDeclarationBase;"
    },
    _DomRectList_Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;"
    },
    _DomRectList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_DomRectList_Interceptor_ListMixin+ImmutableListMixin;"
    },
    _DomStringList_Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;"
    },
    _DomStringList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_DomStringList_Interceptor_ListMixin+ImmutableListMixin;"
    },
    _FileList_Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;"
    },
    _FileList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_FileList_Interceptor_ListMixin+ImmutableListMixin;"
    },
    _HtmlCollection_Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;"
    },
    _HtmlCollection_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_HtmlCollection_Interceptor_ListMixin+ImmutableListMixin;"
    },
    _MidiInputMap_Interceptor_MapMixin: {
      "^": "Interceptor+MapMixin;"
    },
    _MidiOutputMap_Interceptor_MapMixin: {
      "^": "Interceptor+MapMixin;"
    },
    _MimeTypeArray_Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;"
    },
    _MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_MimeTypeArray_Interceptor_ListMixin+ImmutableListMixin;"
    },
    _NodeList_Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;"
    },
    _NodeList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_NodeList_Interceptor_ListMixin+ImmutableListMixin;"
    },
    _PluginArray_Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;"
    },
    _PluginArray_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_PluginArray_Interceptor_ListMixin+ImmutableListMixin;"
    },
    _RtcStatsReport_Interceptor_MapMixin: {
      "^": "Interceptor+MapMixin;"
    },
    _SourceBufferList_EventTarget_ListMixin: {
      "^": "EventTarget+ListMixin;"
    },
    _SourceBufferList_EventTarget_ListMixin_ImmutableListMixin: {
      "^": "_SourceBufferList_EventTarget_ListMixin+ImmutableListMixin;"
    },
    _SpeechGrammarList_Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;"
    },
    _SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_SpeechGrammarList_Interceptor_ListMixin+ImmutableListMixin;"
    },
    _Storage_Interceptor_MapMixin: {
      "^": "Interceptor+MapMixin;"
    },
    _TextTrackCueList_Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;"
    },
    _TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_TextTrackCueList_Interceptor_ListMixin+ImmutableListMixin;"
    },
    _TextTrackList_EventTarget_ListMixin: {
      "^": "EventTarget+ListMixin;"
    },
    _TextTrackList_EventTarget_ListMixin_ImmutableListMixin: {
      "^": "_TextTrackList_EventTarget_ListMixin+ImmutableListMixin;"
    },
    _TouchList_Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;"
    },
    _TouchList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_TouchList_Interceptor_ListMixin+ImmutableListMixin;"
    },
    __CssRuleList_Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;"
    },
    __CssRuleList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "__CssRuleList_Interceptor_ListMixin+ImmutableListMixin;"
    },
    __GamepadList_Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;"
    },
    __GamepadList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "__GamepadList_Interceptor_ListMixin+ImmutableListMixin;"
    },
    __NamedNodeMap_Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;"
    },
    __NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "__NamedNodeMap_Interceptor_ListMixin+ImmutableListMixin;"
    },
    __SpeechRecognitionResultList_Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;"
    },
    __SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "__SpeechRecognitionResultList_Interceptor_ListMixin+ImmutableListMixin;"
    },
    __StyleSheetList_Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;"
    },
    __StyleSheetList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "__StyleSheetList_Interceptor_ListMixin+ImmutableListMixin;"
    }
  }], ["html_common", "dart:html_common",, P, {
    "^": "",
    convertNativeToDart_Dictionary: function(object) {
      var dict, keys, t1, _i, key;
      if (object == null)
        return;
      dict = P.LinkedHashMap_LinkedHashMap$_empty(P.String, null);
      keys = Object.getOwnPropertyNames(object);
      for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, H.throwConcurrentModificationError)(keys), ++_i) {
        key = H.stringTypeCheck(keys[_i]);
        dict.$indexSet(0, key, object[key]);
      }
      return dict;
    },
    convertNativePromiseToDartFuture: function(promise) {
      var t1, completer;
      t1 = new P._Future(0, $.Zone__current, [null]);
      completer = new P._AsyncCompleter(t1, [null]);
      promise.then(H.convertDartClosureToJS(new P.convertNativePromiseToDartFuture_closure(completer), 1))["catch"](H.convertDartClosureToJS(new P.convertNativePromiseToDartFuture_closure0(completer), 1));
      return t1;
    },
    Device_isOpera: function() {
      var t1 = $.Device__isOpera;
      if (t1 == null) {
        t1 = J.contains$2$asx(window.navigator.userAgent, "Opera", 0);
        $.Device__isOpera = t1;
      }
      return t1;
    },
    Device_cssPrefix: function() {
      var prefix, t1;
      prefix = $.Device__cachedCssPrefix;
      if (prefix != null)
        return prefix;
      t1 = $.Device__isFirefox;
      if (t1 == null) {
        t1 = J.contains$2$asx(window.navigator.userAgent, "Firefox", 0);
        $.Device__isFirefox = t1;
      }
      if (t1)
        prefix = "-moz-";
      else {
        t1 = $.Device__isIE;
        if (t1 == null) {
          t1 = !P.Device_isOpera() && J.contains$2$asx(window.navigator.userAgent, "Trident/", 0);
          $.Device__isIE = t1;
        }
        if (t1)
          prefix = "-ms-";
        else
          prefix = P.Device_isOpera() ? "-o-" : "-webkit-";
      }
      $.Device__cachedCssPrefix = prefix;
      return prefix;
    },
    _AcceptStructuredClone: {
      "^": "Object;",
      findSlot$1: function(value) {
        var t1, $length, i, t2;
        t1 = this.values;
        $length = t1.length;
        for (i = 0; i < $length; ++i) {
          t2 = t1[i];
          if (t2 == null ? value == null : t2 === value)
            return i;
        }
        C.JSArray_methods.add$1(t1, value);
        C.JSArray_methods.add$1(this.copies, null);
        return $length;
      },
      walk$1: function(e) {
        var _box_0, millisSinceEpoch, t1, proto, slot, copy, l, t2, $length, i;
        _box_0 = {};
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (e instanceof Date) {
          millisSinceEpoch = e.getTime();
          if (Math.abs(millisSinceEpoch) <= 864e13)
            t1 = false;
          else
            t1 = true;
          if (t1)
            H.throwExpression(P.ArgumentError$("DateTime is outside valid range: " + millisSinceEpoch));
          return new P.DateTime(millisSinceEpoch, true);
        }
        if (e instanceof RegExp)
          throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
        if (typeof Promise != "undefined" && e instanceof Promise)
          return P.convertNativePromiseToDartFuture(e);
        proto = Object.getPrototypeOf(e);
        if (proto === Object.prototype || proto === null) {
          slot = this.findSlot$1(e);
          t1 = this.copies;
          if (slot >= t1.length)
            return H.ioore(t1, slot);
          copy = t1[slot];
          _box_0.copy = copy;
          if (copy != null)
            return copy;
          copy = P.LinkedHashMap__makeEmpty();
          _box_0.copy = copy;
          C.JSArray_methods.$indexSet(t1, slot, copy);
          this.forEachJsField$2(e, new P._AcceptStructuredClone_walk_closure(_box_0, this));
          return _box_0.copy;
        }
        if (e instanceof Array) {
          l = e;
          slot = this.findSlot$1(l);
          t1 = this.copies;
          if (slot >= t1.length)
            return H.ioore(t1, slot);
          copy = t1[slot];
          if (copy != null)
            return copy;
          t2 = J.getInterceptor$asx(l);
          $length = t2.get$length(l);
          copy = this.mustCopy ? new Array($length) : l;
          C.JSArray_methods.$indexSet(t1, slot, copy);
          for (t1 = J.getInterceptor$ax(copy), i = 0; i < $length; ++i)
            t1.$indexSet(copy, i, this.walk$1(t2.$index(l, i)));
          return copy;
        }
        return e;
      },
      convertNativeToDart_AcceptStructuredClone$2$mustCopy: function(object, mustCopy) {
        this.mustCopy = mustCopy;
        return this.walk$1(object);
      }
    },
    _AcceptStructuredClone_walk_closure: {
      "^": "Closure:29;_box_0,$this",
      call$2: function(key, value) {
        var t1, t2;
        t1 = this._box_0.copy;
        t2 = this.$this.walk$1(value);
        J.$indexSet$ax(t1, key, t2);
        return t2;
      }
    },
    _AcceptStructuredCloneDart2Js: {
      "^": "_AcceptStructuredClone;values,copies,mustCopy",
      forEachJsField$2: function(object, action) {
        var t1, t2, _i, key;
        H.functionTypeCheck(action, {func: 1, args: [,,]});
        for (t1 = Object.keys(object), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          key = t1[_i];
          action.call$2(key, object[key]);
        }
      }
    },
    convertNativePromiseToDartFuture_closure: {
      "^": "Closure:2;completer",
      call$1: function(result) {
        return this.completer.complete$1(0, result);
      }
    },
    convertNativePromiseToDartFuture_closure0: {
      "^": "Closure:2;completer",
      call$1: function(result) {
        return this.completer.completeError$1(result);
      }
    }
  }], ["dart.dom.indexed_db", "dart:indexed_db",, P, {
    "^": "",
    Cursor: {
      "^": "Interceptor;",
      "%": ";IDBCursor"
    },
    CursorWithValue: {
      "^": "Cursor;",
      get$value: function(receiver) {
        return new P._AcceptStructuredCloneDart2Js([], [], false).convertNativeToDart_AcceptStructuredClone$2$mustCopy(receiver.value, false);
      },
      "%": "IDBCursorWithValue"
    },
    Observation: {
      "^": "Interceptor;0value=",
      "%": "IDBObservation"
    }
  }], ["dart.math", "dart:math",, P, {
    "^": "",
    _JSRandom: {
      "^": "Object;",
      nextDouble$0: function() {
        return Math.random();
      }
    },
    _RectangleBase: {
      "^": "Object;"
    },
    Rectangle: {
      "^": "_RectangleBase;$ti"
    }
  }], ["dart.dom.svg", "dart:svg",, P, {
    "^": "",
    Angle: {
      "^": "Interceptor;0value=",
      "%": "SVGAngle"
    },
    AnimatedLength: {
      "^": "Interceptor;",
      $isAnimatedLength: 1,
      "%": "SVGAnimatedLength"
    },
    FEBlendElement: {
      "^": "SvgElement;0height=,0width=",
      "%": "SVGFEBlendElement"
    },
    FEColorMatrixElement: {
      "^": "SvgElement;0height=,0width=",
      "%": "SVGFEColorMatrixElement"
    },
    FEComponentTransferElement: {
      "^": "SvgElement;0height=,0width=",
      "%": "SVGFEComponentTransferElement"
    },
    FECompositeElement: {
      "^": "SvgElement;0height=,0width=",
      "%": "SVGFECompositeElement"
    },
    FEConvolveMatrixElement: {
      "^": "SvgElement;0height=,0width=",
      "%": "SVGFEConvolveMatrixElement"
    },
    FEDiffuseLightingElement: {
      "^": "SvgElement;0height=,0width=",
      "%": "SVGFEDiffuseLightingElement"
    },
    FEDisplacementMapElement: {
      "^": "SvgElement;0height=,0width=",
      "%": "SVGFEDisplacementMapElement"
    },
    FEFloodElement: {
      "^": "SvgElement;0height=,0width=",
      "%": "SVGFEFloodElement"
    },
    FEGaussianBlurElement: {
      "^": "SvgElement;0height=,0width=",
      "%": "SVGFEGaussianBlurElement"
    },
    FEImageElement: {
      "^": "SvgElement;0height=,0width=",
      "%": "SVGFEImageElement"
    },
    FEMergeElement: {
      "^": "SvgElement;0height=,0width=",
      "%": "SVGFEMergeElement"
    },
    FEMorphologyElement: {
      "^": "SvgElement;0height=,0width=",
      "%": "SVGFEMorphologyElement"
    },
    FEOffsetElement: {
      "^": "SvgElement;0height=,0width=",
      "%": "SVGFEOffsetElement"
    },
    FESpecularLightingElement: {
      "^": "SvgElement;0height=,0width=",
      "%": "SVGFESpecularLightingElement"
    },
    FETileElement: {
      "^": "SvgElement;0height=,0width=",
      "%": "SVGFETileElement"
    },
    FETurbulenceElement: {
      "^": "SvgElement;0height=,0width=",
      "%": "SVGFETurbulenceElement"
    },
    FilterElement: {
      "^": "SvgElement;0height=,0width=",
      "%": "SVGFilterElement"
    },
    ForeignObjectElement: {
      "^": "GraphicsElement;0height=,0width=",
      "%": "SVGForeignObjectElement"
    },
    GeometryElement: {
      "^": "GraphicsElement;",
      "%": "SVGCircleElement|SVGEllipseElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement;SVGGeometryElement"
    },
    GraphicsElement: {
      "^": "SvgElement;",
      "%": "SVGAElement|SVGClipPathElement|SVGDefsElement|SVGGElement|SVGSwitchElement|SVGTSpanElement|SVGTextContentElement|SVGTextElement|SVGTextPathElement|SVGTextPositioningElement;SVGGraphicsElement"
    },
    ImageElement0: {
      "^": "GraphicsElement;0height=,0width=",
      "%": "SVGImageElement"
    },
    Length: {
      "^": "Interceptor;0value=",
      $isLength: 1,
      "%": "SVGLength"
    },
    LengthList: {
      "^": "_LengthList_Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return this.getItem$1(receiver, index);
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.interceptedTypeCheck(value, "$isLength");
        throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      getItem$1: function(receiver, index) {
        return receiver.getItem(index);
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.Length];
      },
      $asListMixin: function() {
        return [P.Length];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.Length];
      },
      $isList: 1,
      $asList: function() {
        return [P.Length];
      },
      $asImmutableListMixin: function() {
        return [P.Length];
      },
      "%": "SVGLengthList"
    },
    MaskElement: {
      "^": "SvgElement;0height=,0width=",
      "%": "SVGMaskElement"
    },
    Number: {
      "^": "Interceptor;0value=",
      $isNumber: 1,
      "%": "SVGNumber"
    },
    NumberList: {
      "^": "_NumberList_Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return this.getItem$1(receiver, index);
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.interceptedTypeCheck(value, "$isNumber");
        throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      getItem$1: function(receiver, index) {
        return receiver.getItem(index);
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.Number];
      },
      $asListMixin: function() {
        return [P.Number];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.Number];
      },
      $isList: 1,
      $asList: function() {
        return [P.Number];
      },
      $asImmutableListMixin: function() {
        return [P.Number];
      },
      "%": "SVGNumberList"
    },
    PatternElement: {
      "^": "SvgElement;0height=,0width=",
      "%": "SVGPatternElement"
    },
    PointList: {
      "^": "Interceptor;0length=",
      "%": "SVGPointList"
    },
    Rect: {
      "^": "Interceptor;0height=,0width=",
      "%": "SVGRect"
    },
    RectElement: {
      "^": "GeometryElement;0height=,0width=",
      "%": "SVGRectElement"
    },
    StringList: {
      "^": "_StringList_Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return this.getItem$1(receiver, index);
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.stringTypeCheck(value);
        throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      getItem$1: function(receiver, index) {
        return receiver.getItem(index);
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.String];
      },
      $asListMixin: function() {
        return [P.String];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.String];
      },
      $isList: 1,
      $asList: function() {
        return [P.String];
      },
      $asImmutableListMixin: function() {
        return [P.String];
      },
      "%": "SVGStringList"
    },
    SvgElement: {
      "^": "Element;",
      "%": "SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGComponentTransferFunctionElement|SVGDescElement|SVGDiscardElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFEPointLightElement|SVGFESpotLightElement|SVGGradientElement|SVGLinearGradientElement|SVGMPathElement|SVGMarkerElement|SVGMetadataElement|SVGRadialGradientElement|SVGScriptElement|SVGSetElement|SVGStopElement|SVGStyleElement|SVGSymbolElement|SVGTitleElement|SVGViewElement;SVGElement"
    },
    SvgSvgElement: {
      "^": "GraphicsElement;0height=,0width=",
      "%": "SVGSVGElement"
    },
    Transform: {
      "^": "Interceptor;",
      $isTransform: 1,
      "%": "SVGTransform"
    },
    TransformList: {
      "^": "_TransformList_Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return this.getItem$1(receiver, index);
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.interceptedTypeCheck(value, "$isTransform");
        throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      getItem$1: function(receiver, index) {
        return receiver.getItem(index);
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.Transform];
      },
      $asListMixin: function() {
        return [P.Transform];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.Transform];
      },
      $isList: 1,
      $asList: function() {
        return [P.Transform];
      },
      $asImmutableListMixin: function() {
        return [P.Transform];
      },
      "%": "SVGTransformList"
    },
    UseElement: {
      "^": "GraphicsElement;0height=,0width=",
      "%": "SVGUseElement"
    },
    _LengthList_Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;"
    },
    _LengthList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_LengthList_Interceptor_ListMixin+ImmutableListMixin;"
    },
    _NumberList_Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;"
    },
    _NumberList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_NumberList_Interceptor_ListMixin+ImmutableListMixin;"
    },
    _StringList_Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;"
    },
    _StringList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_StringList_Interceptor_ListMixin+ImmutableListMixin;"
    },
    _TransformList_Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;"
    },
    _TransformList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_TransformList_Interceptor_ListMixin+ImmutableListMixin;"
    }
  }], ["dart.typed_data", "dart:typed_data",, P, {
    "^": "",
    ByteBuffer: {
      "^": "Object;"
    },
    Endian: {
      "^": "Object;_littleEndian"
    },
    Uint8List: {
      "^": "Object;",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.int];
      },
      $isList: 1,
      $asList: function() {
        return [P.int];
      },
      $isTypedData: 1
    }
  }], ["dart.dom.web_audio", "dart:web_audio",, P, {
    "^": "",
    AudioBuffer: {
      "^": "Interceptor;0length=",
      "%": "AudioBuffer"
    },
    AudioParam: {
      "^": "Interceptor;0value=",
      "%": "AudioParam"
    },
    AudioParamMap: {
      "^": "_AudioParamMap_Interceptor_MapMixin;",
      $index: function(receiver, key) {
        return P.convertNativeToDart_Dictionary(receiver.get(H.stringTypeCheck(key)));
      },
      forEach$1: function(receiver, f) {
        var entries, entry;
        H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String,,]});
        entries = receiver.entries();
        for (; true;) {
          entry = entries.next();
          if (entry.done)
            return;
          f.call$2(entry.value[0], P.convertNativeToDart_Dictionary(entry.value[1]));
        }
      },
      get$keys: function(receiver) {
        var keys = H.setRuntimeTypeInfo([], [P.String]);
        this.forEach$1(receiver, new P.AudioParamMap_keys_closure(keys));
        return keys;
      },
      get$length: function(receiver) {
        return receiver.size;
      },
      get$isEmpty: function(receiver) {
        return receiver.size === 0;
      },
      $asMapMixin: function() {
        return [P.String, null];
      },
      $isMap: 1,
      $asMap: function() {
        return [P.String, null];
      },
      "%": "AudioParamMap"
    },
    AudioParamMap_keys_closure: {
      "^": "Closure:8;keys",
      call$2: function(k, v) {
        return C.JSArray_methods.add$1(this.keys, k);
      }
    },
    AudioTrackList: {
      "^": "EventTarget;0length=",
      "%": "AudioTrackList"
    },
    BaseAudioContext: {
      "^": "EventTarget;",
      "%": "AudioContext|webkitAudioContext;BaseAudioContext"
    },
    OfflineAudioContext: {
      "^": "BaseAudioContext;0length=",
      "%": "OfflineAudioContext"
    },
    _AudioParamMap_Interceptor_MapMixin: {
      "^": "Interceptor+MapMixin;"
    }
  }], ["dart.dom.web_gl", "dart:web_gl",, P, {
    "^": ""
  }], ["dart.dom.web_sql", "dart:web_sql",, P, {
    "^": "",
    SqlResultSetRowList: {
      "^": "_SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return P.convertNativeToDart_Dictionary(this._item_1$1(receiver, index));
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.interceptedTypeCheck(value, "$isMap");
        throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      _item_1$1: function(receiver, index) {
        return receiver.item(index);
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [[P.Map,,,]];
      },
      $asListMixin: function() {
        return [[P.Map,,,]];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [[P.Map,,,]];
      },
      $isList: 1,
      $asList: function() {
        return [[P.Map,,,]];
      },
      $asImmutableListMixin: function() {
        return [[P.Map,,,]];
      },
      "%": "SQLResultSetRowList"
    },
    _SqlResultSetRowList_Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;"
    },
    _SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_SqlResultSetRowList_Interceptor_ListMixin+ImmutableListMixin;"
    }
  }], ["", "package:async/src/delegate/future.dart",, R, {
    "^": "",
    DelegatingFuture: {
      "^": "Object;$ti",
      then$1$2$onError: function(onValue, onError, $S) {
        return this._future.then$1$2$onError(H.functionTypeCheck(onValue, {func: 1, ret: {futureOr: 1, type: $S}, args: [H.getTypeArgumentByIndex(this, 0)]}), onError, $S);
      },
      then$1$1: function(onValue, $S) {
        return this.then$1$2$onError(onValue, null, $S);
      },
      whenComplete$1: function(action) {
        return this._future.whenComplete$1(H.functionTypeCheck(action, {func: 1}));
      },
      $isFuture: 1
    }
  }], ["", "package:async/src/delegate/stream.dart",, Y, {
    "^": "",
    DelegatingStream: {
      "^": "StreamView;$ti"
    }
  }], ["fixnum", "package:fixnum/fixnum.dart",, V, {
    "^": "",
    Int64: {
      "^": "Object;_l,_m,_h",
      $and: function(_, other) {
        var o = V.Int64__promote(other);
        return new V.Int64(4194303 & this._l & o._l, 4194303 & this._m & o._m, 1048575 & this._h & o._h);
      },
      $shl: function(_, n) {
        var t1, res0, t2, t3, res1, res2;
        if (n >= 64)
          return C.Int64_0_0_0;
        if (n < 22) {
          t1 = this._l;
          res0 = C.JSInt_methods._shlPositive$1(t1, n);
          t2 = this._m;
          t3 = 22 - n;
          res1 = C.JSInt_methods._shlPositive$1(t2, n) | C.JSInt_methods._shrReceiverPositive$1(t1, t3);
          res2 = C.JSInt_methods._shlPositive$1(this._h, n) | C.JSInt_methods._shrReceiverPositive$1(t2, t3);
        } else {
          t1 = this._l;
          if (n < 44) {
            t2 = n - 22;
            res1 = C.JSInt_methods.$shl(t1, t2);
            res2 = C.JSInt_methods.$shl(this._m, t2) | C.JSInt_methods._shrReceiverPositive$1(t1, 44 - n);
          } else {
            res2 = C.JSInt_methods.$shl(t1, n - 44);
            res1 = 0;
          }
          res0 = 0;
        }
        return new V.Int64(4194303 & res0, 4194303 & res1, 1048575 & res2);
      },
      $shr: function(_, n) {
        var a2, negative, res2, t1, t2, res1, res0;
        if (n >= 64)
          return (this._h & 524288) !== 0 ? C.Int64_4194303_4194303_1048575 : C.Int64_0_0_0;
        a2 = this._h;
        negative = (a2 & 524288) !== 0;
        if (negative && true)
          a2 += 3145728;
        if (n < 22) {
          res2 = V.Int64__shiftRight(a2, n);
          if (negative)
            res2 |= 1048575 & ~C.JSInt_methods._shrBothPositive$1(1048575, n);
          t1 = this._m;
          t2 = 22 - n;
          res1 = V.Int64__shiftRight(t1, n) | C.JSInt_methods.$shl(a2, t2);
          res0 = V.Int64__shiftRight(this._l, n) | C.JSInt_methods.$shl(t1, t2);
        } else if (n < 44) {
          res2 = negative ? 1048575 : 0;
          t1 = n - 22;
          res1 = V.Int64__shiftRight(a2, t1);
          if (negative)
            res1 |= 4194303 & ~C.JSInt_methods._shrReceiverPositive$1(4194303, t1);
          res0 = V.Int64__shiftRight(this._m, t1) | C.JSInt_methods.$shl(a2, 44 - n);
        } else {
          res2 = negative ? 1048575 : 0;
          res1 = negative ? 4194303 : 0;
          t1 = n - 44;
          res0 = V.Int64__shiftRight(a2, t1);
          if (negative)
            res0 |= 4194303 & ~C.JSInt_methods._shrReceiverPositive$1(4194303, t1);
        }
        return new V.Int64(4194303 & res0, 4194303 & res1, 1048575 & res2);
      },
      $eq: function(_, other) {
        var o;
        if (other == null)
          return false;
        if (other instanceof V.Int64)
          o = other;
        else if (typeof other === "number" && Math.floor(other) === other) {
          if (this._h === 0 && this._m === 0)
            return this._l === other;
          if ((4194303 & other) === other)
            return false;
          o = V.Int64_Int64(other);
        } else
          o = null;
        if (o != null)
          return this._l === o._l && this._m === o._m && this._h === o._h;
        return false;
      },
      compareTo$1: function(_, other) {
        return this._compareTo$1(other);
      },
      _compareTo$1: function(other) {
        var o, t1, signa, t2;
        o = V.Int64__promote(other);
        t1 = this._h;
        signa = t1 >>> 19;
        t2 = o._h;
        if (signa !== t2 >>> 19)
          return signa === 0 ? 1 : -1;
        if (t1 > t2)
          return 1;
        else if (t1 < t2)
          return -1;
        t1 = this._m;
        t2 = o._m;
        if (t1 > t2)
          return 1;
        else if (t1 < t2)
          return -1;
        t1 = this._l;
        t2 = o._l;
        if (t1 > t2)
          return 1;
        else if (t1 < t2)
          return -1;
        return 0;
      },
      $lt: function(_, other) {
        return this._compareTo$1(other) < 0;
      },
      $gt: function(_, other) {
        return this._compareTo$1(other) > 0;
      },
      get$hashCode: function(_) {
        var t1 = this._m;
        return (((t1 & 1023) << 22 | this._l) ^ (this._h << 12 | t1 >>> 10 & 4095)) >>> 0;
      },
      toUnsigned$1: function(_, width) {
        var t1;
        if (width > 64)
          throw H.wrapException(P.RangeError$range(width, 0, 64, null, null));
        if (width > 44)
          return new V.Int64(4194303 & this._l, 4194303 & this._m, 1048575 & this._h & C.JSInt_methods.$shl(1, width - 44) - 1);
        else {
          t1 = this._l;
          if (width > 22)
            return new V.Int64(4194303 & t1, 4194303 & this._m & C.JSInt_methods.$shl(1, width - 22) - 1, 0);
          else
            return new V.Int64(4194303 & t1 & C.JSInt_methods._shlPositive$1(1, width) - 1, 0, 0);
        }
      },
      toInt$0: function(_) {
        var l, m, h;
        l = this._l;
        m = this._m;
        h = this._h;
        if ((h & 524288) !== 0)
          return -(1 + (4194303 & ~l) + 4194304 * (4194303 & ~m) + 17592186044416 * (1048575 & ~h));
        else
          return l + 4194304 * m + 17592186044416 * h;
      },
      toString$0: function(_) {
        var d0, d1, d2, d00, d10, sign;
        d0 = this._l;
        d1 = this._m;
        d2 = this._h;
        if ((d2 & 524288) !== 0) {
          d0 = 0 - d0;
          d00 = d0 & 4194303;
          d1 = 0 - d1 - (C.JSInt_methods._shrOtherPositive$1(d0, 22) & 1);
          d10 = d1 & 4194303;
          d2 = 0 - d2 - (C.JSInt_methods._shrOtherPositive$1(d1, 22) & 1) & 1048575;
          d1 = d10;
          d0 = d00;
          sign = "-";
        } else
          sign = "";
        return V.Int64__toRadixStringUnsigned(10, d0, d1, d2, sign);
      },
      $isComparable: 1,
      $asComparable: Isolate.functionThatReturnsNull,
      static: {
        Int64_Int64: function(value) {
          var negative, v2, v1, t1, t2, t3;
          if (value < 0) {
            value = -value;
            negative = true;
          } else
            negative = false;
          v2 = C.JSInt_methods._tdivFast$1(value, 17592186044416);
          value -= v2 * 17592186044416;
          v1 = C.JSInt_methods._tdivFast$1(value, 4194304);
          t1 = 4194303 & v1;
          t2 = 1048575 & v2;
          t3 = 4194303 & value - v1 * 4194304;
          return negative ? V.Int64__sub(0, 0, 0, t3, t1, t2) : new V.Int64(t3, t1, t2);
        },
        Int64_Int64$fromBytes: function(bytes) {
          H.assertSubtype(bytes, "$isList", [P.int], "$asList");
          if (7 >= bytes.length)
            return H.ioore(bytes, 7);
          return V.Int64_Int64$fromInts(((((bytes[7] & 255) << 8 | bytes[6] & 255) << 8 | bytes[5] & 255) << 8 | bytes[4] & 255) >>> 0, ((((bytes[3] & 255) << 8 | bytes[2] & 255) << 8 | bytes[1] & 255) << 8 | bytes[0] & 255) >>> 0);
        },
        Int64_Int64$fromInts: function($top, bottom) {
          $top &= 4294967295;
          bottom &= 4294967295;
          return new V.Int64(4194303 & 4194303 & bottom, 4194303 & ((4095 & $top) << 10 | 1023 & bottom >>> 22), 1048575 & 1048575 & $top >>> 12);
        },
        Int64__promote: function(value) {
          if (value instanceof V.Int64)
            return value;
          else if (typeof value === "number" && Math.floor(value) === value)
            return V.Int64_Int64(value);
          throw H.wrapException(P.ArgumentError$value(value, null, null));
        },
        Int64__toRadixStringUnsigned: function(radix, d0, d1, d2, sign) {
          var d4, d3, fatRadix, chunk1, chunk2, chunk3, q, q0, q1, q2, q3, chunk10, residue;
          if (d0 === 0 && d1 === 0 && d2 === 0)
            return "0";
          d4 = (d2 << 4 | d1 >>> 18) >>> 0;
          d3 = d1 >>> 8 & 1023;
          d2 = (d1 << 2 | d0 >>> 20) & 1023;
          d1 = d0 >>> 10 & 1023;
          d0 &= 1023;
          if (radix >= 37)
            return H.ioore(C.List_WrN, radix);
          fatRadix = C.List_WrN[radix];
          chunk1 = "";
          chunk2 = "";
          chunk3 = "";
          while (true) {
            if (!!(d4 === 0 && d3 === 0))
              break;
            q = C.JSInt_methods.$tdiv(d4, fatRadix);
            d3 += d4 - q * fatRadix << 10 >>> 0;
            q0 = C.JSInt_methods.$tdiv(d3, fatRadix);
            d2 += d3 - q0 * fatRadix << 10 >>> 0;
            q1 = C.JSInt_methods.$tdiv(d2, fatRadix);
            d1 += d2 - q1 * fatRadix << 10 >>> 0;
            q2 = C.JSInt_methods.$tdiv(d1, fatRadix);
            d0 += d1 - q2 * fatRadix << 10 >>> 0;
            q3 = C.JSInt_methods.$tdiv(d0, fatRadix);
            chunk10 = C.JSString_methods.substring$1(C.JSInt_methods.toRadixString$1(fatRadix + (d0 - q3 * fatRadix), radix), 1);
            chunk3 = chunk2;
            chunk2 = chunk1;
            chunk1 = chunk10;
            d3 = q0;
            d4 = q;
            d2 = q1;
            d1 = q2;
            d0 = q3;
          }
          residue = (d2 << 20 >>> 0) + (d1 << 10 >>> 0) + d0;
          return sign + (residue === 0 ? "" : C.JSInt_methods.toRadixString$1(residue, radix)) + chunk1 + chunk2 + chunk3;
        },
        Int64__sub: function(a0, a1, a2, b0, b1, b2) {
          var diff0, diff1;
          diff0 = a0 - b0;
          diff1 = a1 - b1 - (C.JSInt_methods._shrOtherPositive$1(diff0, 22) & 1);
          return new V.Int64(4194303 & diff0, 4194303 & diff1, 1048575 & a2 - b2 - (C.JSInt_methods._shrOtherPositive$1(diff1, 22) & 1));
        },
        Int64__shiftRight: function(x, n) {
          var shifted;
          if (x >= 0)
            return C.JSInt_methods.$shr(x, n);
          else {
            shifted = C.JSInt_methods.$shr(x, n);
            return shifted >= 2147483648 ? shifted - 4294967296 : shifted;
          }
        }
      }
    }
  }], ["", "package:grpc/src/client/call.dart",, V, {
    "^": "",
    ClientCall: {
      "^": "Object;_call$_method,_requests,options,_headers,_trailers,_hasReceivedResponses,0_headerMetadata,0_stream,0_responses,0_requestSubscription,0_responseSubscription,isCancelled,0_timeoutTimer,$ti",
      set$_headerMetadata: function(_headerMetadata) {
        var t1 = P.String;
        this._headerMetadata = H.assertSubtype(_headerMetadata, "$isMap", [t1, t1], "$asMap");
      },
      set$_responses: function(_responses) {
        this._responses = H.assertSubtype(_responses, "$isStreamController", [H.getTypeArgumentByIndex(this, 1)], "$asStreamController");
      },
      set$_requestSubscription: function(_requestSubscription) {
        this._requestSubscription = H.assertSubtype(_requestSubscription, "$isStreamSubscription", [[P.List, P.int]], "$asStreamSubscription");
      },
      set$_responseSubscription: function(_responseSubscription) {
        this._responseSubscription = H.assertSubtype(_responseSubscription, "$isStreamSubscription", [D.GrpcMessage], "$asStreamSubscription");
      },
      onConnectionError$1: [function(error) {
        this._terminateWithError$1(new E.GrpcError(14, "Error connecting: " + H.S(error)));
      }, "call$1", "get$onConnectionError", 4, 0, 2],
      _terminateWithError$1: function(error) {
        var t1 = this._responses;
        if ((t1._state & 4) === 0)
          t1.addError$1(error);
        this._safeTerminate$0();
      },
      onConnectionReady$1: function(connection) {
        var t1, t2, t3, t4, metadata;
        t1 = {};
        if (this.isCancelled)
          return;
        t2 = this.options;
        t3 = t2.metadataProviders;
        t2 = t2.metadata;
        if (t3.length === 0)
          this._sendRequest$2(connection, V.ClientCall__sanitizeMetadata(t2));
        else {
          t4 = P.String;
          metadata = P.LinkedHashMap_LinkedHashMap$from(t2, t4, t4);
          t1.audience = null;
          P.Future_forEach(t3, new V.ClientCall_onConnectionReady_closure(t1, metadata), {func: 1, ret: {futureOr: 1, type: -1}, args: [[P.Map, P.String, P.String], P.String]}).then$1$1(new V.ClientCall_onConnectionReady_closure0(this, connection, metadata), -1).catchError$1(this.get$_onMetadataProviderError());
        }
      },
      _onMetadataProviderError$1: [function(error) {
        this._terminateWithError$1(new E.GrpcError(13, "Error making call: " + H.S(error)));
      }, "call$1", "get$_onMetadataProviderError", 4, 0, 2],
      _sendRequest$2: function(connection, metadata) {
        var e, t1, t2, t3, t4, exception, t5, t6, t7, t8;
        t1 = P.String;
        t1 = [t1, t1];
        H.assertSubtype(metadata, "$isMap", t1, "$asMap");
        try {
          t2 = this._call$_method.path;
          t1 = H.assertSubtype(metadata, "$isMap", t1, "$asMap");
          t3 = connection._transport;
          t3.toString;
          t4 = new XMLHttpRequest();
          t3._request = t4;
          C.HttpRequest_methods.open$2(t4, "POST", t3.host + ":" + t3.port + t2);
          t3.initializeRequest$2(t3._request, t1);
          this._stream = T.XhrTransportStream$(t3._request);
        } catch (exception) {
          e = H.unwrapException(exception);
          this._terminateWithError$1(new E.GrpcError(14, "Error making call: " + H.S(e)));
          return;
        }
        t1 = this._requests;
        t2 = [P.List, P.int];
        t3 = H.getTypeArgumentByIndex(t1, 0);
        t4 = H.functionTypeCheck(H.functionTypeCheck(this._call$_method.requestSerializer, {func: 1, ret: [P.List, P.int], args: [H.getTypeArgumentByIndex(this, 0)]}), {func: 1, ret: t2, args: [t3]});
        t5 = this._stream._outgoingMessages;
        t6 = [H.getTypeArgumentByIndex(t5, 0)];
        t7 = new P._StreamSinkWrapper(t5, t6);
        t8 = new P._StreamSinkWrapper(t5, t6);
        this.set$_requestSubscription(new P._HandleErrorStream(this.get$_onRequestError(), null, new P._MapStream(t4, t1, [t3, t2]), [t2]).listen$4$cancelOnError$onDone$onError(t7.get$add(t7), true, t8.get$close(t8), new P._StreamSinkWrapper(t5, t6).get$addError()));
        this._onResponseListen$0();
      },
      _onResponseListen$0: [function() {
        var t1, t2;
        t1 = this._stream;
        if (t1 != null && (this._responses._state & 1) !== 0 && this._responseSubscription == null) {
          t1 = t1._incomingMessages;
          this.set$_responseSubscription(new P._ControllerStream(t1, [H.getTypeArgumentByIndex(t1, 0)]).listen$4$cancelOnError$onDone$onError(this.get$_onResponseData(), true, this.get$_onResponseDone(), this.get$_onResponseError()));
          t1 = this._responses;
          t2 = t1._state;
          if ((t2 & 1) !== 0 ? (t1.get$_subscription()._state & 4) !== 0 : (t2 & 2) === 0)
            this._responseSubscription.pause$0(0);
          t1 = this._responses;
          t2 = this._responseSubscription;
          t1.set$onPause(0, t2.get$pause(t2));
          t2 = this._responses;
          t1 = this._responseSubscription;
          t2.set$onResume(0, t1.get$resume(t1));
          t1 = this._responses;
          t2 = this._responseSubscription;
          t1.set$onCancel(0, t2.get$cancel(t2));
        }
      }, "call$0", "get$_onResponseListen", 0, 0, 0],
      _responseError$1: function(error) {
        var t1;
        this._responses.addError$1(error);
        t1 = this._timeoutTimer;
        if (!(t1 == null))
          t1.cancel$0(0);
        t1 = this._requestSubscription;
        if (!(t1 == null))
          t1.cancel$0(0);
        this._responseSubscription.cancel$0(0);
        this._responses.close$0(0);
        this._stream.terminate$0(0);
      },
      _onResponseData$1: [function(data) {
        var t1, t2, metadata, $status, message;
        H.interceptedTypeCheck(data, "$isGrpcMessage");
        t1 = J.getInterceptor$(data);
        if (!!t1.$isGrpcData) {
          if (this._headers.future._state === 0) {
            this._responseError$1(new E.GrpcError(12, "Received data before headers"));
            return;
          }
          if (this._trailers.future._state !== 0) {
            this._responseError$1(new E.GrpcError(12, "Received data after trailers"));
            return;
          }
          t1 = this._responses;
          t2 = data.data;
          t1.add$1(0, this._call$_method.responseDeserializer.call$1(t2));
          this._hasReceivedResponses = true;
        } else if (!!t1.$isGrpcMetadata) {
          t1 = this._headers;
          if (t1.future._state === 0) {
            this.set$_headerMetadata(data.metadata);
            t1.complete$1(0, this._headerMetadata);
            return;
          }
          t1 = this._trailers;
          if (t1.future._state !== 0) {
            this._responseError$1(new E.GrpcError(12, "Received multiple trailers"));
            return;
          }
          metadata = data.metadata;
          t1.complete$1(0, metadata);
          if (metadata.containsKey$1(0, "grpc-status")) {
            $status = P.int_parse(metadata.$index(0, "grpc-status"), null, null);
            message = metadata.$index(0, "grpc-message");
            if ($status !== 0)
              this._responseError$1(new E.GrpcError($status, message));
          }
        } else
          this._responseError$1(new E.GrpcError(12, "Unexpected frame received"));
      }, "call$1", "get$_onResponseData", 4, 0, 30],
      _onResponseError$1: [function(error) {
        var t1 = J.getInterceptor$(error);
        if (!!t1.$isGrpcError) {
          this._responseError$1(error);
          return;
        }
        this._responseError$1(new E.GrpcError(2, t1.toString$0(error)));
      }, "call$1", "get$_onResponseError", 4, 0, 2],
      _onResponseDone$0: [function() {
        var t1, $status, statusCode;
        if (this._headers.future._state === 0) {
          this._responseError$1(new E.GrpcError(14, "Did not receive anything"));
          return;
        }
        t1 = this._trailers;
        if (t1.future._state === 0) {
          if (this._hasReceivedResponses) {
            this._responseError$1(new E.GrpcError(14, "Missing trailers"));
            return;
          }
          t1.complete$1(0, this._headerMetadata);
          $status = this._headerMetadata.$index(0, "grpc-status");
          statusCode = $status != null ? P.int_parse($status, null, null) : 0;
          if (statusCode !== 0)
            this._responseError$1(new E.GrpcError(statusCode, this._headerMetadata.$index(0, "grpc-message")));
        }
        t1 = this._timeoutTimer;
        if (!(t1 == null))
          t1.cancel$0(0);
        this._responses.close$0(0);
        this._responseSubscription.cancel$0(0);
      }, "call$0", "get$_onResponseDone", 0, 0, 0],
      _onRequestError$1: [function(error) {
        var t1 = J.getInterceptor$(error);
        if (!t1.$isGrpcError)
          error = new E.GrpcError(2, t1.toString$0(error));
        this._responses.addError$1(error);
        t1 = this._timeoutTimer;
        if (!(t1 == null))
          t1.cancel$0(0);
        this._responses.close$0(0);
        t1 = this._requestSubscription;
        if (!(t1 == null))
          t1.cancel$0(0);
        t1 = this._responseSubscription;
        if (!(t1 == null))
          t1.cancel$0(0);
        this._stream.terminate$0(0);
      }, "call$1", "get$_onRequestError", 4, 0, 2],
      _terminate$0: function() {
        var $async$goto = 0,
          $async$completer = P._makeAsyncAwaitCompleter(-1),
          $async$self = this, t1, futures;
        var $async$_terminate$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$self.isCancelled = true;
                t1 = $async$self._timeoutTimer;
                if (!(t1 == null))
                  t1.cancel$0(0);
                $async$self._responses.close$0(0);
                t1 = $async$self._stream;
                if (!(t1 == null))
                  t1.terminate$0(0);
                futures = H.setRuntimeTypeInfo([], [[P.Future,,]]);
                t1 = $async$self._requestSubscription;
                if (t1 != null)
                  C.JSArray_methods.add$1(futures, t1.cancel$0(0));
                t1 = $async$self._responseSubscription;
                if (t1 != null)
                  C.JSArray_methods.add$1(futures, t1.cancel$0(0));
                $async$goto = 2;
                return P._asyncAwait(P.Future_wait(futures, null, false, null), $async$_terminate$0);
              case 2:
                // returning from await.
                // implicit return
                return P._asyncReturn(null, $async$completer);
            }
        });
        return P._asyncStartSync($async$_terminate$0, $async$completer);
      },
      _safeTerminate$0: function() {
        return this._terminate$0().catchError$1(new V.ClientCall__safeTerminate_closure());
      },
      static: {
        ClientCall__sanitizeMetadata: function(metadata) {
          var t1, sanitizedMetadata;
          t1 = P.String;
          sanitizedMetadata = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
          H.assertSubtype(metadata, "$isMap", [t1, t1], "$asMap").forEach$1(0, new V.ClientCall__sanitizeMetadata_closure(sanitizedMetadata));
          return sanitizedMetadata;
        }
      }
    },
    ClientCall__sanitizeMetadata_closure: {
      "^": "Closure:31;sanitizedMetadata",
      call$2: function(key, value) {
        var lowerCaseKey;
        H.stringTypeCheck(key);
        H.stringTypeCheck(value);
        lowerCaseKey = J.trim$0$s(key).toLowerCase();
        if (!C.JSString_methods.startsWith$1(lowerCaseKey, ":") && !C.JSArray_methods.contains$1(C.List_6TW, lowerCaseKey))
          this.sanitizedMetadata.$indexSet(0, lowerCaseKey, J.trim$0$s(value));
      }
    },
    ClientCall_onConnectionReady_closure: {
      "^": "Closure:12;_box_0,metadata",
      call$1: function(provider) {
        return provider.call$2(this.metadata, this._box_0.audience);
      }
    },
    ClientCall_onConnectionReady_closure0: {
      "^": "Closure:2;$this,connection,metadata",
      call$1: function(_) {
        return this.$this._sendRequest$2(this.connection, V.ClientCall__sanitizeMetadata(this.metadata));
      }
    },
    ClientCall__safeTerminate_closure: {
      "^": "Closure:10;",
      call$1: function(_) {
      }
    }
  }], ["", "package:grpc/src/client/channel.dart",, N, {
    "^": "",
    ClientChannel: {
      "^": "Object;",
      getConnection$0: function() {
        var $async$goto = 0,
          $async$completer = P._makeAsyncAwaitCompleter(V.ClientConnection),
          $async$returnValue, $async$self = this, t1;
        var $async$getConnection$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self._connection;
                if (t1 == null) {
                  t1 = new V.ClientConnection($async$self.host, $async$self.port, $async$self.options, $async$self.connectTransport, C.ConnectionState_3, H.setRuntimeTypeInfo([], [[V.ClientCall,,,]]));
                  $async$self._connection = t1;
                }
                $async$returnValue = t1;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        });
        return P._asyncStartSync($async$getConnection$0, $async$completer);
      },
      createCall$2$3: function(method, requests, options, $Q, $R) {
        var t1, t2, t3, $call;
        H.assertSubtype(method, "$isClientMethod", [$Q, $R], "$asClientMethod");
        H.assertSubtype(requests, "$isStream", [$Q], "$asStream");
        t1 = [P.Map, P.String, P.String];
        t2 = $.Zone__current;
        t3 = [t1];
        t1 = [t1];
        $call = new V.ClientCall(method, requests, options, new P._AsyncCompleter(new P._Future(0, t2, t3), t1), new P._AsyncCompleter(new P._Future(0, t2, t3), t1), false, false, [$Q, $R]);
        $call.set$_responses(P.StreamController_StreamController(null, $call.get$_onResponseListen(), null, null, false, $R));
        this.getConnection$0().then$1$2$onError(new N.ClientChannel_createCall_closure($call), $call.get$onConnectionError(), null);
        return $call;
      }
    },
    ClientChannel_createCall_closure: {
      "^": "Closure:32;$call",
      call$1: function(connection) {
        var t1;
        H.interceptedTypeCheck(connection, "$isClientConnection");
        t1 = this.$call;
        if (t1.isCancelled)
          return;
        switch (connection._connection$_state) {
          case C.ConnectionState_1:
            connection._startCall$1(t1);
            break;
          case C.ConnectionState_4:
            connection._failCall$2(t1, "Connection shutting down.");
            break;
          default:
            C.JSArray_methods.add$1(connection._pendingCalls, t1);
            if (connection._connection$_state === C.ConnectionState_3)
              connection._connect$0(0);
        }
      }
    }
  }], ["", "package:grpc/src/client/client.dart",, U, {
    "^": "",
    Client0: {
      "^": "Object;",
      $$createCall$2$3$options: function(method, requests, options, $Q, $R) {
        return this._channel.createCall$2$3(H.assertSubtype(method, "$isClientMethod", [$Q, $R], "$asClientMethod"), H.assertSubtype(requests, "$isStream", [$Q], "$asStream"), this._options.mergedWith$1(options), $Q, $R);
      }
    }
  }], ["", "package:grpc/src/client/common.dart",, R, {
    "^": "",
    ResponseFuture: {
      "^": "_ResponseFuture_DelegatingFuture__ResponseMixin;_call,_future,$ti",
      static: {
        ResponseFuture__ensureOnlyOneResponse: [function(previous, element, $R) {
          H.assertSubtypeOfRuntimeType(previous, $R);
          H.assertSubtypeOfRuntimeType(element, $R);
          if (previous != null)
            throw H.wrapException(E.GrpcError$unimplemented("More than one response received"));
          return element;
        }, function(previous, element) {
          return R.ResponseFuture__ensureOnlyOneResponse(previous, element, null);
        }, "call$1$2", "call$2", "common_ResponseFuture__ensureOnlyOneResponse$closure", 8, 0, 67],
        ResponseFuture__ensureOneResponse: [function(value, $R) {
          H.assertSubtypeOfRuntimeType(value, $R);
          if (value == null)
            throw H.wrapException(E.GrpcError$unimplemented("No responses received"));
          return value;
        }, function(value) {
          return R.ResponseFuture__ensureOneResponse(value, null);
        }, "call$1$1", "call$1", "common_ResponseFuture__ensureOneResponse$closure", 4, 0, 68]
      }
    },
    ResponseStream: {
      "^": "_ResponseStream_DelegatingStream__ResponseMixin;_call,_async$_stream,$ti"
    },
    _ResponseMixin: {
      "^": "Object;"
    },
    _ResponseFuture_DelegatingFuture__ResponseMixin: {
      "^": "DelegatingFuture+_ResponseMixin;"
    },
    _ResponseStream_DelegatingStream__ResponseMixin: {
      "^": "DelegatingStream+_ResponseMixin;$ti"
    }
  }], ["", "package:grpc/src/client/connection.dart",, V, {
    "^": "",
    ConnectionState: {
      "^": "Object;index>,_connection$_name",
      toString$0: function(_) {
        return this._connection$_name;
      }
    },
    ClientConnection: {
      "^": "Object;host,port,options,connectTransport,_connection$_state,0onStateChanged,_pendingCalls,0_transport,0_timer,0_currentReconnectDelay",
      _connect$0: function(_) {
        var t1 = this._connection$_state;
        if (t1 !== C.ConnectionState_3 && t1 !== C.ConnectionState_2)
          return;
        this._setState$1(C.ConnectionState_0);
        this.connectTransport.call$3(this.host, this.port, this.options).then$1$1(new V.ClientConnection__connect_closure(this), null).catchError$1(this.get$_handleConnectionFailure());
      },
      _startCall$1: [function($call) {
        H.interceptedTypeCheck($call, "$isClientCall");
        if ($call.isCancelled)
          return;
        $call.onConnectionReady$1(this);
      }, "call$1", "get$_startCall", 4, 0, 17],
      _failCall$2: function($call, error) {
        if ($call.isCancelled)
          return;
        $call._terminateWithError$1(new E.GrpcError(14, "Error connecting: " + H.S(error)));
      },
      _setState$1: function(state) {
        this._connection$_state = state;
      },
      _handleIdleTimeout$0: [function() {
        if (this._timer == null || this._connection$_state !== C.ConnectionState_1)
          return;
        this._cancelTimer$0();
        var t1 = this._transport;
        t1 = t1 == null ? null : t1.finish$0(0);
        if (!(t1 == null))
          t1.catchError$1(new V.ClientConnection__handleIdleTimeout_closure());
        this._transport = null;
        this._setState$1(C.ConnectionState_3);
      }, "call$0", "get$_handleIdleTimeout", 0, 0, 0],
      _cancelTimer$0: function() {
        var t1 = this._timer;
        if (!(t1 == null))
          t1.cancel$0(0);
        this._timer = null;
      },
      _handleActiveStateChanged$1: [function(isActive) {
        if (isActive)
          this._cancelTimer$0();
        else if (this._timer == null)
          this._timer = P.Timer_Timer(this.options.idleTimeout, this.get$_handleIdleTimeout());
      }, "call$1", "get$_handleActiveStateChanged", 4, 0, 34],
      _hasPendingCalls$0: function() {
        var t1, t2;
        t1 = this._pendingCalls;
        t2 = H.functionTypeCheck(new V.ClientConnection__hasPendingCalls_closure(), {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(t1, 0)]});
        C.JSArray_methods._removeWhere$2(t1, t2, true);
        return t1.length !== 0;
      },
      _handleConnectionFailure$1: [function(error) {
        var t1;
        this._transport = null;
        t1 = this._connection$_state;
        if (t1 === C.ConnectionState_4 || t1 === C.ConnectionState_3)
          return;
        this._cancelTimer$0();
        t1 = this._pendingCalls;
        C.JSArray_methods.forEach$1(t1, new V.ClientConnection__handleConnectionFailure_closure(this, error));
        C.JSArray_methods.set$length(t1, 0);
        this._setState$1(C.ConnectionState_3);
      }, "call$1", "get$_handleConnectionFailure", 4, 0, 2],
      _handleReconnect$0: [function() {
        if (this._timer == null || this._connection$_state !== C.ConnectionState_2)
          return;
        this._cancelTimer$0();
        this._connect$0(0);
      }, "call$0", "get$_handleReconnect", 0, 0, 0],
      _handleSocketClosed$0: [function() {
        this._cancelTimer$0();
        this._transport = null;
        var t1 = this._connection$_state;
        if (t1 === C.ConnectionState_3 && t1 === C.ConnectionState_4)
          return;
        if (!this._hasPendingCalls$0()) {
          this._setState$1(C.ConnectionState_3);
          return;
        }
        this._setState$1(C.ConnectionState_2);
        t1 = H.interceptedTypeCheck(this.options.backoffStrategy.call$1(this._currentReconnectDelay), "$isDuration");
        this._currentReconnectDelay = t1;
        this._timer = P.Timer_Timer(t1, this.get$_handleReconnect());
      }, "call$0", "get$_handleSocketClosed", 0, 0, 0]
    },
    ClientConnection__connect_closure: {
      "^": "Closure:19;$this",
      call$1: function(transport) {
        var t1, t2;
        H.interceptedTypeCheck(transport, "$isTransport");
        t1 = this.$this;
        t1._currentReconnectDelay = null;
        t1._transport = transport;
        transport.set$onActiveStateChanged(t1.get$_handleActiveStateChanged());
        t1._transport.set$onSocketClosed(t1.get$_handleSocketClosed());
        t1._setState$1(C.ConnectionState_1);
        t2 = t1._pendingCalls;
        C.JSArray_methods.forEach$1(t2, t1.get$_startCall());
        C.JSArray_methods.set$length(t2, 0);
      }
    },
    ClientConnection__handleIdleTimeout_closure: {
      "^": "Closure:36;",
      call$1: function(_) {
        return P.LinkedHashMap__makeEmpty();
      }
    },
    ClientConnection__hasPendingCalls_closure: {
      "^": "Closure:74;",
      call$1: function($call) {
        return H.interceptedTypeCheck($call, "$isClientCall").isCancelled;
      }
    },
    ClientConnection__handleConnectionFailure_closure: {
      "^": "Closure:17;$this,error",
      call$1: function($call) {
        return this.$this._failCall$2(H.interceptedTypeCheck($call, "$isClientCall"), this.error);
      }
    }
  }], ["", "package:grpc/src/client/method.dart",, D, {
    "^": "",
    ClientMethod: {
      "^": "Object;path,requestSerializer,responseDeserializer,$ti",
      static: {
        ClientMethod$: function(path, requestSerializer, responseDeserializer, $Q, $R) {
          return new D.ClientMethod(path, requestSerializer, responseDeserializer, [$Q, $R]);
        }
      }
    }
  }], ["", "package:grpc/src/client/options.dart",, B, {
    "^": "",
    defaultBackoffStrategy: [function(lastBackoff) {
      var t1, nextBackoff;
      H.interceptedTypeCheck(lastBackoff, "$isDuration");
      if (lastBackoff == null)
        return C.Duration_1000000;
      t1 = $.$get$_random().nextDouble$0();
      t1 = C.JSNumber_methods.round$0(lastBackoff._duration * (1.6 + (t1 * 2 * 0.2 - 0.2)));
      nextBackoff = new P.Duration(t1);
      return t1 < 120000000 ? nextBackoff : C.Duration_120000000;
    }, "call$1", "options__defaultBackoffStrategy$closure", 4, 0, 69],
    ChannelCredentials: {
      "^": "Object;isSecure,authority"
    },
    ChannelOptions: {
      "^": "Object;credentials,idleTimeout,backoffStrategy"
    },
    CallOptions: {
      "^": "Object;metadata,timeout,metadataProviders",
      mergedWith$1: function(other) {
        return this;
      }
    }
  }], ["", "package:grpc/src/client/transport/transport.dart",, S, {
    "^": "",
    Transport: {
      "^": "Object;0onActiveStateChanged,0onSocketClosed",
      set$onActiveStateChanged: function(onActiveStateChanged) {
        this.onActiveStateChanged = H.functionTypeCheck(onActiveStateChanged, {func: 1, ret: -1, args: [P.bool]});
      },
      set$onSocketClosed: function(onSocketClosed) {
        this.onSocketClosed = H.functionTypeCheck(onSocketClosed, {func: 1, ret: -1});
      }
    }
  }], ["", "package:grpc/src/client/transport/web_streams.dart",, Z, {
    "^": "",
    _GrpcWebParseState: {
      "^": "Object;index>,_web_streams$_name",
      toString$0: function(_) {
        return this._web_streams$_name;
      }
    },
    GrpcWebDecoder: {
      "^": "Converter;",
      startChunkedConversion$1: function(sink) {
        H.assertSubtype(sink, "$isSink", [D.GrpcMessage], "$asSink");
        return new Z._GrpcWebConversionSink(sink, new Uint8Array(4), C._GrpcWebParseState_0, 0);
      },
      $asStreamTransformer: function() {
        return [P.ByteBuffer, D.GrpcMessage];
      },
      $asConverter: function() {
        return [P.ByteBuffer, D.GrpcMessage];
      }
    },
    _GrpcWebConversionSink: {
      "^": "ChunkedConversionSink;_out,_dataHeader,_web_streams$_state,0_chunkOffset,0_frameType,_dataOffset,0_data",
      _finishMessage$0: function() {
        switch (this._frameType) {
          case 0:
            this._out.add$1(0, new D.GrpcData(this._data, false));
            break;
          case 128:
            this._out.add$1(0, new D.GrpcMetadata(this._parseHttp1Headers$1(P.String_String$fromCharCodes(this._data, 0, null))));
            break;
        }
        this._web_streams$_state = C._GrpcWebParseState_0;
        this._data = null;
        this._dataOffset = 0;
      },
      _parseHttp1Headers$1: function(stringData) {
        var chunks, t1, headers, _i, chunk, pos;
        chunks = C.JSString_methods.trim$0(stringData).split("\r\n");
        t1 = P.String;
        headers = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
        for (t1 = chunks.length, _i = 0; _i < t1; ++_i) {
          chunk = chunks[_i];
          pos = J.indexOf$1$s(chunk, ":");
          headers.$indexSet(0, C.JSString_methods.trim$0(C.JSString_methods.substring$2(chunk, 0, pos)), C.JSString_methods.trim$0(C.JSString_methods.substring$1(chunk, pos + 1)));
        }
        return headers;
      },
      add$1: function(_, chunk) {
        var chunkData, t1, t2, t3, t4, frameType, t5, toCopy, dataLength, t6, dataRemaining;
        H.interceptedTypeCheck(chunk, "$isByteBuffer");
        this._chunkOffset = 0;
        chunk.toString;
        chunkData = H.NativeUint8List_NativeUint8List$view(chunk, 0, null);
        t1 = [P.int];
        t2 = this._dataHeader;
        while (true) {
          t3 = this._chunkOffset;
          t4 = chunk.byteLength;
          if (typeof t3 !== "number")
            return t3.$lt();
          if (typeof t4 !== "number")
            return H.iae(t4);
          if (!(t3 < t4))
            break;
          switch (this._web_streams$_state) {
            case C._GrpcWebParseState_0:
              H.assertSubtype(chunkData, "$isList", t1, "$asList");
              if (t3 < 0 || t3 >= chunkData.length)
                return H.ioore(chunkData, t3);
              frameType = chunkData[t3];
              t3 = this._chunkOffset;
              if (typeof t3 !== "number")
                return t3.$add();
              this._chunkOffset = t3 + 1;
              if (frameType !== 0 && frameType !== 128)
                H.throwExpression(E.GrpcError$unimplemented("Invalid frame type: " + frameType));
              this._web_streams$_state = C._GrpcWebParseState_1;
              this._frameType = frameType;
              break;
            case C._GrpcWebParseState_1:
              H.assertSubtype(chunkData, "$isList", t1, "$asList");
              t4 = t2.byteLength;
              t5 = this._dataOffset;
              if (typeof t4 !== "number")
                return t4.$sub();
              toCopy = Math.min(t4 - t5, chunkData.length - t3);
              C.NativeUint8List_methods.setRange$4(t2, t5, t5 + toCopy, chunkData, t3);
              t3 = this._dataOffset += toCopy;
              t5 = this._chunkOffset;
              if (typeof t5 !== "number")
                return t5.$add();
              this._chunkOffset = t5 + toCopy;
              if (t3 === t2.byteLength) {
                t3 = t2.buffer;
                t3.toString;
                H._checkViewArguments(t3, 0, null);
                t3 = new DataView(t3, 0);
                dataLength = C.NativeByteData_methods._getUint32$2(t3, 0, false);
                this._dataOffset = 0;
                this._web_streams$_state = C._GrpcWebParseState_2;
                if (dataLength === 0)
                  this._finishMessage$0();
                this._data = new Uint8Array(dataLength);
              }
              break;
            case C._GrpcWebParseState_2:
              H.assertSubtype(chunkData, "$isList", t1, "$asList");
              t4 = this._data;
              t5 = t4.byteLength;
              t6 = this._dataOffset;
              if (typeof t5 !== "number")
                return t5.$sub();
              dataRemaining = t5 - t6;
              if (dataRemaining > 0) {
                toCopy = Math.min(dataRemaining, chunkData.length - t3);
                (t4 && C.NativeUint8List_methods).setRange$4(t4, t6, t6 + toCopy, chunkData, t3);
                t3 = this._dataOffset += toCopy;
                t4 = this._chunkOffset;
                if (typeof t4 !== "number")
                  return t4.$add();
                this._chunkOffset = t4 + toCopy;
              } else
                t3 = t6;
              if (t3 === this._data.byteLength)
                this._finishMessage$0();
              break;
          }
        }
        this._chunkOffset = 0;
      },
      close$0: function(_) {
        if (this._data != null || this._dataOffset !== 0)
          throw H.wrapException(E.GrpcError$unavailable("Closed in non-idle state"));
        this._out.close$0(0);
      },
      $asChunkedConversionSink: function() {
        return [P.ByteBuffer];
      },
      $asSink: function() {
        return [P.ByteBuffer];
      }
    }
  }], ["", "package:grpc/src/client/transport/xhr_transport.dart",, T, {
    "^": "",
    XhrTransportStream: {
      "^": "Object;_request,_requestBytesRead,0_incomingProcessor,0_incomingMessages,0_outgoingMessages",
      set$_incomingProcessor: function(_incomingProcessor) {
        this._incomingProcessor = H.assertSubtype(_incomingProcessor, "$isStreamController", [P.ByteBuffer], "$asStreamController");
      },
      set$_incomingMessages: function(_incomingMessages) {
        this._incomingMessages = H.assertSubtype(_incomingMessages, "$isStreamController", [D.GrpcMessage], "$asStreamController");
      },
      set$_outgoingMessages: function(_outgoingMessages) {
        this._outgoingMessages = H.assertSubtype(_outgoingMessages, "$isStreamController", [[P.List, P.int]], "$asStreamController");
      },
      XhrTransportStream$1: function(_request) {
        var t1, t2, t3, t4;
        this.set$_incomingProcessor(P.StreamController_StreamController(null, null, null, null, false, P.ByteBuffer));
        t1 = D.GrpcMessage;
        this.set$_incomingMessages(P.StreamController_StreamController(null, null, null, null, false, t1));
        t2 = [P.List, P.int];
        this.set$_outgoingMessages(P.StreamController_StreamController(null, null, null, null, false, t2));
        t3 = this._incomingProcessor;
        t4 = H.getTypeArgumentByIndex(t3, 0);
        t4 = H.assertSubtype(new Z.GrpcWebDecoder(), "$isStreamTransformer", [t4, t1], "$asStreamTransformer").bind$1(new P._ControllerStream(t3, [t4]));
        t4 = H.assertSubtype(D.grpcDecompressor(), "$isStreamTransformer", [H.getRuntimeTypeArgument(t4, "Stream", 0), t1], "$asStreamTransformer").bind$1(t4);
        t1 = this._incomingMessages;
        t4.listen$3$onDone$onError(t1.get$add(t1), t1.get$close(t1), t1.get$addError());
        t1 = this._outgoingMessages;
        t4 = H.getTypeArgumentByIndex(t1, 0);
        new P._MapStream(H.functionTypeCheck(D.message__frame$closure(), {func: 1, ret: t2, args: [t4]}), new P._ControllerStream(t1, [t4]), [t4, t2]).listen$1(new T.XhrTransportStream_closure(this));
        t2 = this._request;
        t2.toString;
        t4 = W.Event;
        W._EventStreamSubscription$(t2, "readystatechange", H.functionTypeCheck(new T.XhrTransportStream_closure0(this), {func: 1, ret: -1, args: [t4]}), false, t4);
        t4 = W.ProgressEvent;
        W._EventStreamSubscription$(t2, "progress", H.functionTypeCheck(new T.XhrTransportStream_closure1(this), {func: 1, ret: -1, args: [t4]}), false, t4);
      },
      terminate$0: function(_) {
        var $async$goto = 0,
          $async$completer = P._makeAsyncAwaitCompleter(-1),
          $async$self = this;
        var $async$terminate$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 2;
                return P._asyncAwait($async$self._incomingProcessor.close$0(0), $async$terminate$0);
              case 2:
                // returning from await.
                $async$goto = 3;
                return P._asyncAwait($async$self._outgoingMessages.close$0(0), $async$terminate$0);
              case 3:
                // returning from await.
                $async$self._request.abort();
                // implicit return
                return P._asyncReturn(null, $async$completer);
            }
        });
        return P._asyncStartSync($async$terminate$0, $async$completer);
      },
      $isGrpcTransportStream: 1,
      static: {
        XhrTransportStream$: function(_request) {
          var t1 = new T.XhrTransportStream(_request, 0);
          t1.XhrTransportStream$1(_request);
          return t1;
        }
      }
    },
    XhrTransportStream_closure: {
      "^": "Closure:38;$this",
      call$1: function(data) {
        var t1 = this.$this._request;
        return (t1 && C.HttpRequest_methods).send$1(t1, H.assertSubtype(data, "$isList", [P.int], "$asList"));
      }
    },
    XhrTransportStream_closure0: {
      "^": "Closure:39;$this",
      call$1: function(data) {
        var t1, t2, contentType, t3;
        t1 = this.$this;
        t2 = t1._request;
        contentType = (t2 && C.HttpRequest_methods).getResponseHeader$1(t2, "Content-Type");
        if (contentType == null)
          return;
        if (t2.readyState === 2)
          if (C.JSString_methods.startsWith$1(contentType, "application/grpc")) {
            if (W._convertNativeToDart_XHR_Response(t2.response) == null)
              return;
            t3 = C.HttpRequest_methods.get$responseHeaders(t2);
            t1._incomingMessages.add$1(0, new D.GrpcMetadata(t3));
          }
        if (t2.readyState === 4) {
          t1._incomingProcessor.close$0(0);
          t1._outgoingMessages.close$0(0);
        }
      }
    },
    XhrTransportStream_closure1: {
      "^": "Closure:40;$this",
      call$1: function(_) {
        var t1, responseString, bytes;
        H.interceptedTypeCheck(_, "$isProgressEvent");
        t1 = this.$this;
        responseString = H.stringTypeCast(W._convertNativeToDart_XHR_Response(t1._request.response));
        bytes = new Uint8Array(H._ensureNativeList(new H.CodeUnits(J.substring$1$s(responseString, t1._requestBytesRead)))).buffer;
        t1._requestBytesRead = responseString.length;
        t1._incomingProcessor.add$1(0, bytes);
      }
    },
    XhrTransport: {
      "^": "Transport;host,port,0_request,0onActiveStateChanged,0onSocketClosed",
      connect$0: function() {
        var $async$goto = 0,
          $async$completer = P._makeAsyncAwaitCompleter(-1);
        var $async$connect$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                // implicit return
                return P._asyncReturn(null, $async$completer);
            }
        });
        return P._asyncStartSync($async$connect$0, $async$completer);
      },
      finish$0: function(_) {
        var $async$goto = 0,
          $async$completer = P._makeAsyncAwaitCompleter(-1);
        var $async$finish$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                // implicit return
                return P._asyncReturn(null, $async$completer);
            }
        });
        return P._asyncStartSync($async$finish$0, $async$completer);
      },
      initializeRequest$2: function(request, metadata) {
        var t1, t2, t3;
        t1 = P.String;
        H.assertSubtype(metadata, "$isMap", [t1, t1], "$asMap");
        for (t1 = metadata.get$keys(metadata), t1 = t1.get$iterator(t1), t2 = request && C.HttpRequest_methods; t1.moveNext$0();) {
          t3 = t1.get$current(t1);
          t2.setRequestHeader$2(request, t3, metadata.$index(0, t3));
        }
        t2.setRequestHeader$2(request, "Content-Type", "application/grpc-web+proto");
        C.HttpRequest_methods.setRequestHeader$2(request, "X-User-Agent", "grpc-web-dart/0.1");
        C.HttpRequest_methods.setRequestHeader$2(request, "X-Grpc-Web", "1");
        C.HttpRequest_methods.overrideMimeType$1(request, "text/plain; charset=x-user-defined");
        request.responseType = "text";
      }
    }
  }], ["", "package:grpc/src/client/web_channel.dart",, E, {
    "^": "",
    connectXhrTransport: [function(host, port, _) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(S.Transport),
        $async$returnValue, t1;
      var $async$connectXhrTransport = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = new T.XhrTransport(host, port);
              t1.connect$0();
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$connectXhrTransport, $async$completer);
    }, "call$3", "web_channel__connectXhrTransport$closure", 12, 0, 70],
    GrpcWebClientChannel: {
      "^": "ClientChannel;host,port,options,connectTransport,0_connection,_isShutdown"
    }
  }], ["", "package:grpc/src/shared/message.dart",, D, {
    "^": "",
    frame: [function(payload) {
      var payloadLength, bytes, t1, header;
      H.assertSubtype(payload, "$isList", [P.int], "$asList");
      payloadLength = J.get$length$asx(payload);
      bytes = new Uint8Array(payloadLength + 5);
      t1 = bytes.buffer;
      t1.toString;
      header = H.NativeByteData_NativeByteData$view(t1, 0, 5);
      C.NativeByteData_methods.setUint8$2(header, 0, 0);
      C.NativeByteData_methods._setUint32$3(header, 1, payloadLength, false);
      C.NativeUint8List_methods.setRange$3(bytes, 5, bytes.length, payload);
      return bytes;
    }, "call$1", "message__frame$closure", 4, 0, 71],
    grpcDecompressor: function() {
      var t1 = D.GrpcMessage;
      return P._StreamHandlerTransformer$(new D.grpcDecompressor_closure(), null, null, t1, t1);
    },
    GrpcMessage: {
      "^": "Object;"
    },
    GrpcMetadata: {
      "^": "GrpcMessage;metadata",
      toString$0: function(_) {
        return "gRPC Metadata (" + this.metadata.toString$0(0) + ")";
      }
    },
    GrpcData: {
      "^": "GrpcMessage;data,isCompressed",
      toString$0: function(_) {
        return "gRPC Data (" + this.data.length + " bytes)";
      }
    },
    grpcDecompressor_closure: {
      "^": "Closure:41;",
      call$2: function(value, sink) {
        var t1;
        H.interceptedTypeCheck(value, "$isGrpcMessage");
        H.assertSubtype(sink, "$isEventSink", [D.GrpcMessage], "$asEventSink");
        value instanceof D.GrpcData;
        sink.toString;
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(sink, 0));
        t1 = sink._sink;
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(t1, 1));
        if ((t1._state & 2) !== 0)
          H.throwExpression(P.StateError$("Stream is already closed"));
        t1.super$_BufferingStreamSubscription$_add(0, value);
      }
    }
  }], ["", "package:grpc/src/shared/status.dart",, E, {
    "^": "",
    GrpcError: {
      "^": "Object;code,message",
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (!(other instanceof E.GrpcError))
          return false;
        return this.code == other.code && this.message == other.message;
      },
      get$hashCode: function(_) {
        var t1, t2;
        t1 = J.get$hashCode$(this.code);
        t2 = this.message;
        t2 = t2 == null ? null : C.JSString_methods.get$hashCode(t2);
        return (t1 ^ (t2 == null ? 17 : t2)) >>> 0;
      },
      toString$0: function(_) {
        return "gRPC Error (" + H.S(this.code) + ", " + H.S(this.message) + ")";
      },
      static: {
        GrpcError$unimplemented: function(message) {
          return new E.GrpcError(12, message);
        },
        GrpcError$unavailable: function(message) {
          return new E.GrpcError(14, message);
        }
      }
    }
  }], ["", "package:grpc_web/app.dart",, S, {
    "^": "",
    EchoApp: {
      "^": "Object;_service",
      echo$1: function(message) {
        var $async$goto = 0,
          $async$completer = P._makeAsyncAwaitCompleter(-1),
          $async$self = this, t1, t2, t3, $call;
        var $async$echo$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$self._addMessage$2(message, "label-primary pull-left");
                t1 = new B.EchoRequest();
                t1.GeneratedMessage$0();
                t1._fieldSet._$set$2(0, message);
                t2 = B.EchoRequest;
                t3 = B.EchoResponse;
                $call = $async$self._service.$$createCall$2$3$options($.$get$EchoServiceClient__$echo(), P.Stream_Stream$fromIterable(H.setRuntimeTypeInfo([t1], [t2]), t2), null, t2, t3);
                t2 = $call._responses;
                t2.toString;
                $async$goto = 2;
                return P._asyncAwait(new R.ResponseFuture($call, new P._ControllerStream(t2, [H.getTypeArgumentByIndex(t2, 0)]).fold$1$2(0, null, H.instantiate1(R.common_ResponseFuture__ensureOnlyOneResponse$closure(), t3), t3).then$1$1(H.instantiate1(R.common_ResponseFuture__ensureOneResponse$closure(), t3), t3), [t3]), $async$echo$1);
              case 2:
                // returning from await.
                $async$self._addMessage$2($async$result._fieldSet._$getS$2(0, ""), "label-default pull-right");
                // implicit return
                return P._asyncReturn(null, $async$completer);
            }
        });
        return P._asyncStartSync($async$echo$1, $async$completer);
      },
      repeatEcho$2: function(message, count) {
        var request, t1, t2, $call;
        this._addMessage$2(message, "label-primary pull-left");
        request = new B.ServerStreamingEchoRequest();
        request.GeneratedMessage$0();
        request._fieldSet._$set$2(0, message);
        request.$$_setSignedInt32$2(1, count);
        request.$$_setSignedInt32$2(2, 500);
        t1 = B.ServerStreamingEchoRequest;
        t2 = B.ServerStreamingEchoResponse;
        $call = this._service.$$createCall$2$3$options($.$get$EchoServiceClient__$serverStreamingEcho(), P.Stream_Stream$fromIterable(H.setRuntimeTypeInfo([request], [t1]), t1), null, t1, t2);
        t1 = $call._responses;
        t1.toString;
        new R.ResponseStream($call, new P._ControllerStream(t1, [H.getTypeArgumentByIndex(t1, 0)]), [t2]).listen$2$onDone(new S.EchoApp_repeatEcho_closure(this), new S.EchoApp_repeatEcho_closure0());
      },
      _addMessage$2: function(message, cssClass) {
        var t1, classes, t2, t3, t4, t5;
        t1 = P.String;
        classes = H.setRuntimeTypeInfo(cssClass.split(" "), [t1]);
        t2 = document;
        t3 = C.HtmlDocument_methods.querySelector$1(t2, "#first");
        t4 = t2.createElement("div");
        t4.classList.add("row");
        t5 = H.interceptedTypeCheck(W._ElementFactoryProvider_createElement_tag("h2", null), "$isElement");
        t2 = t2.createElement("span");
        t2.classList.add("label");
        W._ElementCssClassSet__addAll(t2, H.assertSubtype(classes, "$isIterable", [t1], "$asIterable"));
        t2.textContent = message;
        J.append$1$x(t5, t2);
        C.DivElement_methods.append$1(t4, t5);
        J.after$1$x(t3, t4);
      }
    },
    EchoApp_repeatEcho_closure: {
      "^": "Closure:42;$this",
      call$1: function(response) {
        this.$this._addMessage$2(H.interceptedTypeCheck(response, "$isServerStreamingEchoResponse")._fieldSet._$getS$2(0, ""), "label-default pull-right");
      }
    },
    EchoApp_repeatEcho_closure0: {
      "^": "Closure:0;",
      call$0: function() {
        H.printString("Closed connection to server.");
        return;
      }
    }
  }], ["", "package:grpc_web/src/generated/echo.pb.dart",, B, {
    "^": "",
    EchoRequest: {
      "^": "GeneratedMessage;0_fieldSet",
      clone$0: function(_) {
        var t1 = new B.EchoRequest();
        t1.GeneratedMessage$0();
        t1._fieldSet._mergeFromMessage$1(this._fieldSet);
        return t1;
      },
      get$info_: function() {
        return $.$get$EchoRequest__i();
      }
    },
    EchoResponse: {
      "^": "GeneratedMessage;0_fieldSet",
      clone$0: function(_) {
        var t1 = new B.EchoResponse();
        t1.GeneratedMessage$0();
        t1._fieldSet._mergeFromMessage$1(this._fieldSet);
        return t1;
      },
      get$info_: function() {
        return $.$get$EchoResponse__i();
      }
    },
    ServerStreamingEchoRequest: {
      "^": "GeneratedMessage;0_fieldSet",
      clone$0: function(_) {
        var t1 = new B.ServerStreamingEchoRequest();
        t1.GeneratedMessage$0();
        t1._fieldSet._mergeFromMessage$1(this._fieldSet);
        return t1;
      },
      get$info_: function() {
        return $.$get$ServerStreamingEchoRequest__i();
      }
    },
    ServerStreamingEchoResponse: {
      "^": "GeneratedMessage;0_fieldSet",
      clone$0: function(_) {
        var t1 = new B.ServerStreamingEchoResponse();
        t1.GeneratedMessage$0();
        t1._fieldSet._mergeFromMessage$1(this._fieldSet);
        return t1;
      },
      get$info_: function() {
        return $.$get$ServerStreamingEchoResponse__i();
      }
    }
  }], ["", "package:grpc_web/src/generated/echo.pbgrpc.dart",, S, {
    "^": "",
    EchoServiceClient: {
      "^": "Client0;_channel,_options"
    },
    EchoServiceClient_closure: {
      "^": "Closure:43;",
      call$1: function(value) {
        return H.interceptedTypeCheck(value, "$isEchoRequest").writeToBuffer$0();
      }
    },
    EchoServiceClient_closure0: {
      "^": "Closure:44;",
      call$1: function(value) {
        var t1 = new B.EchoResponse();
        t1.GeneratedMessage$fromBuffer$2(H.assertSubtype(value, "$isList", [P.int], "$asList"), C.C__EmptyExtensionRegistry);
        return t1;
      }
    },
    EchoServiceClient_closure1: {
      "^": "Closure:45;",
      call$1: function(value) {
        return H.interceptedTypeCheck(value, "$isServerStreamingEchoRequest").writeToBuffer$0();
      }
    },
    EchoServiceClient_closure2: {
      "^": "Closure:46;",
      call$1: function(value) {
        var t1 = new B.ServerStreamingEchoResponse();
        t1.GeneratedMessage$fromBuffer$2(H.assertSubtype(value, "$isList", [P.int], "$asList"), C.C__EmptyExtensionRegistry);
        return t1;
      }
    }
  }], ["protobuf", "package:protobuf/protobuf.dart",, M, {
    "^": "",
    _writeToCodedBufferWriter: function(fs, out) {
      var t1, t2, _i, fi, t3, t4, value, tagNumber;
      for (t1 = fs._meta.get$sortedByTag(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        fi = t1[_i];
        t3 = fs._values;
        t4 = J.get$index$z(fi);
        if (t4 >= t3.length)
          return H.ioore(t3, t4);
        value = t3[t4];
        if (value == null)
          continue;
        out.writeField$3(fi.get$tagNumber(), fi.type, value);
      }
      t1 = fs._extensions;
      if (t1 != null)
        for (t1 = t1._values, t1 = M.sorted(t1.get$keys(t1), P.int), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          tagNumber = t1[_i];
          t3 = fs._extensions;
          t3.toString;
          H.intTypeCheck(tagNumber);
          fi = t3._info.$index(0, tagNumber);
          out.writeField$3(tagNumber, C.JSNull_methods.get$type(fi), fs._extensions._values.$index(0, fi.get$tagNumber()));
        }
      t1 = fs._unknownFields;
      if (t1 != null)
        t1.writeToCodedBufferWriter$1(out);
    },
    _mergeFromCodedBufferReader: function(fs, input, registry) {
      var readPackableToList, readPackable, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, tag, wireType, tagNumber, t16, fi, fieldType, t17, t18, rawValue, value, unknown, subMessage, oldValue, data, view;
      readPackableToList = new M._mergeFromCodedBufferReader_readPackableToList(fs, input);
      readPackable = new M._mergeFromCodedBufferReader_readPackable(readPackableToList);
      for (t1 = input.get$readSfixed64(), t2 = input.get$readSfixed32(), t3 = input.get$readFixed64(), t4 = input.get$readFixed32(), t5 = input.get$readUint64(), t6 = input.get$readUint32(), t7 = input.get$readSint64(), t8 = input.get$readSint32(), t9 = input.get$readInt64(), t10 = input.get$readInt32(), t11 = input.get$readDouble(), t12 = input.get$readFloat(), t13 = [P.int], t14 = input.get$readBool(), t15 = input._buffer; true;) {
        tag = input.readTag$0();
        if (tag === 0)
          return;
        wireType = tag & 7;
        tagNumber = C.JSInt_methods._shrOtherPositive$1(tag, 3);
        t16 = fs._meta;
        fi = t16.fieldInfo.$index(0, tagNumber);
        if (fi == null) {
          t16.qualifiedMessageName;
          fi = null;
        }
        if (fi == null || !M._wireTypeMatches(fi.type, wireType)) {
          if (!fs._ensureUnknownFields$0().mergeFieldFromBuffer$2(tag, input))
            return;
          continue;
        }
        fieldType = fi.type & 4294967290;
        switch (fieldType) {
          case 16:
            fs._setFieldUnchecked$2(fi, input._readRawVarint32$0() !== 0);
            break;
          case 32:
            fs._setFieldUnchecked$2(fi, input.readBytes$0());
            break;
          case 64:
            t16 = H.assertSubtype(input.readBytes$0(), "$isList", t13, "$asList");
            fs._setFieldUnchecked$2(fi, new P.Utf8Decoder(true).convert$1(t16));
            break;
          case 256:
            t16 = input._bufferPos += 4;
            if (t16 > input._currentLimit)
              H.throwExpression(M.InvalidProtocolBufferException$truncatedMessage());
            t17 = t15.buffer;
            t18 = t15.byteOffset;
            if (typeof t18 !== "number")
              return t18.$add();
            t16 = t18 + t16 - 4;
            t17.toString;
            H._checkViewArguments(t17, t16, 4);
            t16 = new DataView(t17, t16, 4);
            fs._setFieldUnchecked$2(fi, C.NativeByteData_methods._getFloat32$2(t16, 0, true));
            break;
          case 128:
            t16 = input._bufferPos += 8;
            if (t16 > input._currentLimit)
              H.throwExpression(M.InvalidProtocolBufferException$truncatedMessage());
            t17 = t15.buffer;
            t18 = t15.byteOffset;
            if (typeof t18 !== "number")
              return t18.$add();
            t16 = t18 + t16 - 8;
            t17.toString;
            H._checkViewArguments(t17, t16, 8);
            t16 = new DataView(t17, t16, 8);
            fs._setFieldUnchecked$2(fi, C.NativeByteData_methods._getFloat64$2(t16, 0, true));
            break;
          case 512:
            rawValue = input._readRawVarint32$0();
            value = t16._decodeEnum$3(tagNumber, registry, rawValue);
            if (value == null) {
              unknown = fs._ensureUnknownFields$0();
              t16 = V.Int64_Int64(rawValue);
              if (unknown._isReadOnly)
                $.frozenMessageModificationHandler.call$2("UnknownFieldSet", "mergeVarintField");
              C.JSArray_methods.add$1(unknown._getField$1(tagNumber)._varints, t16);
            } else
              fs._setFieldUnchecked$2(fi, value);
            break;
          case 1024:
            subMessage = t16._makeEmptyMessage$2(tagNumber, registry);
            oldValue = fs._getFieldOrNull$1(fi);
            if (oldValue != null) {
              H.interceptedTypeCheck(oldValue, "$isGeneratedMessage");
              subMessage._fieldSet._mergeFromMessage$1(oldValue._fieldSet);
            }
            input.readGroup$3(tagNumber, subMessage, registry);
            fs._setFieldUnchecked$2(fi, subMessage);
            break;
          case 2048:
            fs._setFieldUnchecked$2(fi, input._readRawVarint32$0());
            break;
          case 4096:
            fs._setFieldUnchecked$2(fi, input._readRawVarint64$0());
            break;
          case 8192:
            fs._setFieldUnchecked$2(fi, M.CodedBufferReader__decodeZigZag32(input._readRawVarint32$1(false)));
            break;
          case 16384:
            value = input._readRawVarint64$0();
            fs._setFieldUnchecked$2(fi, (value.$and(0, 1).$eq(0, 1) ? V.Int64__sub(0, 0, 0, value._l, value._m, value._h) : value).$shr(0, 1));
            break;
          case 32768:
            fs._setFieldUnchecked$2(fi, input._readRawVarint32$1(false));
            break;
          case 65536:
            fs._setFieldUnchecked$2(fi, input._readRawVarint64$0());
            break;
          case 131072:
            t16 = input._bufferPos += 4;
            if (t16 > input._currentLimit)
              H.throwExpression(M.InvalidProtocolBufferException$truncatedMessage());
            t17 = t15.buffer;
            t18 = t15.byteOffset;
            if (typeof t18 !== "number")
              return t18.$add();
            t16 = t18 + t16 - 4;
            t17.toString;
            H._checkViewArguments(t17, t16, 4);
            t16 = new DataView(t17, t16, 4);
            fs._setFieldUnchecked$2(fi, C.NativeByteData_methods._getUint32$2(t16, 0, true));
            break;
          case 262144:
            t16 = input._bufferPos += 8;
            if (t16 > input._currentLimit)
              H.throwExpression(M.InvalidProtocolBufferException$truncatedMessage());
            t17 = t15.buffer;
            t18 = t15.byteOffset;
            if (typeof t18 !== "number")
              return t18.$add();
            t16 = t18 + t16 - 8;
            t17.toString;
            H._checkViewArguments(t17, t16, 8);
            data = new DataView(t17, t16, 8);
            t16 = data.buffer;
            t17 = data.byteOffset;
            t16.toString;
            H._checkViewArguments(t16, t17, 8);
            view = new Uint8Array(t16, t17, 8);
            fs._setFieldUnchecked$2(fi, V.Int64_Int64$fromBytes(view));
            break;
          case 524288:
            t16 = input._bufferPos += 4;
            if (t16 > input._currentLimit)
              H.throwExpression(M.InvalidProtocolBufferException$truncatedMessage());
            t17 = t15.buffer;
            t18 = t15.byteOffset;
            if (typeof t18 !== "number")
              return t18.$add();
            t16 = t18 + t16 - 4;
            t17.toString;
            H._checkViewArguments(t17, t16, 4);
            t16 = new DataView(t17, t16, 4);
            fs._setFieldUnchecked$2(fi, C.NativeByteData_methods._getInt32$2(t16, 0, true));
            break;
          case 1048576:
            t16 = input._bufferPos += 8;
            if (t16 > input._currentLimit)
              H.throwExpression(M.InvalidProtocolBufferException$truncatedMessage());
            t17 = t15.buffer;
            t18 = t15.byteOffset;
            if (typeof t18 !== "number")
              return t18.$add();
            t16 = t18 + t16 - 8;
            t17.toString;
            H._checkViewArguments(t17, t16, 8);
            data = new DataView(t17, t16, 8);
            t16 = data.buffer;
            t17 = data.byteOffset;
            t16.toString;
            H._checkViewArguments(t16, t17, 8);
            view = new Uint8Array(t16, t17, 8);
            fs._setFieldUnchecked$2(fi, V.Int64_Int64$fromBytes(view));
            break;
          case 2097152:
            subMessage = t16._makeEmptyMessage$2(tagNumber, registry);
            oldValue = fs._getFieldOrNull$1(fi);
            if (oldValue != null) {
              H.interceptedTypeCheck(oldValue, "$isGeneratedMessage");
              subMessage._fieldSet._mergeFromMessage$1(oldValue._fieldSet);
            }
            input.readMessage$2(subMessage, registry);
            fs._setFieldUnchecked$2(fi, subMessage);
            break;
          case 18:
            readPackable.call$3(wireType, fi, t14);
            break;
          case 34:
            J.add$1$ax(fs._ensureRepeatedField$1$1(fi, null), input.readBytes$0());
            break;
          case 66:
            t16 = fs._ensureRepeatedField$1$1(fi, null);
            t17 = H.assertSubtype(input.readBytes$0(), "$isList", t13, "$asList");
            J.add$1$ax(t16, new P.Utf8Decoder(true).convert$1(t17));
            break;
          case 258:
            readPackable.call$3(wireType, fi, t12);
            break;
          case 130:
            readPackable.call$3(wireType, fi, t11);
            break;
          case 514:
            readPackableToList.call$3(wireType, fi, new M._mergeFromCodedBufferReader_closure(input, fs, tagNumber, registry));
            break;
          case 1026:
            subMessage = t16._makeEmptyMessage$2(tagNumber, registry);
            input.readGroup$3(tagNumber, subMessage, registry);
            J.add$1$ax(fs._ensureRepeatedField$1$1(fi, null), subMessage);
            break;
          case 2050:
            readPackable.call$3(wireType, fi, t10);
            break;
          case 4098:
            readPackable.call$3(wireType, fi, t9);
            break;
          case 8194:
            readPackable.call$3(wireType, fi, t8);
            break;
          case 16386:
            readPackable.call$3(wireType, fi, t7);
            break;
          case 32770:
            readPackable.call$3(wireType, fi, t6);
            break;
          case 65538:
            readPackable.call$3(wireType, fi, t5);
            break;
          case 131074:
            readPackable.call$3(wireType, fi, t4);
            break;
          case 262146:
            readPackable.call$3(wireType, fi, t3);
            break;
          case 524290:
            readPackable.call$3(wireType, fi, t2);
            break;
          case 1048578:
            readPackable.call$3(wireType, fi, t1);
            break;
          case 2097154:
            subMessage = t16._makeEmptyMessage$2(tagNumber, registry);
            input.readMessage$2(subMessage, registry);
            J.add$1$ax(fs._ensureRepeatedField$1$1(fi, null), subMessage);
            break;
          case 6291456:
            fs._ensureMapField$2$1(H.interceptedTypeCheck(fi, "$isMapFieldInfo"), null, null).add$2(0, input, registry);
            break;
          default:
            throw H.wrapException("Unknown field type " + fieldType);
        }
      }
    },
    _getFieldError: function(fieldType, value) {
      var t1;
      switch (M.PbFieldType__baseType(fieldType)) {
        case 16:
          if (typeof value !== "boolean")
            return "not type bool";
          return;
        case 32:
          if (!J.getInterceptor$(value).$isList)
            return "not List";
          return;
        case 64:
          if (typeof value !== "string")
            return "not type String";
          return;
        case 256:
          if (typeof value !== "number")
            return "not type double";
          if (!isNaN(value))
            if (!(value == 1 / 0 || value == -1 / 0))
              t1 = -34028234663852886e22 <= value && value <= 34028234663852886e22;
            else
              t1 = true;
          else
            t1 = true;
          if (!t1)
            return "out of range for float";
          return;
        case 128:
          if (typeof value !== "number")
            return "not type double";
          return;
        case 512:
          return "not type ProtobufEnum";
        case 2048:
        case 8192:
        case 524288:
          if (typeof value !== "number" || Math.floor(value) !== value)
            return "not type int";
          if (!(-2147483648 <= value && value <= 2147483647))
            return "out of range for signed 32-bit int";
          return;
        case 32768:
        case 131072:
          if (typeof value !== "number" || Math.floor(value) !== value)
            return "not type int";
          if (!(0 <= value && value <= 4294967295))
            return "out of range for unsigned 32-bit int";
          return;
        case 4096:
        case 16384:
        case 65536:
        case 262144:
        case 1048576:
          if (!(value instanceof V.Int64))
            return "not Int64";
          return;
        case 1024:
        case 2097152:
          if (!(value instanceof M.GeneratedMessage))
            return "not a GeneratedMessage";
          return;
        default:
          return "field has unknown type " + fieldType;
      }
    },
    _checkInt: [function(val) {
      if (typeof val !== "number" || Math.floor(val) !== val)
        throw H.wrapException(P.ArgumentError$("Value (" + H.S(val) + ") is not an int"));
    }, "call$1", "protobuf___checkInt$closure", 4, 0, 3],
    defaultFrozenMessageModificationHandler: [function(messageName, methodName) {
      if (methodName != null)
        throw H.wrapException(P.UnsupportedError$("Attempted to call " + methodName + " on a read-only message (" + messageName + ")"));
      throw H.wrapException(P.UnsupportedError$("Attempted to change a read-only message (" + messageName + ")"));
    }, function(messageName) {
      return M.defaultFrozenMessageModificationHandler(messageName, null);
    }, "call$2", "call$1", "protobuf__defaultFrozenMessageModificationHandler$closure", 4, 2, 72],
    PbFieldType__baseType: function(fieldType) {
      return fieldType & 4290772984;
    },
    PbFieldType__defaultForType: function(type) {
      switch (type) {
        case 16:
        case 17:
          return M.protobuf_PbFieldType__BOOL_FALSE$closure();
        case 32:
        case 33:
          return M.protobuf_PbFieldType__BYTES_EMPTY$closure();
        case 64:
        case 65:
          return M.protobuf_PbFieldType__STRING_EMPTY$closure();
        case 256:
        case 257:
        case 128:
        case 129:
          return M.protobuf_PbFieldType__DOUBLE_ZERO$closure();
        case 2048:
        case 2049:
        case 4096:
        case 4097:
        case 8192:
        case 8193:
        case 16384:
        case 16385:
        case 32768:
        case 32769:
        case 65536:
        case 65537:
        case 131072:
        case 131073:
        case 262144:
        case 262145:
        case 524288:
        case 524289:
        case 1048576:
        case 1048577:
          return M.protobuf_PbFieldType__INT_ZERO$closure();
        default:
          return;
      }
    },
    PbFieldType__STRING_EMPTY: [function() {
      return "";
    }, "call$0", "protobuf_PbFieldType__STRING_EMPTY$closure", 0, 0, 53],
    PbFieldType__BYTES_EMPTY: [function() {
      var t1 = P.int;
      H.functionTypeCheck(M.protobuf___checkInt$closure(), {func: 1, ret: -1, args: [P.int]});
      return new M.PbList(H.setRuntimeTypeInfo([], [t1]), M.protobuf___checkInt$closure(), [t1]);
    }, "call$0", "protobuf_PbFieldType__BYTES_EMPTY$closure", 0, 0, 49],
    PbFieldType__BOOL_FALSE: [function() {
      return false;
    }, "call$0", "protobuf_PbFieldType__BOOL_FALSE$closure", 0, 0, 15],
    PbFieldType__INT_ZERO: [function() {
      return 0;
    }, "call$0", "protobuf_PbFieldType__INT_ZERO$closure", 0, 0, 4],
    PbFieldType__DOUBLE_ZERO: [function() {
      return 0;
    }, "call$0", "protobuf_PbFieldType__DOUBLE_ZERO$closure", 0, 0, 13],
    _deepEquals: function(lhs, rhs) {
      var t1, t2;
      t1 = J.getInterceptor$(lhs);
      if (!!t1.$isGeneratedMessage)
        return lhs.$eq(0, rhs);
      t2 = J.getInterceptor$(rhs);
      if (!!t2.$isGeneratedMessage)
        return false;
      if (!!t1.$isList && !!t2.$isList)
        return M._areListsEqual(lhs, rhs);
      if (!!t1.$isMap && !!t2.$isMap)
        return M._areMapsEqual(lhs, rhs);
      if (!!t1.$isByteData && !!t2.$isByteData)
        return M._areByteDataEqual(lhs, rhs);
      return t1.$eq(lhs, rhs);
    },
    _areListsEqual: function(lhs, rhs) {
      var t1, t2, i;
      H.listTypeCheck(lhs);
      H.listTypeCheck(rhs);
      t1 = J.getInterceptor$asx(lhs);
      t2 = J.getInterceptor$asx(rhs);
      if (t1.get$length(lhs) !== t2.get$length(rhs))
        return false;
      for (i = 0; i < t1.get$length(lhs); ++i)
        if (!M._deepEquals(t1.$index(lhs, i), t2.$index(rhs, i)))
          return false;
      return true;
    },
    _areMapsEqual: function(lhs, rhs) {
      var t1 = J.getInterceptor$asx(lhs);
      if (t1.get$length(lhs) != J.get$length$asx(rhs))
        return false;
      return J.every$1$ax(t1.get$keys(lhs), new M._areMapsEqual_closure(lhs, rhs));
    },
    _areByteDataEqual: function(lhs, rhs) {
      var t1 = new M._areByteDataEqual_asBytes();
      return M._areListsEqual(t1.call$1(lhs), t1.call$1(rhs));
    },
    sorted: function(list, $T) {
      var t1 = P.List_List$from(H.assertSubtype(list, "$isIterable", [$T], "$asIterable"), true, $T);
      C.JSArray_methods.sort$0(t1);
      return t1;
    },
    _wireTypeMatches: function(fieldType, wireType) {
      switch (M.PbFieldType__baseType(fieldType)) {
        case 16:
        case 512:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
          return wireType === 0 || wireType === 2;
        case 256:
        case 131072:
        case 524288:
          return wireType === 5 || wireType === 2;
        case 128:
        case 262144:
        case 1048576:
          return wireType === 1 || wireType === 2;
        case 32:
        case 64:
        case 2097152:
          return wireType === 2;
        case 1024:
          return wireType === 3;
        default:
          return false;
      }
    },
    BuilderInfo: {
      "^": "Object;qualifiedMessageName,byIndex,fieldInfo,byTagAsString,byName,oneofs,hasExtensions,hasRequiredFields,0_sortedByTag",
      set$_sortedByTag: function(_sortedByTag) {
        this._sortedByTag = H.assertSubtype(_sortedByTag, "$isList", [[M.FieldInfo,,]], "$asList");
      },
      add$1$7: function(_, tagNumber, $name, fieldType, defaultOrMaker, subBuilder, $valueOf, enumValues, $T) {
        var t1, t2;
        t1 = this.byIndex;
        t2 = new M.FieldInfo(null, $name, tagNumber, t1.length, fieldType, M.FieldInfo_findMakeDefault(fieldType, defaultOrMaker), subBuilder, enumValues, $valueOf, null, [$T]);
        C.JSArray_methods.add$1(t1, t2);
        this.fieldInfo.$indexSet(0, tagNumber, t2);
        this.byTagAsString.$indexSet(0, "" + tagNumber, t2);
        this.byName.$indexSet(0, $name, t2);
      },
      a$1$7: function(_, tagNumber, $name, fieldType, defaultOrMaker, subBuilder, $valueOf, enumValues, $T) {
        this.add$1$7(0, tagNumber, $name, fieldType, defaultOrMaker, subBuilder, $valueOf, enumValues, $T);
      },
      a$1$3: function($receiver, tagNumber, $name, fieldType, $T) {
        return this.a$1$7($receiver, tagNumber, $name, fieldType, null, null, null, null, $T);
      },
      aOS$2: function(tagNumber, $name) {
        this.add$1$7(0, tagNumber, $name, 64, null, null, null, null, P.String);
      },
      get$sortedByTag: function() {
        var t1 = this._sortedByTag;
        if (t1 == null) {
          t1 = this._computeSortedByTag$0();
          this.set$_sortedByTag(t1);
        }
        return t1;
      },
      _computeSortedByTag$0: function() {
        var t1 = this.fieldInfo;
        t1 = P.List_List$from(t1.get$values(t1), false, [M.FieldInfo,,]);
        C.JSArray_methods.sort$1(t1, new M.BuilderInfo__computeSortedByTag_closure());
        return t1;
      },
      _makeEmptyMessage$2: function(tagNumber, extensionRegistry) {
        var i, subBuilderFunc;
        i = this.fieldInfo.$index(0, tagNumber);
        i != null;
        subBuilderFunc = null.get$subBuilder();
        return subBuilderFunc.call$0();
      },
      _decodeEnum$3: function(tagNumber, registry, rawValue) {
        var i, f;
        i = this.fieldInfo.$index(0, tagNumber);
        i != null;
        f = null.get$valueOf();
        return f.call$1(rawValue);
      },
      static: {
        BuilderInfo$: function(messageName, $package) {
          var t1, t2, t3, t4, t5;
          t1 = [M.FieldInfo,,];
          t2 = H.setRuntimeTypeInfo([], [t1]);
          t3 = P.int;
          t4 = P.String;
          t5 = $package.name;
          return new M.BuilderInfo((t5 === "" ? "" : t5 + ".") + messageName, t2, new H.JsLinkedHashMap(0, 0, [t3, t1]), P.LinkedHashMap_LinkedHashMap$_empty(t4, t1), P.LinkedHashMap_LinkedHashMap$_empty(t4, t1), P.LinkedHashMap_LinkedHashMap$_empty(t3, t3), false, true);
        }
      }
    },
    BuilderInfo__computeSortedByTag_closure: {
      "^": "Closure:47;",
      call$2: function(a, b) {
        H.interceptedTypeCheck(a, "$isFieldInfo");
        H.interceptedTypeCheck(b, "$isFieldInfo");
        return C.JSInt_methods.compareTo$1(a.tagNumber, b.tagNumber);
      }
    },
    _mergeFromCodedBufferReader_readPackableToList: {
      "^": "Closure;fs,input",
      call$3: function(wireType, fi, readToList) {
        var list, t1, t2, byteLimit, oldLimit;
        list = this.fs._ensureRepeatedField$1$1(fi, null);
        if (wireType === 2) {
          t1 = this.input;
          t2 = t1._readRawVarint32$0();
          if (t2 < 0)
            H.throwExpression(P.ArgumentError$("CodedBufferReader encountered an embedded string or message which claimed to have negative size."));
          byteLimit = t2 + t1._bufferPos;
          oldLimit = t1._currentLimit;
          if (oldLimit !== -1 && byteLimit > oldLimit || byteLimit > t1._sizeLimit)
            H.throwExpression(M.InvalidProtocolBufferException$truncatedMessage());
          t1._currentLimit = byteLimit;
          new M._mergeFromCodedBufferReader_readPackableToList_closure(t1, readToList, list).call$0();
          t1._currentLimit = oldLimit;
        } else
          readToList.call$1(list);
      }
    },
    _mergeFromCodedBufferReader_readPackableToList_closure: {
      "^": "Closure:1;input,readToList,list",
      call$0: function() {
        var t1, t2, t3;
        for (t1 = this.input, t2 = this.readToList, t3 = this.list; t1._bufferPos < t1._currentLimit;)
          t2.call$1(t3);
      }
    },
    _mergeFromCodedBufferReader_readPackable: {
      "^": "Closure;readPackableToList",
      call$3: function(wireType, fi, readFunc) {
        this.readPackableToList.call$3(wireType, fi, new M._mergeFromCodedBufferReader_readPackable_readToList(readFunc));
      }
    },
    _mergeFromCodedBufferReader_readPackable_readToList: {
      "^": "Closure:48;readFunc",
      call$1: function(list) {
        return J.add$1$ax(list, this.readFunc.call$0());
      }
    },
    _mergeFromCodedBufferReader_closure: {
      "^": "Closure:62;input,fs,tagNumber,registry",
      call$1: function(list) {
        var rawValue, t1, t2, value, unknown;
        rawValue = this.input._readRawVarint32$0();
        t1 = this.fs;
        t2 = this.tagNumber;
        value = t1._meta._decodeEnum$3(t2, this.registry, rawValue);
        if (value == null) {
          unknown = t1._ensureUnknownFields$0();
          t1 = V.Int64_Int64(rawValue);
          if (unknown._isReadOnly)
            $.frozenMessageModificationHandler.call$2("UnknownFieldSet", "mergeVarintField");
          C.JSArray_methods.add$1(unknown._getField$1(t2)._varints, t1);
        } else
          J.add$1$ax(list, value);
      }
    },
    CodedBufferReader: {
      "^": "Object;_buffer,_bufferPos,_currentLimit,_lastTag,_recursionDepth,_recursionLimit,_sizeLimit",
      _checkLimit$1: function(increment) {
        var t1 = this._bufferPos += increment;
        if (t1 > this._currentLimit)
          throw H.wrapException(M.InvalidProtocolBufferException$truncatedMessage());
      },
      readGroup$3: function(fieldNumber, message, extensionRegistry) {
        var t1 = this._recursionDepth;
        if (t1 >= this._recursionLimit)
          throw H.wrapException(M.InvalidProtocolBufferException$recursionLimitExceeded());
        this._recursionDepth = t1 + 1;
        M._mergeFromCodedBufferReader(message._fieldSet, this, extensionRegistry);
        if (this._lastTag !== (fieldNumber << 3 | 4) >>> 0)
          H.throwExpression(M.InvalidProtocolBufferException$invalidEndTag());
        --this._recursionDepth;
      },
      readMessage$2: function(message, extensionRegistry) {
        var $length, t1, oldLimit, t2;
        $length = this._readRawVarint32$0();
        t1 = this._recursionDepth;
        if (t1 >= this._recursionLimit)
          throw H.wrapException(M.InvalidProtocolBufferException$recursionLimitExceeded());
        if ($length < 0)
          throw H.wrapException(P.ArgumentError$("CodedBufferReader encountered an embedded string or message which claimed to have negative size."));
        oldLimit = this._currentLimit;
        t2 = this._bufferPos + $length;
        this._currentLimit = t2;
        if (t2 > oldLimit)
          throw H.wrapException(M.InvalidProtocolBufferException$truncatedMessage());
        this._recursionDepth = t1 + 1;
        M._mergeFromCodedBufferReader(message._fieldSet, this, extensionRegistry);
        if (this._lastTag !== 0)
          H.throwExpression(M.InvalidProtocolBufferException$invalidEndTag());
        --this._recursionDepth;
        this._currentLimit = oldLimit;
      },
      readInt32$0: [function() {
        return this._readRawVarint32$0();
      }, "call$0", "get$readInt32", 0, 0, 4],
      readInt64$0: [function() {
        return this._readRawVarint64$0();
      }, "call$0", "get$readInt64", 0, 0, 7],
      readUint32$0: [function() {
        return this._readRawVarint32$1(false);
      }, "call$0", "get$readUint32", 0, 0, 4],
      readUint64$0: [function() {
        return this._readRawVarint64$0();
      }, "call$0", "get$readUint64", 0, 0, 7],
      readSint32$0: [function() {
        return M.CodedBufferReader__decodeZigZag32(this._readRawVarint32$1(false));
      }, "call$0", "get$readSint32", 0, 0, 4],
      readSint64$0: [function() {
        var value = this._readRawVarint64$0();
        return (value.$and(0, 1).$eq(0, 1) ? V.Int64__sub(0, 0, 0, value._l, value._m, value._h) : value).$shr(0, 1);
      }, "call$0", "get$readSint64", 0, 0, 7],
      readFixed32$0: [function() {
        return C.NativeByteData_methods._getUint32$2(this._readByteData$1(4), 0, true);
      }, "call$0", "get$readFixed32", 0, 0, 4],
      readFixed64$0: [function() {
        return this.readSfixed64$0();
      }, "call$0", "get$readFixed64", 0, 0, 7],
      readSfixed32$0: [function() {
        return C.NativeByteData_methods._getInt32$2(this._readByteData$1(4), 0, true);
      }, "call$0", "get$readSfixed32", 0, 0, 4],
      readSfixed64$0: [function() {
        var data, t1, t2;
        data = this._readByteData$1(8);
        t1 = data.buffer;
        t2 = data.byteOffset;
        t1.toString;
        return V.Int64_Int64$fromBytes(H.NativeUint8List_NativeUint8List$view(t1, t2, 8));
      }, "call$0", "get$readSfixed64", 0, 0, 7],
      readBool$0: [function() {
        return this._readRawVarint32$0() !== 0;
      }, "call$0", "get$readBool", 0, 0, 15],
      readBytes$0: function() {
        var $length, t1, t2, t3;
        $length = this._readRawVarint32$0();
        this._checkLimit$1($length);
        t1 = this._buffer;
        t2 = t1.buffer;
        t1 = t1.byteOffset;
        t3 = this._bufferPos;
        if (typeof t1 !== "number")
          return t1.$add();
        t2.toString;
        return H.NativeUint8List_NativeUint8List$view(t2, t1 + t3 - $length, $length);
      },
      readFloat$0: [function() {
        return C.NativeByteData_methods._getFloat32$2(this._readByteData$1(4), 0, true);
      }, "call$0", "get$readFloat", 0, 0, 13],
      readDouble$0: [function() {
        return C.NativeByteData_methods._getFloat64$2(this._readByteData$1(8), 0, true);
      }, "call$0", "get$readDouble", 0, 0, 13],
      readTag$0: function() {
        if (this._bufferPos >= this._currentLimit) {
          this._lastTag = 0;
          return 0;
        }
        var t1 = this._readRawVarint32$0();
        this._lastTag = t1;
        if ((t1 & 2147483647) >>> 3 === 0)
          throw H.wrapException(new M.InvalidProtocolBufferException("Protocol message contained an invalid tag (zero)."));
        return t1;
      },
      _readRawVarintByte$0: function() {
        var t1, t2;
        this._checkLimit$1(1);
        t1 = this._buffer;
        t2 = this._bufferPos - 1;
        if (t2 < 0 || t2 >= t1.length)
          return H.ioore(t1, t2);
        return t1[t2];
      },
      _readRawVarint32$1: function(signed) {
        var t1, t2, bytes, t3, result, i, t4, byte;
        t1 = this._currentLimit;
        t2 = this._bufferPos;
        bytes = t1 - t2;
        if (bytes > 10)
          bytes = 10;
        for (t1 = this._buffer, t3 = t1.length, result = 0, i = 0; i < bytes; ++i, t2 = t4) {
          t4 = t2 + 1;
          this._bufferPos = t4;
          if (t2 < 0 || t2 >= t3)
            return H.ioore(t1, t2);
          byte = t1[t2];
          result |= C.JSInt_methods._shlPositive$1(byte & 127, i * 7);
          if ((byte & 128) === 0) {
            result = (result & 4294967295) >>> 0;
            return signed ? result - 2 * ((2147483648 & result) >>> 0) : result;
          }
        }
        throw H.wrapException(M.InvalidProtocolBufferException$malformedVarint());
      },
      _readRawVarint32$0: function() {
        return this._readRawVarint32$1(true);
      },
      _readRawVarint64$0: function() {
        var t1, t2, lo, i, t3, byte, hi;
        for (t1 = this._buffer, t2 = t1.length, lo = 0, i = 0; i < 4; ++i) {
          t3 = ++this._bufferPos;
          if (t3 > this._currentLimit)
            H.throwExpression(M.InvalidProtocolBufferException$truncatedMessage());
          --t3;
          if (t3 < 0 || t3 >= t2)
            return H.ioore(t1, t3);
          byte = t1[t3];
          lo = (lo | C.JSInt_methods._shlPositive$1(byte & 127, i * 7)) >>> 0;
          if ((byte & 128) === 0)
            return V.Int64_Int64$fromInts(0, lo);
        }
        byte = this._readRawVarintByte$0();
        lo = (lo | (byte & 15) << 28) >>> 0;
        hi = byte >>> 4 & 7;
        if ((byte & 128) === 0)
          return V.Int64_Int64$fromInts(hi, lo);
        for (i = 0; i < 5; ++i) {
          t3 = ++this._bufferPos;
          if (t3 > this._currentLimit)
            H.throwExpression(M.InvalidProtocolBufferException$truncatedMessage());
          --t3;
          if (t3 < 0 || t3 >= t2)
            return H.ioore(t1, t3);
          byte = t1[t3];
          hi = (hi | C.JSInt_methods._shlPositive$1(byte & 127, i * 7 + 3)) >>> 0;
          if ((byte & 128) === 0)
            return V.Int64_Int64$fromInts(hi, lo);
        }
        throw H.wrapException(M.InvalidProtocolBufferException$malformedVarint());
      },
      _readByteData$1: function(sizeInBytes) {
        var t1, t2, t3;
        this._checkLimit$1(sizeInBytes);
        t1 = this._buffer;
        t2 = t1.buffer;
        t1 = t1.byteOffset;
        t3 = this._bufferPos;
        if (typeof t1 !== "number")
          return t1.$add();
        t2.toString;
        return H.NativeByteData_NativeByteData$view(t2, t1 + t3 - sizeInBytes, sizeInBytes);
      },
      static: {
        CodedBufferReader__decodeZigZag32: function(value) {
          if ((value & 1) === 1)
            return -C.JSInt_methods._shrOtherPositive$1(value, 1) - 1;
          else
            return C.JSInt_methods._shrOtherPositive$1(value, 1);
        }
      }
    },
    CodedBufferWriter: {
      "^": "Object;_splices,_lastSplicePos,0_outputChunk,_bytesInChunk,0_outputChunkAsByteData,_outputChunks,_outputChunksBytes,_bytesTotal",
      writeField$3: function(fieldNumber, fieldType, fieldValue) {
        var valueType, t1, mark, wireFormat, t2, i, t3, t4;
        valueType = fieldType & 4294967288;
        if ((fieldType & 4) !== 0) {
          t1 = J.getInterceptor$asx(fieldValue);
          if (!H.boolTypeCheck(t1.get$isEmpty(fieldValue))) {
            if (typeof fieldNumber !== "number")
              return fieldNumber.$shl();
            this._writeVarint32$1(((fieldNumber << 3 | 2) & 4294967295) >>> 0);
            mark = this._startLengthDelimited$0();
            for (t1 = t1.get$iterator(H.listSuperNativeTypeCheck(fieldValue, "$isIterable")); t1.moveNext$0();)
              this._writeValueAs$2(valueType, t1.get$current(t1));
            this._endLengthDelimited$1(mark);
          }
          return;
        }
        t1 = $.$get$CodedBufferWriter__wireTypes();
        wireFormat = t1[125613361 * valueType >>> 27 & 31];
        if ((fieldType & 4194304) !== 0) {
          fieldValue.forEach$1(0, new M.CodedBufferWriter_writeField_closure(this, fieldNumber, fieldValue, t1[C.JSNumber_methods._shrOtherPositive$1(C.JSInt_methods.$mul(125613361, fieldValue.get$keyFieldType()), 27) & 31], t1[C.JSNumber_methods._shrOtherPositive$1(C.JSInt_methods.$mul(125613361, fieldValue.get$valueFieldType()), 27) & 31]));
          return;
        }
        if ((fieldType & 2) !== 0) {
          t1 = J.getInterceptor$asx(fieldValue);
          t2 = valueType === 1024;
          i = 0;
          while (true) {
            t3 = H.numTypeCheck(t1.get$length(fieldValue));
            if (typeof t3 !== "number")
              return H.iae(t3);
            if (!(i < t3))
              break;
            t3 = t1.$index(fieldValue, i);
            if (typeof fieldNumber !== "number")
              return fieldNumber.$shl();
            t4 = fieldNumber << 3;
            this._writeVarint32$1(((t4 | wireFormat) & 4294967295) >>> 0);
            this._writeValueAs$2(valueType, t3);
            if (t2)
              this._writeVarint32$1(((t4 | 4) & 4294967295) >>> 0);
            ++i;
          }
          return;
        }
        this._writeValue$4(fieldNumber, valueType, fieldValue, wireFormat);
      },
      writeTo$2: function(buffer, offset) {
        var t1, t2, t3, outPos, chunkIndex, chunkPos, i, action, v, outPos0, t4, bytesToCopy, chunk, t5, bytesInChunk, leftInChunk, bytesToCopyFromChunk, endPos, chunkPos0;
        H.interceptedTypeCheck(buffer, "$isUint8List");
        H.intTypeCheck(offset);
        t1 = buffer.length;
        if (t1 - offset < this._bytesTotal)
          return false;
        this._commitChunk$1(false);
        this._commitSplice$0();
        for (t2 = this._splices, t3 = this._outputChunks, outPos = offset, chunkIndex = 0, chunkPos = 0, i = 0; i < t2.length; ++i) {
          action = t2[i];
          if (typeof action === "number" && Math.floor(action) === action)
            if (action <= 0) {
              v = 0 - action;
              for (; v >= 128; outPos = outPos0) {
                outPos0 = outPos + 1;
                if (outPos < 0 || outPos >= t1)
                  return H.ioore(buffer, outPos);
                buffer[outPos] = 128 | v & 127;
                v = C.JSInt_methods._shrOtherPositive$1(v, 7);
              }
              outPos0 = outPos + 1;
              if (outPos < 0 || outPos >= t1)
                return H.ioore(buffer, outPos);
              buffer[outPos] = v;
              outPos = outPos0;
            } else
              for (t4 = t3.length, bytesToCopy = action; bytesToCopy > 0;) {
                if (chunkIndex < 0 || chunkIndex >= t4)
                  return H.ioore(t3, chunkIndex);
                chunk = H.interceptedTypeCheck(t3[chunkIndex], "$isUint8List");
                t5 = chunkIndex + 1;
                if (t5 >= t4)
                  return H.ioore(t3, t5);
                bytesInChunk = H.intTypeCheck(t3[t5]);
                if (typeof bytesInChunk !== "number")
                  return bytesInChunk.$sub();
                leftInChunk = bytesInChunk - chunkPos;
                bytesToCopyFromChunk = leftInChunk > bytesToCopy ? bytesToCopy : leftInChunk;
                endPos = chunkPos + bytesToCopyFromChunk;
                for (; chunkPos < endPos; chunkPos = chunkPos0, outPos = outPos0) {
                  outPos0 = outPos + 1;
                  chunkPos0 = chunkPos + 1;
                  if (chunkPos < 0 || chunkPos >= chunk.length)
                    return H.ioore(chunk, chunkPos);
                  t5 = chunk[chunkPos];
                  if (outPos < 0 || outPos >= t1)
                    return H.ioore(buffer, outPos);
                  buffer[outPos] = t5;
                }
                bytesToCopy -= bytesToCopyFromChunk;
                if (chunkPos === bytesInChunk) {
                  chunkIndex += 2;
                  chunkPos = 0;
                }
              }
          else
            outPos = this._copyInto$3(buffer, outPos, H.interceptedTypeCheck(action, "$isTypedData"));
        }
        return true;
      },
      writeTo$1: function(buffer) {
        return this.writeTo$2(buffer, 0);
      },
      _commitChunk$1: function(allocateNew) {
        var t1;
        if (this._bytesInChunk !== 0) {
          t1 = this._outputChunks;
          C.JSArray_methods.add$1(t1, this._outputChunk);
          C.JSArray_methods.add$1(t1, this._bytesInChunk);
          this._outputChunksBytes = this._outputChunksBytes + this._bytesInChunk;
        }
        if (allocateNew) {
          t1 = new Uint8Array(512);
          this._outputChunk = t1;
          this._bytesInChunk = 0;
          t1 = t1.buffer;
          t1.toString;
          this._outputChunkAsByteData = H.NativeByteData_NativeByteData$view(t1, 0, null);
        } else {
          this._outputChunkAsByteData = null;
          this._outputChunk = null;
          this._bytesInChunk = 0;
        }
      },
      _ensureBytes$1: function(count) {
        if (this._bytesInChunk + count > 512)
          this._commitChunk$1(true);
      },
      _commitSplice$0: function() {
        var pos, bytes;
        pos = this._bytesInChunk + this._outputChunksBytes;
        bytes = pos - this._lastSplicePos;
        if (bytes > 0)
          C.JSArray_methods.add$1(this._splices, bytes);
        this._lastSplicePos = pos;
      },
      _startLengthDelimited$0: function() {
        var t1, index;
        this._commitSplice$0();
        t1 = this._splices;
        index = t1.length;
        C.JSArray_methods.add$1(t1, this._bytesTotal);
        return index;
      },
      _endLengthDelimited$1: function(index) {
        var t1, t2, writtenSizeInBytes;
        t1 = this._bytesTotal;
        t2 = this._splices;
        if (index >= t2.length)
          return H.ioore(t2, index);
        writtenSizeInBytes = t1 - H.numTypeCheck(t2[index]);
        C.JSArray_methods.$indexSet(t2, index, 0 - writtenSizeInBytes);
        this._bytesTotal = this._bytesTotal + this._varint32LengthInBytes$1(writtenSizeInBytes);
      },
      _varint32LengthInBytes$1: function(value) {
        value = (value & 4294967295) >>> 0;
        if (value < 128)
          return 1;
        if (value < 16384)
          return 2;
        if (value < 2097152)
          return 3;
        if (value < 268435456)
          return 4;
        return 5;
      },
      _writeVarint32$1: function(value) {
        var i, t1, i0, i1;
        this._ensureBytes$1(5);
        i = this._bytesInChunk;
        t1 = this._outputChunk;
        i0 = i;
        while (true) {
          if (typeof value !== "number")
            return value.$ge();
          if (!(value >= 128))
            break;
          i1 = i0 + 1;
          t1.length;
          if (i0 >= 512)
            return H.ioore(t1, i0);
          t1[i0] = 128 | value & 127;
          value = C.JSInt_methods._shrOtherPositive$1(value, 7);
          i0 = i1;
        }
        i1 = i0 + 1;
        t1.length;
        if (i0 >= 512)
          return H.ioore(t1, i0);
        t1[i0] = value;
        this._bytesTotal = this._bytesTotal + (i1 - i);
        this._bytesInChunk = i1;
      },
      _writeVarint64$1: function(value) {
        var i, lo, hi, t1, i0;
        this._ensureBytes$1(10);
        i = this._bytesInChunk;
        lo = value.toUnsigned$1(0, 32).toInt$0(0);
        hi = value.$shr(0, 32).toUnsigned$1(0, 32).toInt$0(0);
        t1 = this._outputChunk;
        while (true) {
          if (!(hi > 0 || lo >= 128))
            break;
          i0 = i + 1;
          t1.length;
          if (i >= 512)
            return H.ioore(t1, i);
          t1[i] = 128 | lo & 127;
          lo = (C.JSInt_methods._shrOtherPositive$1(lo, 7) | (hi & 127) << 25) >>> 0;
          hi = C.JSInt_methods._shrOtherPositive$1(hi, 7);
          i = i0;
        }
        i0 = i + 1;
        t1.length;
        if (i >= 512)
          return H.ioore(t1, i);
        t1[i] = lo;
        this._bytesTotal = this._bytesTotal + (i0 - this._bytesInChunk);
        this._bytesInChunk = i0;
      },
      _writeDouble$1: function(value) {
        var t1;
        value.toString;
        if (isNaN(value)) {
          this._writeInt32$1(0);
          this._writeInt32$1(2146959360);
          return;
        }
        this._ensureBytes$1(8);
        t1 = this._outputChunkAsByteData;
        (t1 && C.NativeByteData_methods)._setFloat64$3(t1, this._bytesInChunk, value, true);
        this._bytesInChunk += 8;
        this._bytesTotal += 8;
      },
      _writeInt32$1: function(value) {
        var t1, t2;
        this._ensureBytes$1(4);
        t1 = this._outputChunkAsByteData;
        t2 = this._bytesInChunk;
        if (typeof value !== "number")
          return value.$and();
        (t1 && C.NativeByteData_methods)._setInt32$3(t1, t2, (value & 4294967295) >>> 0, true);
        this._bytesInChunk += 4;
        this._bytesTotal += 4;
      },
      _writeInt64$1: function(value) {
        this._writeInt32$1(value.toUnsigned$1(0, 32).toInt$0(0));
        this._writeInt32$1(value.$shr(0, 32).toUnsigned$1(0, 32).toInt$0(0));
      },
      _writeValueAs$2: function(valueType, value) {
        var t1, o, mark;
        switch (valueType) {
          case 16:
            this._writeVarint32$1(H.boolTypeCheck(value) ? 1 : 0);
            break;
          case 32:
            this._writeBytesNoTag$1(!!J.getInterceptor$(value).$isTypedData ? value : new Uint8Array(H._ensureNativeList(H.assertSubtype(value, "$isList", [P.int], "$asList"))));
            break;
          case 64:
            this._writeBytesNoTag$1(C.C_Utf8Encoder.convert$1(H.stringTypeCheck(value)));
            break;
          case 128:
            this._writeDouble$1(H.doubleTypeCheck(value));
            break;
          case 256:
            H.doubleTypeCheck(value);
            value.toString;
            if (isNaN(value))
              this._writeInt32$1(2143289344);
            else {
              if (typeof value !== "number")
                return value.abs$0();
              t1 = Math.abs(value);
              if (t1 < 1401298464324817e-60)
                this._writeInt32$1(C.JSNumber_methods.get$isNegative(value) ? 2147483648 : 0);
              else if (value == 1 / 0 || value == -1 / 0 || t1 > 34028234663852886e22)
                this._writeInt32$1(C.JSNumber_methods.get$isNegative(value) ? 4286578688 : 2139095040);
              else {
                this._ensureBytes$1(4);
                t1 = this._outputChunkAsByteData;
                (t1 && C.NativeByteData_methods)._setFloat32$3(t1, this._bytesInChunk, value, true);
                this._bytesInChunk += 4;
                this._bytesTotal += 4;
              }
            }
            break;
          case 512:
            this._writeVarint32$1(H.intTypeCheck(J.$and$bn(J.get$value$x(value), 4294967295)));
            break;
          case 1024:
            value.writeToCodedBufferWriter$1(this);
            break;
          case 2048:
            this._writeVarint32$1(H.intTypeCheck(J.$and$bn(value, 4294967295)));
            break;
          case 4096:
            this._writeVarint64$1(H.interceptedTypeCheck(value, "$isInt64"));
            break;
          case 8192:
            H.intTypeCheck(value);
            if (typeof value !== "number")
              return value.$shl();
            this._writeVarint32$1((value << 1 ^ C.JSInt_methods._shrOtherPositive$1(value, 31)) >>> 0);
            break;
          case 16384:
            H.interceptedTypeCheck(value, "$isInt64");
            t1 = value.$shl(0, 1);
            o = V.Int64__promote(value.$shr(0, 63));
            this._writeVarint64$1(new V.Int64(4194303 & (t1._l ^ o._l), 4194303 & (t1._m ^ o._m), 1048575 & (t1._h ^ o._h)));
            break;
          case 32768:
            this._writeVarint32$1(H.intTypeCheck(value));
            break;
          case 65536:
            this._writeVarint64$1(H.interceptedTypeCheck(value, "$isInt64"));
            break;
          case 131072:
            this._writeInt32$1(H.intTypeCheck(value));
            break;
          case 262144:
            this._writeInt64$1(H.interceptedTypeCheck(value, "$isInt64"));
            break;
          case 524288:
            this._writeInt32$1(H.intTypeCheck(value));
            break;
          case 1048576:
            this._writeInt64$1(H.interceptedTypeCheck(value, "$isInt64"));
            break;
          case 2097152:
            mark = this._startLengthDelimited$0();
            value.writeToCodedBufferWriter$1(this);
            this._endLengthDelimited$1(mark);
            break;
        }
      },
      _writeBytesNoTag$1: function(value) {
        var t1, t2;
        this._writeVarint32$1((J.get$length$asx(value) & 4294967295) >>> 0);
        this._commitSplice$0();
        C.JSArray_methods.add$1(this._splices, value);
        t1 = this._bytesTotal;
        t2 = value.byteLength;
        if (typeof t2 !== "number")
          return H.iae(t2);
        this._bytesTotal = t1 + t2;
      },
      _writeValue$4: function(fieldNumber, valueType, value, wireFormat) {
        var t1;
        if (typeof fieldNumber !== "number")
          return fieldNumber.$shl();
        t1 = fieldNumber << 3;
        this._writeVarint32$1(((t1 | wireFormat) & 4294967295) >>> 0);
        this._writeValueAs$2(valueType, value);
        if (valueType === 1024)
          this._writeVarint32$1(((t1 | 4) & 4294967295) >>> 0);
      },
      _copyInto$3: function(buffer, pos, value) {
        var len, t1, j, pos0, t2, u8, t3;
        if (!!J.getInterceptor$(value).$isUint8List) {
          len = value.length;
          for (t1 = buffer.length, j = 0; j < len; ++j, pos = pos0) {
            pos0 = pos + 1;
            t2 = value[j];
            if (pos >= t1)
              return H.ioore(buffer, pos);
            buffer[pos] = t2;
          }
          return pos;
        } else {
          len = value.byteLength;
          t1 = value.buffer;
          t2 = value.byteOffset;
          t1.toString;
          u8 = H.NativeUint8List_NativeUint8List$view(t1, t2, len);
          if (typeof len !== "number")
            return H.iae(len);
          t1 = u8.length;
          t2 = buffer.length;
          j = 0;
          for (; j < len; ++j, pos = pos0) {
            pos0 = pos + 1;
            if (j >= t1)
              return H.ioore(u8, j);
            t3 = u8[j];
            if (pos >= t2)
              return H.ioore(buffer, pos);
            buffer[pos] = t3;
          }
          return pos;
        }
      }
    },
    CodedBufferWriter_writeField_closure: {
      "^": "Closure:5;$this,fieldNumber,fieldValue,keyWireFormat,valueWireFormat",
      call$2: function(key, value) {
        var t1, t2, mark;
        t1 = this.$this;
        t2 = this.fieldNumber;
        if (typeof t2 !== "number")
          return t2.$shl();
        t1._writeVarint32$1(((t2 << 3 | 2) & 4294967295) >>> 0);
        mark = t1._startLengthDelimited$0();
        t2 = this.fieldValue;
        t1._writeValue$4(1, t2.get$keyFieldType(), key, this.keyWireFormat);
        t1._writeValue$4(2, t2.get$valueFieldType(), value, this.valueWireFormat);
        t1._endLengthDelimited$1(mark);
      }
    },
    InvalidProtocolBufferException: {
      "^": "Object;message",
      toString$0: function(_) {
        return "InvalidProtocolBufferException: " + this.message;
      },
      static: {
        InvalidProtocolBufferException$invalidEndTag: function() {
          return new M.InvalidProtocolBufferException("Protocol message end-group tag did not match expected tag.");
        },
        InvalidProtocolBufferException$malformedVarint: function() {
          return new M.InvalidProtocolBufferException("CodedBufferReader encountered a malformed varint.");
        },
        InvalidProtocolBufferException$recursionLimitExceeded: function() {
          return new M.InvalidProtocolBufferException("Protocol message had too many levels of nesting.  May be malicious.\nUse CodedBufferReader.setRecursionLimit() to increase the depth limit.\n");
        },
        InvalidProtocolBufferException$truncatedMessage: function() {
          return new M.InvalidProtocolBufferException("While parsing a protocol message, the input ended unexpectedly\nin the middle of a field.  This could mean either than the\ninput has been truncated or that an embedded message\nmisreported its own length.\n");
        }
      }
    },
    Extension: {
      "^": "FieldInfo;$ti"
    },
    _ExtensionFieldSet: {
      "^": "Object;_parent,_info,_values,_isReadOnly",
      _validateInfo$1: function(fi) {
        var t1;
        fi.get$extendee();
        t1 = this._parent;
        t1._meta.qualifiedMessageName;
        t1 = P.ArgumentError$("Extension " + H.S(fi) + " not legal for message " + t1.get$_messageName());
        throw H.wrapException(t1);
      },
      _setFieldUnchecked$2: function(fi, value) {
        this._values.$indexSet(0, fi.get$tagNumber(), value);
      }
    },
    _EmptyExtensionRegistry: {
      "^": "Object;",
      $isExtensionRegistry: 1
    },
    FieldInfo: {
      "^": "Object;0_emptyList,_mapEntryBuilderInfo,name,tagNumber<,index>,type,makeDefault,subBuilder,enumValues,valueOf,check,$ti",
      toString$0: function(_) {
        return this.name;
      },
      static: {
        FieldInfo_findMakeDefault: function(type, defaultOrMaker) {
          var t1 = M.PbFieldType__defaultForType(type);
          return t1;
        }
      }
    },
    _FieldSet: {
      "^": "Object;_protobuf$_message,_meta,_eventPlugin,_isReadOnly,_values,0_extensions,0_unknownFields,oneofCases",
      get$_messageName: function() {
        return this._meta.qualifiedMessageName;
      },
      _ensureExtensions$0: function() {
        var t1 = this._extensions;
        if (t1 == null) {
          t1 = P.int;
          t1 = new M._ExtensionFieldSet(this, P.LinkedHashMap_LinkedHashMap$_empty(t1, [M.Extension,,]), P.LinkedHashMap_LinkedHashMap$_empty(t1, null), false);
          this._extensions = t1;
        }
        return t1;
      },
      _ensureUnknownFields$0: function() {
        var t1 = this._unknownFields;
        if (t1 == null) {
          t1 = new M.UnknownFieldSet(new H.JsLinkedHashMap(0, 0, [P.int, M.UnknownFieldSetField]), false);
          this._unknownFields = t1;
        }
        return t1;
      },
      _getFieldOrNull$1: function(fi) {
        var t1, t2, t3;
        t1 = this._values;
        t2 = fi.index;
        t3 = t1.length;
        if (t2 >= t3)
          return H.ioore(t1, t2);
        return t1[t2];
      },
      _setFieldUnchecked$2: function(fi, value) {
        this._setNonExtensionFieldUnchecked$2(fi, value);
      },
      _ensureRepeatedField$1$1: function(fi, $T) {
        var value, newValue;
        H.assertSubtype(fi, "$isFieldInfo", [$T], "$asFieldInfo");
        value = this._getFieldOrNull$1(fi);
        if (value != null)
          return H.subtypeCast(value, "$isList", [$T], "$asList");
        newValue = this._protobuf$_message.createRepeatedField$1$2(fi.tagNumber, fi, H.getTypeArgumentByIndex(fi, 0));
        this._setNonExtensionFieldUnchecked$2(fi, newValue);
        return newValue;
      },
      _ensureMapField$2$1: function(fi, $K, $V) {
        var value, newValue;
        H.assertSubtype(fi, "$isMapFieldInfo", [$K, $V], "$asMapFieldInfo");
        value = this._getFieldOrNull$1(fi);
        if (value != null)
          return H.assertSubtype(H.subtypeCast(value, "$isMap", [$K, $V], "$asMap"), "$isPbMap", [$K, $V], "$asPbMap");
        newValue = fi._createMapField$1(this._protobuf$_message);
        this._setNonExtensionFieldUnchecked$2(fi, newValue);
        return H.assertSubtype(newValue, "$isPbMap", [$K, $V], "$asPbMap");
      },
      _setNonExtensionFieldUnchecked$2: function(fi, value) {
        var t1;
        this._meta.oneofs.$index(0, fi.tagNumber);
        t1 = this._values;
        (t1 && C.JSArray_methods).$indexSet(t1, fi.index, value);
      },
      _$getS$2: function(index, defaultValue) {
        var t1, value;
        t1 = this._values;
        if (index >= t1.length)
          return H.ioore(t1, index);
        value = t1[index];
        if (value == null)
          return defaultValue;
        return H.stringTypeCheck(value);
      },
      _$set$2: function(index, value) {
        var t1, t2;
        t1 = this._meta;
        t2 = t1.byIndex;
        if (index >= t2.length)
          return H.ioore(t2, index);
        t2 = t2[index];
        t1.oneofs.$index(0, t2.tagNumber);
        t1 = this._values;
        (t1 && C.JSArray_methods).$indexSet(t1, index, value);
      },
      _equals$1: function(o) {
        var t1, t2, i, t3, t4;
        t1 = this._meta;
        t2 = o._meta;
        if (t1 == null ? t2 != null : t1 !== t2)
          return false;
        for (t1 = this._values, t2 = t1.length, i = 0; i < t2; ++i) {
          t3 = t1[i];
          t4 = o._values;
          if (i >= t4.length)
            return H.ioore(t4, i);
          if (!this._equalFieldValues$2(t3, t4[i]))
            return false;
        }
        t1 = this._extensions;
        if (t1 != null) {
          t1 = t1._values;
          t1 = !t1.get$isNotEmpty(t1);
        } else
          t1 = true;
        if (t1) {
          t1 = o._extensions;
          if (t1 != null) {
            t1 = t1._values;
            t1 = t1.get$isNotEmpty(t1);
          } else
            t1 = false;
          if (t1)
            return false;
        } else {
          t1 = this._extensions;
          t2 = o._extensions;
          if (!M._areMapsEqual(t1._values, t2._values))
            return false;
        }
        t1 = this._unknownFields;
        if (t1 != null) {
          t1 = t1._fields;
          t1 = t1.get$isEmpty(t1);
        } else
          t1 = true;
        if (t1) {
          t1 = o._unknownFields;
          if (t1 != null) {
            t1 = t1._fields;
            t1 = t1.get$isNotEmpty(t1);
          } else
            t1 = false;
          if (t1)
            return false;
        } else if (!J.$eq$(this._unknownFields, o._unknownFields))
          return false;
        return true;
      },
      _equalFieldValues$2: function(left, right) {
        var t1, val;
        t1 = left == null;
        if (!t1 && right != null)
          return M._deepEquals(left, right);
        val = t1 ? right : left;
        if (val == null)
          return true;
        t1 = J.getInterceptor$(val);
        if (!!t1.$isList && t1.get$isEmpty(val))
          return true;
        return false;
      },
      get$_hashCode: function() {
        var t1, t2, t3;
        t1 = {};
        t1.hash = null;
        t1.hash = 41;
        t1.hash = 536870911 & 779 + J.get$hashCode$(this._meta);
        new M._FieldSet__hashCode_hashEachField(this, new M._FieldSet__hashCode_hashField(t1, new M._FieldSet__hashCode_hashEnumList(t1))).call$0();
        t2 = this._unknownFields;
        if (t2 != null) {
          t3 = t1.hash;
          if (typeof t3 !== "number")
            return H.iae(t3);
          t1.hash = 536870911 & 29 * t3 + t2.get$hashCode(t2);
        }
        return t1.hash;
      },
      writeString$2: function(out, indent) {
        var t1, t2;
        t1 = new M._FieldSet_writeString_writeFieldValue(new M._FieldSet_writeString_renderValue(out, indent));
        C.JSArray_methods.forEach$1(this._meta.get$sortedByTag(), new M._FieldSet_writeString_closure(this, t1));
        t2 = this._extensions;
        if (t2 != null) {
          t2 = t2._info;
          t2 = t2.get$keys(t2);
          t2 = P.List_List$from(t2, true, H.getRuntimeTypeArgument(t2, "Iterable", 0));
          C.JSArray_methods.sort$0(t2);
          C.JSArray_methods.forEach$1(t2, new M._FieldSet_writeString_closure0(this, t1));
        }
        t1 = this._unknownFields;
        if (t1 != null)
          out._contents += t1.toString$0(0);
        else
          out._contents += new M.UnknownFieldSet(new H.JsLinkedHashMap(0, 0, [P.int, M.UnknownFieldSetField]), false)._toString$1("");
      },
      _mergeFromMessage$1: function(other) {
        var t1, t2, _i, fi, t3, t4, value, extension;
        for (t1 = other._meta.get$sortedByTag(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          fi = t1[_i];
          t3 = other._values;
          t4 = J.get$index$z(fi);
          if (t4 >= t3.length)
            return H.ioore(t3, t4);
          value = t3[t4];
          if (value != null)
            this._mergeField$3$isExtension(fi, value, false);
        }
        t1 = other._extensions;
        if (t1 != null)
          for (t2 = t1._values, t3 = t2.get$keys(t2), t3 = t3.get$iterator(t3); t3.moveNext$0();) {
            t4 = t3.get$current(t3);
            extension = t1._info.$index(0, t4);
            this._mergeField$3$isExtension(extension, t2.$index(0, extension.get$tagNumber()), true);
          }
        if (other._unknownFields != null)
          this._ensureUnknownFields$0().mergeFromUnknownFieldSet$1(other._unknownFields);
      },
      _mergeField$3$isExtension: function(otherFi, fieldValue, isExtension) {
        var tagNumber, fi, mustClone, t1, map, t2, repeatedFields, i, currentFi, fieldValue0;
        tagNumber = otherFi.tagNumber;
        fi = this._meta.fieldInfo.$index(0, tagNumber);
        if (fi == null && isExtension)
          fi = otherFi;
        mustClone = (otherFi.type & 2098176) !== 0;
        t1 = fi.type;
        if ((t1 & 4194304) !== 0) {
          H.interceptedTypeCheck(fi, "$isMapFieldInfo");
          fi.get$valueFieldType().$and(0, 2098176);
          map = fi._ensureMapField$1(this);
          for (t1 = J.get$iterator$ax(J.get$entries$x(fieldValue)); t1.moveNext$0();) {
            t2 = H.interceptedTypeCheck(t1.get$current(t1), "$isMapEntry");
            map.$indexSet(0, t2.key, H.interceptedTypeCheck(t2.value, "$isGeneratedMessage").clone$0(0));
          }
          return;
        }
        if ((t1 & 2) !== 0) {
          t1 = H.getTypeArgumentByIndex(fi, 0);
          if (mustClone) {
            H.assertSubtype(fieldValue, "$isPbListBase", [M.GeneratedMessage], "$asPbListBase");
            repeatedFields = this._ensureRepeatedField$1$1(fi, t1);
            for (t1 = fieldValue._wrappedList, t2 = J.getInterceptor$ax(repeatedFields), i = 0; i < t1.length; ++i)
              t2.add$1(repeatedFields, t1[i].clone$0(0));
          } else {
            H.interceptedTypeCheck(fieldValue, "$isPbListBase");
            J.addAll$1$ax(this._ensureRepeatedField$1$1(fi, t1), fieldValue);
          }
          return;
        }
        if (mustClone) {
          if (isExtension) {
            t1 = this._ensureExtensions$0();
            H.interceptedTypeCheck(fi, "$isExtension");
            currentFi = t1._values.$index(0, fi.get$tagNumber());
          } else {
            t1 = this._values;
            t2 = fi.index;
            if (t2 >= t1.length)
              return H.ioore(t1, t2);
            currentFi = t1[t2];
          }
          fieldValue0 = currentFi == null ? H.interceptedTypeCheck(fieldValue, "$isGeneratedMessage").clone$0(0) : currentFi;
          fieldValue0.mergeFromMessage$1(fieldValue);
          fieldValue = fieldValue0;
        }
        if (isExtension) {
          t1 = this._ensureExtensions$0();
          H.interceptedTypeCheck(fi, "$isExtension");
          t1._isReadOnly;
          if (fi.get$isRepeated())
            H.throwExpression(P.ArgumentError$(t1._parent._setFieldFailedMessage$3(fi, fieldValue, "repeating field (use get + .add())")));
          t1._validateInfo$1(fi);
          t1._parent._validateField$2(fi, fieldValue);
          t1._info.$indexSet(0, fi.get$tagNumber(), fi);
          t1._setFieldUnchecked$2(fi, fieldValue);
        } else {
          this._validateField$2(fi, fieldValue);
          this._setNonExtensionFieldUnchecked$2(fi, fieldValue);
        }
      },
      _validateField$2: function(fi, newValue) {
        var message = M._getFieldError(fi.type, newValue);
        if (message != null)
          throw H.wrapException(P.ArgumentError$(this._setFieldFailedMessage$3(fi, newValue, message)));
      },
      _setFieldFailedMessage$3: function(fi, value, detail) {
        return "Illegal to set field " + fi.name + " (" + fi.tagNumber + ") of " + this._meta.qualifiedMessageName + " to value (" + H.S(value) + "): " + detail;
      },
      static: {
        _FieldSet$: function(_message, meta, _eventPlugin) {
          var t1 = P.int;
          return new M._FieldSet(_message, meta, _eventPlugin, false, M._FieldSet__makeValueList(meta.byIndex.length), P.LinkedHashMap_LinkedHashMap$_empty(t1, t1));
        },
        _FieldSet__makeValueList: function($length) {
          var t1;
          if ($length === 0)
            return $.$get$_FieldSet__zeroList();
          t1 = new Array($length);
          t1.fixed$length = Array;
          return t1;
        }
      }
    },
    _FieldSet__hashCode_hashEnumList: {
      "^": "Closure:54;_box_0",
      call$1: function(enums) {
        var t1, t2, t3, t4;
        for (t1 = enums._wrappedList, t1 = new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]), t2 = this._box_0; t1.moveNext$0();) {
          t3 = H.interceptedTypeCheck(t1._current, "$isProtobufEnum");
          t4 = t2.hash;
          if (typeof t4 !== "number")
            return H.iae(t4);
          t2.hash = 536870911 & C.JSInt_methods.$add(31 * t4, C.JSNull_methods.get$value(t3));
        }
      }
    },
    _FieldSet__hashCode_hashField: {
      "^": "Closure:55;_box_0,hashEnumList",
      call$2: function(fi, value) {
        var t1, t2, t3;
        t1 = J.getInterceptor$(value);
        if (!!t1.$isList && t1.get$isEmpty(value))
          return;
        t2 = this._box_0;
        t3 = t2.hash;
        if (typeof t3 !== "number")
          return H.iae(t3);
        t2.hash = 536870911 & 37 * t3 + fi.tagNumber;
        t3 = fi.type;
        if (M.PbFieldType__baseType(t3) !== 512) {
          t3 = t2.hash;
          if (typeof t3 !== "number")
            return H.iae(t3);
          t1 = t1.get$hashCode(value);
          if (typeof t1 !== "number")
            return H.iae(t1);
          t2.hash = 536870911 & 53 * t3 + t1;
        } else if ((t3 & 2) !== 0)
          this.hashEnumList.call$1(H.interceptedTypeCheck(value, "$isPbListBase"));
        else {
          H.interceptedTypeCheck(value, "$isProtobufEnum");
          t1 = t2.hash;
          if (typeof t1 !== "number")
            return H.iae(t1);
          t2.hash = 536870911 & C.JSInt_methods.$add(53 * t1, C.JSNull_methods.get$value(value));
        }
      }
    },
    _FieldSet__hashCode_hashEachField: {
      "^": "Closure:0;$this,hashField",
      call$0: function() {
        var t1, t2, t3, t4, t5, _i, fi, t6, v, tagNumber;
        for (t1 = this.$this, t2 = t1._meta.get$sortedByTag(), t3 = t2.length, t4 = t1._values, t5 = this.hashField, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
          fi = t2[_i];
          t6 = J.get$index$z(fi);
          if (t6 >= t4.length)
            return H.ioore(t4, t6);
          v = t4[t6];
          if (v != null)
            t5.call$2(fi, v);
        }
        t2 = t1._extensions;
        if (t2 == null)
          return;
        for (t2 = t2._values, t2 = M.sorted(t2.get$keys(t2), P.int), t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
          tagNumber = t2[_i];
          t4 = t1._extensions;
          t4.toString;
          H.intTypeCheck(tagNumber);
          fi = t4._info.$index(0, tagNumber);
          t5.call$2(fi, t1._extensions._values.$index(0, fi.get$tagNumber()));
        }
      }
    },
    _FieldSet_writeString_renderValue: {
      "^": "Closure:56;out,indent",
      call$2: function(key, value) {
        var t1, t2, t3;
        t1 = J.getInterceptor$(value);
        if (!!t1.$isGeneratedMessage) {
          t1 = this.out;
          t2 = this.indent;
          t1._contents += t2 + key + ": {\n";
          value._fieldSet.writeString$2(t1, t2 + "  ");
          t1._contents += t2 + "}\n";
        } else {
          t2 = this.out;
          t3 = this.indent;
          if (!!t1.$isMapEntry)
            t2._contents += t3 + key + ": {" + H.S(value.key) + " : " + H.S(value.value) + "} \n";
          else
            t2._contents += t3 + key + ": " + H.S(value) + "\n";
        }
      }
    },
    _FieldSet_writeString_writeFieldValue: {
      "^": "Closure:57;renderValue",
      call$2: function(fieldValue, $name) {
        var t1, t2;
        if (fieldValue == null)
          return;
        t1 = J.getInterceptor$(fieldValue);
        if (!!t1.$isByteData)
          C.NativeByteData_methods.getUint64$2(fieldValue, 0, C.Endian_true);
        else if (!!t1.$isList)
          for (t1 = t1.get$iterator(fieldValue), t2 = this.renderValue; t1.moveNext$0();)
            t2.call$2($name, t1.get$current(t1));
        else if (!!t1.$isMap)
          for (t1 = t1.get$entries(fieldValue), t1 = t1.get$iterator(t1), t2 = this.renderValue; t1.moveNext$0();)
            t2.call$2($name, t1.get$current(t1));
        else
          this.renderValue.call$2($name, fieldValue);
      }
    },
    _FieldSet_writeString_closure: {
      "^": "Closure:58;$this,writeFieldValue",
      call$1: function(fi) {
        var t1, t2;
        H.interceptedTypeCheck(fi, "$isFieldInfo");
        t1 = this.$this._values;
        t2 = fi.index;
        if (t2 >= t1.length)
          return H.ioore(t1, t2);
        return this.writeFieldValue.call$2(t1[t2], fi.name);
      }
    },
    _FieldSet_writeString_closure0: {
      "^": "Closure:59;$this,writeFieldValue",
      call$1: function(tagNumber) {
        var t1;
        H.intTypeCheck(tagNumber);
        t1 = this.$this;
        return this.writeFieldValue.call$2(t1._extensions._values.$index(0, tagNumber), "[" + H.S(C.JSNull_methods.get$name(t1._extensions._info.$index(0, tagNumber))) + "]");
      }
    },
    GeneratedMessage: {
      "^": "Object;",
      GeneratedMessage$0: function() {
        this._fieldSet = M._FieldSet$(this, this.get$info_(), null);
      },
      GeneratedMessage$fromBuffer$2: function(input, extensionRegistry) {
        var t1, t2, codedInput;
        this._fieldSet = M._FieldSet$(this, this.get$info_(), null);
        H.assertSubtype(input, "$isList", [P.int], "$asList");
        t1 = J.getInterceptor$(input);
        if (!!t1.$isUint8List)
          t2 = input;
        else {
          t2 = t1.get$length(input);
          t2 = new Uint8Array(t2);
        }
        C.NativeUint8List_methods.setRange$3(t2, 0, t1.get$length(input), input);
        t1 = Math.min(67108864, t1.get$length(input));
        codedInput = new M.CodedBufferReader(t2, 0, -1, 0, 0, 64, t1);
        codedInput._currentLimit = t1;
        M._mergeFromCodedBufferReader(this._fieldSet, codedInput, extensionRegistry);
        if (codedInput._lastTag !== 0)
          H.throwExpression(M.InvalidProtocolBufferException$invalidEndTag());
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (this === other)
          return true;
        return other instanceof M.GeneratedMessage && this._fieldSet._equals$1(other._fieldSet);
      },
      get$hashCode: function(_) {
        return this._fieldSet.get$_hashCode();
      },
      toString$0: function(_) {
        var out, t1;
        out = new P.StringBuffer("");
        this._fieldSet.writeString$2(out, "");
        t1 = out._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      writeToBuffer$0: function() {
        var out, t1, result;
        out = new M.CodedBufferWriter([], 0, 0, [], 0, 0);
        out._commitChunk$1(true);
        M._writeToCodedBufferWriter(this._fieldSet, out);
        t1 = out._bytesTotal;
        result = new Uint8Array(t1);
        out.writeTo$1(result);
        return result;
      },
      writeToCodedBufferWriter$1: function(output) {
        return M._writeToCodedBufferWriter(this._fieldSet, output);
      },
      createRepeatedField$1$2: function(tagNumber, fi, $T) {
        H.assertSubtype(fi, "$isFieldInfo", [$T], "$asFieldInfo");
        return new M.PbList(H.setRuntimeTypeInfo([], [$T]), fi.check, [$T]);
      },
      mergeFromMessage$1: function(other) {
        H.interceptedTypeCheck(other, "$isGeneratedMessage");
        return this._fieldSet._mergeFromMessage$1(other._fieldSet);
      },
      $$_setSignedInt32$2: function(index, value) {
        var t1, t2;
        t1 = !(-2147483648 <= value && value <= 2147483647);
        if (t1) {
          t1 = this._fieldSet;
          t2 = t1._meta.byIndex;
          if (index >= t2.length)
            return H.ioore(t2, index);
          t1._validateField$2(t2[index], value);
        }
        this._fieldSet._$set$2(index, value);
      }
    },
    PackageName: {
      "^": "Object;name"
    },
    PbList: {
      "^": "PbListBase;_wrappedList,check,$ti",
      add$1: function(_, value) {
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0));
        this._validate$1(value);
        C.JSArray_methods.add$1(this._wrappedList, value);
      },
      addAll$1: function(_, collection) {
        var t1;
        H.assertSubtype(collection, "$isIterable", this.$ti, "$asIterable");
        collection.toString;
        t1 = H.functionTypeCheck(this.get$_validate(), {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(collection, 0)]});
        C.JSArray_methods.forEach$1(collection._wrappedList, t1);
        C.JSArray_methods.addAll$1(this._wrappedList, collection);
      }
    },
    PbListBase: {
      "^": "ListBase;$ti",
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof M.PbListBase && M._areListsEqual(other, this);
      },
      get$hashCode: function(_) {
        var t1, t2, hash, _i, t3;
        for (t1 = this._wrappedList, t2 = t1.length, hash = 0, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          t3 = J.get$hashCode$(t1[_i]);
          if (typeof t3 !== "number")
            return H.iae(t3);
          hash = 536870911 & hash + t3;
          hash = 536870911 & hash + ((524287 & hash) << 10);
          hash ^= hash >>> 6;
        }
        hash = 536870911 & hash + ((67108863 & hash) << 3);
        hash ^= hash >>> 11;
        return 536870911 & hash + ((16383 & hash) << 15);
      },
      get$iterator: function(_) {
        var t1 = this._wrappedList;
        return new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$isEmpty: function(_) {
        return this._wrappedList.length === 0;
      },
      skip$1: function(_, count) {
        var t1 = this._wrappedList;
        return H.SubListIterable$(t1, count, null, H.getTypeArgumentByIndex(t1, 0));
      },
      elementAt$1: function(_, index) {
        var t1 = this._wrappedList;
        if (index < 0 || index >= t1.length)
          return H.ioore(t1, index);
        return t1[index];
      },
      toString$0: function(_) {
        return P.IterableBase_iterableToFullString(this._wrappedList, "[", "]");
      },
      $index: function(_, index) {
        var t1 = this._wrappedList;
        if (index < 0 || index >= t1.length)
          return H.ioore(t1, index);
        return t1[index];
      },
      get$length: function(_) {
        return this._wrappedList.length;
      },
      $indexSet: function(_, index, value) {
        H.intTypeCheck(index);
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0));
        this._validate$1(value);
        C.JSArray_methods.$indexSet(this._wrappedList, index, value);
      },
      set$length: function(_, newLength) {
        var t1 = this._wrappedList;
        if (newLength > t1.length)
          throw H.wrapException(P.UnsupportedError$("Extending protobuf lists is not supported"));
        C.JSArray_methods.set$length(t1, newLength);
      },
      _validate$1: [function(val) {
        var t1 = H.getTypeArgumentByIndex(this, 0);
        H.assertSubtypeOfRuntimeType(val, t1);
        this.check.call$1(val);
        if (!H.checkSubtypeOfRuntimeType(val, t1))
          throw H.wrapException(P.ArgumentError$("Value (" + H.S(val) + ") is not of the correct type"));
      }, "call$1", "get$_validate", 4, 0, 3]
    },
    ProtobufEnum: {
      "^": "Object;"
    },
    UnknownFieldSet: {
      "^": "Object;_fields,_isReadOnly",
      get$isEmpty: function(_) {
        var t1 = this._fields;
        return t1.get$isEmpty(t1);
      },
      mergeFieldFromBuffer$2: function(tag, input) {
        var number, t1, unknownFieldSet;
        if (this._isReadOnly)
          $.frozenMessageModificationHandler.call$2("UnknownFieldSet", "mergeFieldFromBuffer");
        number = (tag & 2147483647) >>> 3;
        switch (tag & 7) {
          case 0:
            t1 = input._readRawVarint64$0();
            if (this._isReadOnly)
              $.frozenMessageModificationHandler.call$2("UnknownFieldSet", "mergeVarintField");
            C.JSArray_methods.add$1(this._getField$1(number)._varints, t1);
            return true;
          case 1:
            t1 = input.readSfixed64$0();
            if (this._isReadOnly)
              $.frozenMessageModificationHandler.call$2("UnknownFieldSet", "mergeFixed64Field");
            C.JSArray_methods.add$1(this._getField$1(number)._fixed64s, t1);
            return true;
          case 2:
            t1 = H.assertSubtype(input.readBytes$0(), "$isList", [P.int], "$asList");
            if (this._isReadOnly)
              $.frozenMessageModificationHandler.call$2("UnknownFieldSet", "mergeLengthDelimitedField");
            C.JSArray_methods.add$1(this._getField$1(number)._lengthDelimited, t1);
            return true;
          case 3:
            t1 = input._recursionDepth;
            if (t1 >= input._recursionLimit)
              H.throwExpression(M.InvalidProtocolBufferException$recursionLimitExceeded());
            input._recursionDepth = t1 + 1;
            unknownFieldSet = new M.UnknownFieldSet(new H.JsLinkedHashMap(0, 0, [P.int, M.UnknownFieldSetField]), false);
            unknownFieldSet.mergeFromCodedBufferReader$1(input);
            if (input._lastTag !== (number << 3 | 4))
              H.throwExpression(M.InvalidProtocolBufferException$invalidEndTag());
            --input._recursionDepth;
            if (this._isReadOnly)
              $.frozenMessageModificationHandler.call$2("UnknownFieldSet", "mergeGroupField");
            C.JSArray_methods.add$1(this._getField$1(number)._groups, unknownFieldSet);
            return true;
          case 4:
            return false;
          case 5:
            t1 = C.NativeByteData_methods._getUint32$2(input._readByteData$1(4), 0, true);
            if (this._isReadOnly)
              $.frozenMessageModificationHandler.call$2("UnknownFieldSet", "mergeFixed32Field");
            C.JSArray_methods.add$1(this._getField$1(number)._fixed32s, t1);
            return true;
          default:
            throw H.wrapException(new M.InvalidProtocolBufferException("Protocol message tag had invalid wire type."));
        }
      },
      mergeFromCodedBufferReader$1: function(input) {
        var tag;
        if (this._isReadOnly)
          $.frozenMessageModificationHandler.call$2("UnknownFieldSet", "mergeFromCodedBufferReader");
        for (; true;) {
          tag = input.readTag$0();
          if (tag === 0 || !this.mergeFieldFromBuffer$2(tag, input))
            break;
        }
      },
      mergeFromUnknownFieldSet$1: function(other) {
        var t1, t2, t3, t4;
        if (this._isReadOnly)
          $.frozenMessageModificationHandler.call$2("UnknownFieldSet", "mergeFromUnknownFieldSet");
        for (t1 = other._fields, t2 = t1.get$keys(t1), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
          t3 = t2.get$current(t2);
          t4 = H.interceptedTypeCheck(t1.$index(0, t3), "$isUnknownFieldSetField");
          if (this._isReadOnly)
            $.frozenMessageModificationHandler.call$2("UnknownFieldSet", "mergeField");
          t3 = this._getField$1(t3);
          C.JSArray_methods.addAll$1(t3._varints, t4._varints);
          C.JSArray_methods.addAll$1(t3._fixed32s, t4._fixed32s);
          C.JSArray_methods.addAll$1(t3._fixed64s, t4._fixed64s);
          C.JSArray_methods.addAll$1(t3._lengthDelimited, t4._lengthDelimited);
          C.JSArray_methods.addAll$1(t3._groups, t4._groups);
        }
      },
      _getField$1: function(number) {
        if (number === 0)
          H.throwExpression(P.ArgumentError$("Zero is not a valid field number."));
        return this._fields.putIfAbsent$2(0, number, new M.UnknownFieldSet__getField_closure());
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (!(other instanceof M.UnknownFieldSet))
          return false;
        return M._areMapsEqual(other._fields, this._fields);
      },
      get$hashCode: function(_) {
        var t1 = {};
        t1.hash = 0;
        this._fields.forEach$1(0, new M.UnknownFieldSet_hashCode_closure(t1));
        return t1.hash;
      },
      toString$0: function(_) {
        return this._toString$1("");
      },
      _toString$1: function(indent) {
        var stringBuffer, t1, t2, t3, _i, tag, field, t4, t5, _i0, value, t6;
        stringBuffer = new P.StringBuffer("");
        for (t1 = this._fields, t2 = M.sorted(t1.get$keys(t1), P.int), t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
          tag = t2[_i];
          field = t1.$index(0, tag);
          for (t4 = field.get$values(field), t5 = t4.length, _i0 = 0; _i0 < t4.length; t4.length === t5 || (0, H.throwConcurrentModificationError)(t4), ++_i0) {
            value = t4[_i0];
            t6 = J.getInterceptor$(value);
            if (!!t6.$isUnknownFieldSet) {
              t6 = stringBuffer._contents += indent + H.S(tag) + ": {\n";
              t6 += value._toString$1(indent + "  ");
              stringBuffer._contents = t6;
              stringBuffer._contents = t6 + (indent + "}\n");
            } else {
              if (!!t6.$isByteData)
                value = C.NativeByteData_methods.getUint64$2(value, 0, C.Endian_true);
              stringBuffer._contents += indent + H.S(tag) + ": " + H.S(value) + "\n";
            }
          }
        }
        t1 = stringBuffer._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      writeToCodedBufferWriter$1: function(output) {
        var t1, t2, t3;
        for (t1 = this._fields, t2 = t1.get$keys(t1), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
          t3 = t2.get$current(t2);
          t1.$index(0, t3).writeTo$2(t3, output);
        }
      }
    },
    UnknownFieldSet__getField_closure: {
      "^": "Closure:60;",
      call$0: function() {
        var t1 = [V.Int64];
        return new M.UnknownFieldSetField(H.setRuntimeTypeInfo([], [[P.List, P.int]]), H.setRuntimeTypeInfo([], t1), H.setRuntimeTypeInfo([], [P.int]), H.setRuntimeTypeInfo([], t1), H.setRuntimeTypeInfo([], [M.UnknownFieldSet]), false);
      }
    },
    UnknownFieldSet_hashCode_closure: {
      "^": "Closure:61;_box_0",
      call$2: function(number, value) {
        var t1, t2, hash;
        H.intTypeCheck(number);
        t1 = this._box_0;
        t2 = t1.hash;
        if (typeof number !== "number")
          return H.iae(number);
        hash = 536870911 & 37 * t2 + number;
        t1.hash = hash;
        t2 = J.get$hashCode$(value);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t1.hash = 536870911 & 53 * hash + t2;
      }
    },
    UnknownFieldSetField: {
      "^": "Object;_lengthDelimited,_varints,_fixed32s,_fixed64s,_groups,_isReadOnly",
      $eq: function(_, other) {
        var i, t1, t2;
        if (other == null)
          return false;
        if (!(other instanceof M.UnknownFieldSetField))
          return false;
        if (this._lengthDelimited.length !== other._lengthDelimited.length)
          return false;
        for (i = 0; t1 = this._lengthDelimited, i < t1.length; ++i) {
          t2 = other._lengthDelimited;
          if (i >= t2.length)
            return H.ioore(t2, i);
          if (!M._areListsEqual(t2[i], t1[i]))
            return false;
        }
        if (!M._areListsEqual(other._varints, this._varints))
          return false;
        if (!M._areListsEqual(other._fixed32s, this._fixed32s))
          return false;
        if (!M._areListsEqual(other._fixed64s, this._fixed64s))
          return false;
        if (!M._areListsEqual(other._groups, this._groups))
          return false;
        return true;
      },
      get$hashCode: function(_) {
        var t1, t2, hash, _i, value, t3, i, t4;
        for (t1 = this._lengthDelimited, t2 = t1.length, hash = 0, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          value = t1[_i];
          t3 = J.getInterceptor$asx(value);
          i = 0;
          while (true) {
            t4 = t3.get$length(value);
            if (typeof t4 !== "number")
              return H.iae(t4);
            if (!(i < t4))
              break;
            t4 = t3.$index(value, i);
            if (typeof t4 !== "number")
              return H.iae(t4);
            hash = 536870911 & hash + t4;
            hash = 536870911 & hash + ((524287 & hash) << 10);
            hash ^= hash >>> 6;
            ++i;
          }
          hash = 536870911 & hash + ((67108863 & hash) << 3);
          hash ^= hash >>> 11;
          hash = 536870911 & hash + ((16383 & hash) << 15);
        }
        for (t1 = this._varints, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          hash = 536870911 & hash + 7 * J.get$hashCode$(t1[_i]);
        for (t1 = this._fixed32s, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          hash = 536870911 & hash + 37 * J.get$hashCode$(t1[_i]);
        for (t1 = this._fixed64s, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          hash = 536870911 & hash + 53 * J.get$hashCode$(t1[_i]);
        for (t1 = this._groups, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          t3 = J.get$hashCode$(t1[_i]);
          if (typeof t3 !== "number")
            return H.iae(t3);
          hash = 536870911 & hash + t3;
        }
        return hash;
      },
      get$values: function(_) {
        var t1 = [];
        C.JSArray_methods.addAll$1(t1, this._lengthDelimited);
        C.JSArray_methods.addAll$1(t1, this._varints);
        C.JSArray_methods.addAll$1(t1, this._fixed32s);
        C.JSArray_methods.addAll$1(t1, this._fixed64s);
        C.JSArray_methods.addAll$1(t1, this._groups);
        return t1;
      },
      writeTo$2: function(fieldNumber, output) {
        var t1 = new M.UnknownFieldSetField_writeTo_write(output, fieldNumber);
        t1.call$2(65538, this._varints);
        t1.call$2(131074, this._fixed32s);
        t1.call$2(262146, this._fixed64s);
        t1.call$2(34, this._lengthDelimited);
        t1.call$2(1026, this._groups);
      },
      get$length: function(_) {
        return this.get$values(this).length;
      }
    },
    UnknownFieldSetField_writeTo_write: {
      "^": "Closure:5;output,fieldNumber",
      call$2: function(type, value) {
        this.output.writeField$3(this.fieldNumber, type, value);
      }
    },
    _areMapsEqual_closure: {
      "^": "Closure:14;lhs,rhs",
      call$1: function(key) {
        return M._deepEquals(J.$index$asx(this.lhs, key), J.$index$asx(this.rhs, key));
      }
    },
    _areByteDataEqual_asBytes: {
      "^": "Closure:63;",
      call$1: function(d) {
        var t1, t2, t3;
        t1 = d.buffer;
        t2 = d.byteOffset;
        t3 = d.byteLength;
        t1.toString;
        return H.NativeUint8List_NativeUint8List$view(t1, t2, t3);
      }
    }
  }], ["", "main.dart",, F, {
    "^": "",
    main: function() {
      var t1, button, t2;
      t1 = P.String;
      t1 = H.ConstantMap_ConstantMap$from(P.LinkedHashMap__makeEmpty(), t1, t1);
      t1 = new B.CallOptions(t1, null, P.List_List$unmodifiable([], {func: 1, ret: {futureOr: 1, type: -1}, args: [[P.Map, P.String, P.String], P.String]}));
      button = H.interceptedTypeCast(C.HtmlDocument_methods.querySelector$1(document, "#send"), "$isButtonElement");
      button.toString;
      t2 = W.MouseEvent;
      W._EventStreamSubscription$(button, "click", H.functionTypeCheck(new F.main_closure(new S.EchoApp(new S.EchoServiceClient(new E.GrpcWebClientChannel("http://localhost", 8080, C.ChannelOptions_MQk, E.web_channel__connectXhrTransport$closure(), false), t1))), {func: 1, ret: -1, args: [t2]}), false, t2);
    },
    main_closure: {
      "^": "Closure:64;app",
      call$1: function(e) {
        return this.$call$body$main_closure(H.interceptedTypeCheck(e, "$isMouseEvent"));
      },
      $call$body$main_closure: function(e) {
        var $async$goto = 0,
          $async$completer = P._makeAsyncAwaitCompleter(P.bool),
          $async$returnValue, $async$self = this, msg, value, t1, count, t2;
        var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
          if ($async$errorCode === 1)
            return P._asyncRethrow($async$result, $async$completer);
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                msg = H.interceptedTypeCast(C.HtmlDocument_methods.querySelector$1(document, "#msg"), "$isTextInputElement");
                value = J.trim$0$s(msg.value);
                msg.value = "";
                if (value.length === 0) {
                  $async$returnValue = false;
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t1 = C.JSString_methods.indexOf$1(value, " ");
                if (t1 > 0) {
                  count = H.Primitives_parseInt(C.JSString_methods.substring$2(value, 0, t1), null);
                  t2 = $async$self.app;
                  if (count != null)
                    t2.repeatEcho$2(C.JSString_methods.substring$1(value, t1 + 1), count);
                  else
                    t2.echo$1(value);
                } else
                  $async$self.app.echo$1(value);
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
        });
        return P._asyncStartSync($async$call$1, $async$completer);
      }
    }
  }, 1]];
  setupProgram(dart, 0, 0);
  // getInterceptor methods
  J.getInterceptor$ = function(receiver) {
    if (typeof receiver == "number") {
      if (Math.floor(receiver) == receiver)
        return J.JSInt.prototype;
      return J.JSDouble.prototype;
    }
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return J.JSNull.prototype;
    if (typeof receiver == "boolean")
      return J.JSBool.prototype;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$asx = function(receiver) {
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$ax = function(receiver) {
    if (receiver == null)
      return receiver;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$bn = function(receiver) {
    if (typeof receiver == "number")
      return J.JSNumber.prototype;
    if (receiver == null)
      return receiver;
    if (typeof receiver == "boolean")
      return J.JSBool.prototype;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$n = function(receiver) {
    if (typeof receiver == "number")
      return J.JSNumber.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$ns = function(receiver) {
    if (typeof receiver == "number")
      return J.JSNumber.prototype;
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$s = function(receiver) {
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$x = function(receiver) {
    if (receiver == null)
      return receiver;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$z = function(receiver) {
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.get$entries$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$entries(receiver);
  };
  J.get$error$z = function(receiver) {
    return J.getInterceptor$z(receiver).get$error(receiver);
  };
  J.get$hashCode$ = function(receiver) {
    return J.getInterceptor$(receiver).get$hashCode(receiver);
  };
  J.get$index$z = function(receiver) {
    return J.getInterceptor$z(receiver).get$index(receiver);
  };
  J.get$isEmpty$asx = function(receiver) {
    return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
  };
  J.get$iterator$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).get$iterator(receiver);
  };
  J.get$length$asx = function(receiver) {
    return J.getInterceptor$asx(receiver).get$length(receiver);
  };
  J.get$value$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$value(receiver);
  };
  J.$and$bn = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return (receiver & a0) >>> 0;
    return J.getInterceptor$bn(receiver).$and(receiver, a0);
  };
  J.$eq$ = function(receiver, a0) {
    if (receiver == null)
      return a0 == null;
    if (typeof receiver != "object")
      return a0 != null && receiver === a0;
    return J.getInterceptor$(receiver).$eq(receiver, a0);
  };
  J.$gt$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver > a0;
    return J.getInterceptor$n(receiver).$gt(receiver, a0);
  };
  J.$index$asx = function(receiver, a0) {
    if (typeof a0 === "number")
      if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
        if (a0 >>> 0 === a0 && a0 < receiver.length)
          return receiver[a0];
    return J.getInterceptor$asx(receiver).$index(receiver, a0);
  };
  J.$indexSet$ax = function(receiver, a0, a1) {
    return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
  };
  J.$lt$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver < a0;
    return J.getInterceptor$n(receiver).$lt(receiver, a0);
  };
  J._add$1$z = function(receiver, a0) {
    return J.getInterceptor$z(receiver)._add$1(receiver, a0);
  };
  J._codeUnitAt$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver)._codeUnitAt$1(receiver, a0);
  };
  J._removeEventListener$3$x = function(receiver, a0, a1, a2) {
    return J.getInterceptor$x(receiver)._removeEventListener$3(receiver, a0, a1, a2);
  };
  J.add$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).add$1(receiver, a0);
  };
  J.addAll$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).addAll$1(receiver, a0);
  };
  J.addEventListener$3$x = function(receiver, a0, a1, a2) {
    return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
  };
  J.after$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).after$1(receiver, a0);
  };
  J.append$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).append$1(receiver, a0);
  };
  J.codeUnitAt$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).codeUnitAt$1(receiver, a0);
  };
  J.compareTo$1$ns = function(receiver, a0) {
    return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
  };
  J.contains$2$asx = function(receiver, a0, a1) {
    return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
  };
  J.elementAt$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
  };
  J.every$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).every$1(receiver, a0);
  };
  J.forEach$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
  };
  J.indexOf$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).indexOf$1(receiver, a0);
  };
  J.map$1$1$ax = function(receiver, a0, $T1) {
    return J.getInterceptor$ax(receiver).map$1$1(receiver, a0, $T1);
  };
  J.skip$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
  };
  J.substring$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).substring$1(receiver, a0);
  };
  J.substring$2$s = function(receiver, a0, a1) {
    return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
  };
  J.toString$0$ = function(receiver) {
    return J.getInterceptor$(receiver).toString$0(receiver);
  };
  J.trim$0$s = function(receiver) {
    return J.getInterceptor$s(receiver).trim$0(receiver);
  };
  Isolate.makeConstantList = function(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  };
  var $ = Isolate.$isolateProperties;
  C.DivElement_methods = W.DivElement.prototype;
  C.HtmlDocument_methods = W.HtmlDocument.prototype;
  C.HttpRequest_methods = W.HttpRequest.prototype;
  C.Interceptor_methods = J.Interceptor.prototype;
  C.JSArray_methods = J.JSArray.prototype;
  C.JSInt_methods = J.JSInt.prototype;
  C.JSNull_methods = J.JSNull.prototype;
  C.JSNumber_methods = J.JSNumber.prototype;
  C.JSString_methods = J.JSString.prototype;
  C.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
  C.NativeByteData_methods = H.NativeByteData.prototype;
  C.NativeUint8List_methods = H.NativeUint8List.prototype;
  C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
  C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
  C.C_EmptyIterator = new H.EmptyIterator([P.Null]);
  C.C_OutOfMemoryError = new P.OutOfMemoryError();
  C.C_Utf8Encoder = new P.Utf8Encoder();
  C.C__DelayedDone = new P._DelayedDone();
  C.C__EmptyExtensionRegistry = new M._EmptyExtensionRegistry();
  C.C__JSRandom = new P._JSRandom();
  C.C__RootZone = new P._RootZone();
  C.Duration_300000000 = new P.Duration(300000000);
  C.ChannelCredentials_false_null = new B.ChannelCredentials(false, null);
  C.ChannelOptions_MQk = new B.ChannelOptions(C.ChannelCredentials_false_null, C.Duration_300000000, B.options__defaultBackoffStrategy$closure());
  C.ConnectionState_0 = new V.ConnectionState(0, "ConnectionState.connecting");
  C.ConnectionState_1 = new V.ConnectionState(1, "ConnectionState.ready");
  C.ConnectionState_2 = new V.ConnectionState(2, "ConnectionState.transientFailure");
  C.ConnectionState_3 = new V.ConnectionState(3, "ConnectionState.idle");
  C.ConnectionState_4 = new V.ConnectionState(4, "ConnectionState.shutdown");
  C.Duration_0 = new P.Duration(0);
  C.Duration_1000000 = new P.Duration(1000000);
  C.Duration_120000000 = new P.Duration(120000000);
  C.Endian_false = new P.Endian(false);
  C.Endian_true = new P.Endian(true);
  C.Int64_0_0_0 = new V.Int64(0, 0, 0);
  C.Int64_4194303_4194303_1048575 = new V.Int64(4194303, 4194303, 1048575);
  C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
  C.JS_CONST_4hp = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
  C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
  C.JS_CONST_QJm = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
  C.JS_CONST_bDt = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
  C.JS_CONST_gkc = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
  C.JS_CONST_rr7 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
  C.JS_CONST_u2C = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
  C.List_127_2047_65535_1114111 = H.setRuntimeTypeInfo(Isolate.makeConstantList([127, 2047, 65535, 1114111]), [P.int]);
  C.List_6TW = H.setRuntimeTypeInfo(Isolate.makeConstantList(["content-type", "te", "grpc-timeout", "grpc-accept-encoding", "user-agent"]), [P.String]);
  C.List_WrN = H.setRuntimeTypeInfo(Isolate.makeConstantList([0, 0, 1048576, 531441, 1048576, 390625, 279936, 823543, 262144, 531441, 1000000, 161051, 248832, 371293, 537824, 759375, 1048576, 83521, 104976, 130321, 160000, 194481, 234256, 279841, 331776, 390625, 456976, 531441, 614656, 707281, 810000, 923521, 1048576, 35937, 39304, 42875, 46656]), [P.int]);
  C.List_empty = H.setRuntimeTypeInfo(Isolate.makeConstantList([]), [P.Null]);
  C.PackageName_Mno = new M.PackageName("");
  C.PackageName_WB0 = new M.PackageName("grpc.gateway.testing");
  C._GrpcWebParseState_0 = new Z._GrpcWebParseState(0, "_GrpcWebParseState.Init");
  C._GrpcWebParseState_1 = new Z._GrpcWebParseState(1, "_GrpcWebParseState.Length");
  C._GrpcWebParseState_2 = new Z._GrpcWebParseState(2, "_GrpcWebParseState.Message");
  C._IterationMarker_null_2 = new P._IterationMarker(null, 2);
  $.Closure_functionCounter = 0;
  $.BoundClosure_selfFieldNameCache = null;
  $.BoundClosure_receiverFieldNameCache = null;
  $._inTypeAssertion = false;
  $.getTagFunction = null;
  $.alternateTagFunction = null;
  $.prototypeForTagFunction = null;
  $.dispatchRecordsForInstanceTags = null;
  $.interceptorsForUncacheableTags = null;
  $.initNativeDispatchFlag = null;
  $._nextCallback = null;
  $._lastCallback = null;
  $._lastPriorityCallback = null;
  $._isInCallbackLoop = false;
  $.Zone__current = C.C__RootZone;
  $.Device__isOpera = null;
  $.Device__isIE = null;
  $.Device__isFirefox = null;
  $.Device__cachedCssPrefix = null;
  $.frozenMessageModificationHandler = M.protobuf__defaultFrozenMessageModificationHandler$closure();
  $ = null;
  init.isHunkLoaded = function(hunkHash) {
    return !!$dart_deferred_initializers$[hunkHash];
  };
  init.deferredInitialized = new Object(null);
  init.isHunkInitialized = function(hunkHash) {
    return init.deferredInitialized[hunkHash];
  };
  init.initializeLoadedHunk = function(hunkHash) {
    var hunk = $dart_deferred_initializers$[hunkHash];
    if (hunk == null)
      throw "DeferredLoading state error: code with hash '" + hunkHash + "' was not loaded";
    hunk($globals$, $);
    init.deferredInitialized[hunkHash] = true;
  };
  init.deferredLibraryParts = {};
  init.deferredPartUris = [];
  init.deferredPartHashes = [];
  // Empty type-to-interceptor map.
  (function(lazies) {
    for (var i = 0; i < lazies.length;) {
      var fieldName = lazies[i++];
      var getterName = lazies[i++];
      var lazyValue = lazies[i++];
      var staticName = lazies[i++];
      Isolate.$lazy(fieldName, getterName, lazyValue, staticName);
    }
  })(["DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", function() {
    return H.getIsolateAffinityTag("_$dart_dartClosure");
  }, "DART_CLOSURE_PROPERTY_NAME", "JS_INTEROP_INTERCEPTOR_TAG", "$get$JS_INTEROP_INTERCEPTOR_TAG", function() {
    return H.getIsolateAffinityTag("_$dart_js");
  }, "JS_INTEROP_INTERCEPTOR_TAG", "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({
      toString: function() {
        return "$receiver$";
      }
    }));
  }, "TypeErrorDecoder_noSuchMethodPattern", "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
      toString: function() {
        return "$receiver$";
      }
    }));
  }, "TypeErrorDecoder_notClosurePattern", "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
  }, "TypeErrorDecoder_nullCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = '$arguments$';
      try {
        null.$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_nullLiteralCallPattern", "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
  }, "TypeErrorDecoder_undefinedCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = '$arguments$';
      try {
        (void 0).$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_undefinedLiteralCallPattern", "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
  }, "TypeErrorDecoder_nullPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      try {
        null.$method$;
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_nullLiteralPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
  }, "TypeErrorDecoder_undefinedPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      try {
        (void 0).$method$;
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", function() {
    return P._AsyncRun__initializeScheduleImmediate();
  }, "_AsyncRun__scheduleImmediateClosure", "Future__nullFuture", "$get$Future__nullFuture", function() {
    return P._Future$zoneValue(null, C.C__RootZone, P.Null);
  }, "Future__nullFuture", "_toStringVisiting", "$get$_toStringVisiting", function() {
    return [];
  }, "_toStringVisiting", "_hasErrorStackProperty", "$get$_hasErrorStackProperty", function() {
    return new Error().stack != void 0;
  }, "_hasErrorStackProperty", "CssStyleDeclaration__propertyCache", "$get$CssStyleDeclaration__propertyCache", function() {
    return {};
  }, "CssStyleDeclaration__propertyCache", "_random", "$get$_random", function() {
    return C.C__JSRandom;
  }, "_random", "EchoRequest__i", "$get$EchoRequest__i", function() {
    var t1 = M.BuilderInfo$("EchoRequest", C.PackageName_WB0);
    t1.aOS$2(1, "message");
    t1.hasRequiredFields = false;
    return t1;
  }, "EchoRequest__i", "EchoResponse__i", "$get$EchoResponse__i", function() {
    var t1 = M.BuilderInfo$("EchoResponse", C.PackageName_WB0);
    t1.aOS$2(1, "message");
    t1.hasRequiredFields = false;
    return t1;
  }, "EchoResponse__i", "ServerStreamingEchoRequest__i", "$get$ServerStreamingEchoRequest__i", function() {
    var t1, t2;
    t1 = M.BuilderInfo$("ServerStreamingEchoRequest", C.PackageName_WB0);
    t1.aOS$2(1, "message");
    t2 = P.int;
    t1.a$1$3(0, 2, "messageCount", 2048, t2);
    t1.a$1$3(0, 3, "messageInterval", 2048, t2);
    t1.hasRequiredFields = false;
    return t1;
  }, "ServerStreamingEchoRequest__i", "ServerStreamingEchoResponse__i", "$get$ServerStreamingEchoResponse__i", function() {
    var t1 = M.BuilderInfo$("ServerStreamingEchoResponse", C.PackageName_WB0);
    t1.aOS$2(1, "message");
    t1.hasRequiredFields = false;
    return t1;
  }, "ServerStreamingEchoResponse__i", "EchoServiceClient__$echo", "$get$EchoServiceClient__$echo", function() {
    return D.ClientMethod$("/grpc.gateway.testing.EchoService/Echo", new S.EchoServiceClient_closure(), new S.EchoServiceClient_closure0(), B.EchoRequest, B.EchoResponse);
  }, "EchoServiceClient__$echo", "EchoServiceClient__$serverStreamingEcho", "$get$EchoServiceClient__$serverStreamingEcho", function() {
    return D.ClientMethod$("/grpc.gateway.testing.EchoService/ServerStreamingEcho", new S.EchoServiceClient_closure1(), new S.EchoServiceClient_closure2(), B.ServerStreamingEchoRequest, B.ServerStreamingEchoResponse);
  }, "EchoServiceClient__$serverStreamingEcho", "CodedBufferWriter__wireTypes", "$get$CodedBufferWriter__wireTypes", function() {
    var t1, t2;
    t1 = H.NativeUint8List_NativeUint8List(32);
    t2 = t1.length;
    if (14 >= t2)
      return H.ioore(t1, 14);
    t1[14] = 0;
    if (29 >= t2)
      return H.ioore(t1, 29);
    t1[29] = 2;
    t1[27] = 2;
    t1[23] = 1;
    t1[15] = 5;
    if (31 >= t2)
      return H.ioore(t1, 31);
    t1[31] = 0;
    t1[30] = 3;
    t1[28] = 0;
    t1[25] = 0;
    t1[18] = 0;
    t1[5] = 0;
    t1[11] = 0;
    t1[22] = 0;
    t1[13] = 5;
    t1[26] = 1;
    t1[21] = 5;
    t1[10] = 1;
    t1[20] = 2;
    return t1;
  }, "CodedBufferWriter__wireTypes", "_FieldSet__zeroList", "$get$_FieldSet__zeroList", function() {
    var t1 = new Array(0);
    t1.fixed$length = Array;
    return t1;
  }, "_FieldSet__zeroList"]);
  Isolate = Isolate.$finishIsolateConstructor(Isolate);
  $ = new Isolate();
  init.metadata = [];
  init.types = [{func: 1, ret: -1}, {func: 1, ret: P.Null}, {func: 1, ret: -1, args: [,]}, {func: 1, ret: -1, args: [P.Object]}, {func: 1, ret: P.int}, {func: 1, ret: P.Null, args: [,,]}, {func: 1, ret: -1, args: [P.Object], opt: [P.StackTrace]}, {func: 1, ret: V.Int64}, {func: 1, ret: -1, args: [P.String,,]}, {func: 1, ret: -1, args: [{func: 1, ret: -1}]}, {func: 1, ret: P.Null, args: [,]}, {func: 1, ret: [P.Future,,]}, {func: 1, args: [,]}, {func: 1, ret: P.double}, {func: 1, ret: P.bool, args: [,]}, {func: 1, ret: P.bool}, {func: 1, ret: P.Null, args: [, P.StackTrace]}, {func: 1, ret: -1, args: [[V.ClientCall,,,]]}, {func: 1, ret: P.String, args: [P.int]}, {func: 1, ret: P.Null, args: [S.Transport]}, {func: 1, ret: -1, args: [, P.StackTrace]}, {func: 1, ret: -1, args: [,], opt: [,]}, {func: 1, ret: [P._ConverterStreamEventSink,,,], args: [[P.EventSink,,]]}, {func: 1, ret: P.int, args: [[P.List, P.int], P.int]}, {func: 1, ret: -1, args: [P.int, P.int]}, {func: 1, ret: P.Null, args: [P.int,,]}, {func: 1, args: [P.String]}, {func: 1, ret: -1, args: [P.String, P.String]}, {func: 1, args: [W.Event]}, {func: 1, args: [,,]}, {func: 1, ret: -1, args: [D.GrpcMessage]}, {func: 1, ret: P.Null, args: [P.String, P.String]}, {func: 1, ret: P.Null, args: [V.ClientConnection]}, {func: 1, ret: P.Null, args: [{func: 1, ret: -1}]}, {func: 1, ret: -1, args: [P.bool]}, {func: 1, ret: P.Null, args: [,], opt: [,]}, {func: 1, ret: [P.Map,,,], args: [,]}, {func: 1, ret: P.Null, args: [P.bool]}, {func: 1, ret: -1, args: [[P.List, P.int]]}, {func: 1, ret: P.Null, args: [W.Event]}, {func: 1, ret: P.Null, args: [W.ProgressEvent]}, {func: 1, ret: P.Null, args: [D.GrpcMessage, [P.EventSink, D.GrpcMessage]]}, {func: 1, ret: P.Null, args: [B.ServerStreamingEchoResponse]}, {func: 1, ret: P.Uint8List, args: [B.EchoRequest]}, {func: 1, ret: B.EchoResponse, args: [[P.List, P.int]]}, {func: 1, ret: P.Uint8List, args: [B.ServerStreamingEchoRequest]}, {func: 1, ret: B.ServerStreamingEchoResponse, args: [[P.List, P.int]]}, {func: 1, ret: P.int, args: [[M.FieldInfo,,], [M.FieldInfo,,]]}, {func: 1, ret: -1, args: [[P.List,,]]}, {func: 1, ret: [P.List, P.int]}, {func: 1, ret: {futureOr: 1, type: P.bool}}, {func: 1, ret: [P._Future,,], args: [,]}, {func: 1, ret: -1, opt: [[P.Future,,]]}, {func: 1, ret: P.String}, {func: 1, ret: -1, args: [[M.PbListBase,,]]}, {func: 1, ret: -1, args: [[M.FieldInfo,,],,]}, {func: 1, ret: -1, args: [,,]}, {func: 1, ret: -1, args: [, P.String]}, {func: 1, ret: -1, args: [[M.FieldInfo,,]]}, {func: 1, ret: -1, args: [P.int]}, {func: 1, ret: M.UnknownFieldSetField}, {func: 1, ret: P.Null, args: [P.int, P.Object]}, {func: 1, ret: P.Null, args: [[P.List,,]]}, {func: 1, ret: P.Uint8List, args: [,]}, {func: 1, ret: [P.Future, P.bool], args: [W.MouseEvent]}, {func: 1, ret: P.int, args: [,,]}, {func: 1, ret: -1, opt: [P.Object]}, {func: 1, bounds: [P.Object], ret: 0, args: [0, 0]}, {func: 1, bounds: [P.Object], ret: 0, args: [0]}, {func: 1, ret: P.Duration, args: [P.Duration]}, {func: 1, ret: [P.Future, S.Transport], args: [P.String, P.int, B.ChannelOptions]}, {func: 1, ret: [P.List, P.int], args: [[P.List, P.int]]}, {func: 1, ret: -1, args: [P.String], opt: [P.String]}, {func: 1, args: [, P.String]}, {func: 1, ret: P.bool, args: [[V.ClientCall,,,]]}];
  function convertToFastObject(properties) {
    function MyClass() {
    }
    MyClass.prototype = properties;
    new MyClass();
    return properties;
  }
  function convertToSlowObject(properties) {
    properties.__MAGIC_SLOW_PROPERTY = 1;
    delete properties.__MAGIC_SLOW_PROPERTY;
    return properties;
  }
  A = convertToFastObject(A);
  B = convertToFastObject(B);
  C = convertToFastObject(C);
  D = convertToFastObject(D);
  E = convertToFastObject(E);
  F = convertToFastObject(F);
  G = convertToFastObject(G);
  H = convertToFastObject(H);
  J = convertToFastObject(J);
  K = convertToFastObject(K);
  L = convertToFastObject(L);
  M = convertToFastObject(M);
  N = convertToFastObject(N);
  O = convertToFastObject(O);
  P = convertToFastObject(P);
  Q = convertToFastObject(Q);
  R = convertToFastObject(R);
  S = convertToFastObject(S);
  T = convertToFastObject(T);
  U = convertToFastObject(U);
  V = convertToFastObject(V);
  W = convertToFastObject(W);
  X = convertToFastObject(X);
  Y = convertToFastObject(Y);
  Z = convertToFastObject(Z);
  function init() {
    Isolate.$isolateProperties = Object.create(null);
    init.allClasses = map();
    init.getTypeFromName = function(name) {
      return init.allClasses[name];
    };
    init.interceptorsByTag = map();
    init.leafTags = map();
    init.finishedClasses = map();
    Isolate.$lazy = function(fieldName, getterName, lazyValue, staticName, prototype) {
      if (!init.lazies)
        init.lazies = Object.create(null);
      init.lazies[fieldName] = getterName;
      prototype = prototype || Isolate.$isolateProperties;
      var sentinelUndefined = {};
      var sentinelInProgress = {};
      prototype[fieldName] = sentinelUndefined;
      prototype[getterName] = function() {
        var result = this[fieldName];
        if (result == sentinelInProgress)
          H.throwCyclicInit(staticName || fieldName);
        try {
          if (result === sentinelUndefined) {
            this[fieldName] = sentinelInProgress;
            try {
              result = this[fieldName] = lazyValue();
            } finally {
              if (result === sentinelUndefined)
                this[fieldName] = null;
            }
          }
          return result;
        } finally {
          this[getterName] = function() {
            return this[fieldName];
          };
        }
      };
    };
    Isolate.$finishIsolateConstructor = function(oldIsolate) {
      var isolateProperties = oldIsolate.$isolateProperties;
      function Isolate() {
        var staticNames = Object.keys(isolateProperties);
        for (var i = 0; i < staticNames.length; i++) {
          var staticName = staticNames[i];
          this[staticName] = isolateProperties[staticName];
        }
        var lazies = init.lazies;
        var lazyInitializers = lazies ? Object.keys(lazies) : [];
        for (var i = 0; i < lazyInitializers.length; i++)
          this[lazies[lazyInitializers[i]]] = null;
        function ForceEfficientMap() {
        }
        ForceEfficientMap.prototype = this;
        new ForceEfficientMap();
        for (var i = 0; i < lazyInitializers.length; i++) {
          var lazyInitName = lazies[lazyInitializers[i]];
          this[lazyInitName] = isolateProperties[lazyInitName];
        }
      }
      Isolate.prototype = oldIsolate.prototype;
      Isolate.prototype.constructor = Isolate;
      Isolate.$isolateProperties = isolateProperties;
      Isolate.makeConstantList = oldIsolate.makeConstantList;
      Isolate.functionThatReturnsNull = oldIsolate.functionThatReturnsNull;
      return Isolate;
    };
  }
  !function() {
    var intern = function(s) {
      var o = {};
      o[s] = 1;
      return Object.keys(convertToFastObject(o))[0];
    };
    init.getIsolateTag = function(name) {
      return intern("___dart_" + name + init.isolateTag);
    };
    var tableProperty = "___dart_isolate_tags_";
    var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
    var rootProperty = "_ZxYxX";
    for (var i = 0;; i++) {
      var property = intern(rootProperty + "_" + i + "_");
      if (!(property in usedProperties)) {
        usedProperties[property] = 1;
        init.isolateTag = property;
        break;
      }
    }
    init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
  }();
  // BEGIN invoke [main].
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != 'undefined') {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    if (typeof dartMainRunner === "function")
      dartMainRunner(F.main, []);
    else
      F.main([]);
  });
  // END invoke [main].
})();

//# sourceMappingURL=main.dart.js.map
